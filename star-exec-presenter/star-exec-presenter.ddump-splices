Warning: The package list for 'hackage.haskell.org' is 43 days old.
Run 'cabal update' to get the latest list of available packages.

Data/Byteable.hs:48:11: Warning:
    Rule "constEqBytes/ByteString" may never fire
      because `constEqBytes' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `constEqBytes'
Warning: email-validate.cabal: Unexpected section 'test-module' on line 38

src/Control/Monad/Catch.hs:99:1: Warning:
    The import of `Control.Monad.Trans.Reader' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Reader'
    To import instances alone, use: import Control.Monad.Trans.Reader()

Control/Monad/Error/Class.hs:55:1: Warning:
    Module `Control.Monad.Instances' is deprecated:
      This module now contains no instances and will be removed in the future

Control/Monad/Error.hs:57:1: Warning:
    Module `Control.Monad.Instances' is deprecated:
      This module now contains no instances and will be removed in the future

src/Network/Info.hsc:48:10: Warning:
    No explicit implementation for
      either `poke' or `pokeElemOff' or `pokeByteOff'
    In the instance declaration for `Storable NetworkInterface'

Network/URI.hs:201:1: Warning:
    Defined but not used: `testDefaultUserInfoMap'

Network/URI.hs:285:1: Warning:
    Defined but not used: `testURIReference'

Network/URI.hs:316:33: Warning:
    This binding for `scheme' shadows the existing binding
      defined at Network/URI.hs:1291:1

Network/URI.hs:357:1: Warning: Defined but not used: `genDelims'

Network/URI.hs:805:1: Warning: Defined but not used: `alphaNumChar'

Network/URI.hs:961:18: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Num a0)
        arising from a use of `multi_byte' at Network/URI.hs:961:18-27
      (Eq a0)
        arising from a use of `multi_byte' at Network/URI.hs:961:18-27
    In the expression: multi_byte 2 15 2048
    In an equation for `unEscapeUtf8':
        unEscapeUtf8 c rest
          | c < 128 = chr c : unEscapeString rest
          | c < 192 = replacement_character : unEscapeString rest
          | c < 224 = multi1
          | c < 240 = multi_byte 2 15 2048
          | c < 248 = multi_byte 3 7 65536
          | c < 252 = multi_byte 4 3 2097152
          | c < 254 = multi_byte 5 1 67108864
          | otherwise = replacement_character : unEscapeString rest
          where
              replacement_character = '\65533'
              multi1
                = case unEscapeByte rest of {
                    Just (c1, ds) | c1 .&. 192 == 128 -> ...
                    _ -> replacement_character : unEscapeString rest }
              multi_byte i mask overlong
                = aux i rest (unEscapeByte rest) (c .&. mask)
                where
                    aux 0 rs _ acc
                      | overlong <= acc
                        &&
                          acc <= 1114111
                          && (acc < 55296 || 57343 < acc) && (acc < 65534 || 65535 < acc)
                      = chr acc : unEscapeString rs
                      | otherwise = replacement_character : unEscapeString rs
                    aux n _ (Just (r, rs)) acc
                      | r .&. 192 == 128
                      = aux (n - 1) rs (unEscapeByte rs) $! shiftL acc 6 .|. (r .&. 63)
                    aux _ rs _ _ = replacement_character : unEscapeString rs

Network/URI.hs:962:18: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Num a0)
        arising from a use of `multi_byte' at Network/URI.hs:962:18-27
      (Eq a0)
        arising from a use of `multi_byte' at Network/URI.hs:962:18-27
    In the expression: multi_byte 3 7 65536
    In an equation for `unEscapeUtf8':
        unEscapeUtf8 c rest
          | c < 128 = chr c : unEscapeString rest
          | c < 192 = replacement_character : unEscapeString rest
          | c < 224 = multi1
          | c < 240 = multi_byte 2 15 2048
          | c < 248 = multi_byte 3 7 65536
          | c < 252 = multi_byte 4 3 2097152
          | c < 254 = multi_byte 5 1 67108864
          | otherwise = replacement_character : unEscapeString rest
          where
              replacement_character = '\65533'
              multi1
                = case unEscapeByte rest of {
                    Just (c1, ds) | c1 .&. 192 == 128 -> ...
                    _ -> replacement_character : unEscapeString rest }
              multi_byte i mask overlong
                = aux i rest (unEscapeByte rest) (c .&. mask)
                where
                    aux 0 rs _ acc
                      | overlong <= acc
                        &&
                          acc <= 1114111
                          && (acc < 55296 || 57343 < acc) && (acc < 65534 || 65535 < acc)
                      = chr acc : unEscapeString rs
                      | otherwise = replacement_character : unEscapeString rs
                    aux n _ (Just (r, rs)) acc
                      | r .&. 192 == 128
                      = aux (n - 1) rs (unEscapeByte rs) $! shiftL acc 6 .|. (r .&. 63)
                    aux _ rs _ _ = replacement_character : unEscapeString rs

Network/URI.hs:963:18: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Num a0)
        arising from a use of `multi_byte' at Network/URI.hs:963:18-27
      (Eq a0)
        arising from a use of `multi_byte' at Network/URI.hs:963:18-27
    In the expression: multi_byte 4 3 2097152
    In an equation for `unEscapeUtf8':
        unEscapeUtf8 c rest
          | c < 128 = chr c : unEscapeString rest
          | c < 192 = replacement_character : unEscapeString rest
          | c < 224 = multi1
          | c < 240 = multi_byte 2 15 2048
          | c < 248 = multi_byte 3 7 65536
          | c < 252 = multi_byte 4 3 2097152
          | c < 254 = multi_byte 5 1 67108864
          | otherwise = replacement_character : unEscapeString rest
          where
              replacement_character = '\65533'
              multi1
                = case unEscapeByte rest of {
                    Just (c1, ds) | c1 .&. 192 == 128 -> ...
                    _ -> replacement_character : unEscapeString rest }
              multi_byte i mask overlong
                = aux i rest (unEscapeByte rest) (c .&. mask)
                where
                    aux 0 rs _ acc
                      | overlong <= acc
                        &&
                          acc <= 1114111
                          && (acc < 55296 || 57343 < acc) && (acc < 65534 || 65535 < acc)
                      = chr acc : unEscapeString rs
                      | otherwise = replacement_character : unEscapeString rs
                    aux n _ (Just (r, rs)) acc
                      | r .&. 192 == 128
                      = aux (n - 1) rs (unEscapeByte rs) $! shiftL acc 6 .|. (r .&. 63)
                    aux _ rs _ _ = replacement_character : unEscapeString rs

Network/URI.hs:964:18: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Num a0)
        arising from a use of `multi_byte' at Network/URI.hs:964:18-27
      (Eq a0)
        arising from a use of `multi_byte' at Network/URI.hs:964:18-27
    In the expression: multi_byte 5 1 67108864
    In an equation for `unEscapeUtf8':
        unEscapeUtf8 c rest
          | c < 128 = chr c : unEscapeString rest
          | c < 192 = replacement_character : unEscapeString rest
          | c < 224 = multi1
          | c < 240 = multi_byte 2 15 2048
          | c < 248 = multi_byte 3 7 65536
          | c < 252 = multi_byte 4 3 2097152
          | c < 254 = multi_byte 5 1 67108864
          | otherwise = replacement_character : unEscapeString rest
          where
              replacement_character = '\65533'
              multi1
                = case unEscapeByte rest of {
                    Just (c1, ds) | c1 .&. 192 == 128 -> ...
                    _ -> replacement_character : unEscapeString rest }
              multi_byte i mask overlong
                = aux i rest (unEscapeByte rest) (c .&. mask)
                where
                    aux 0 rs _ acc
                      | overlong <= acc
                        &&
                          acc <= 1114111
                          && (acc < 55296 || 57343 < acc) && (acc < 65534 || 65535 < acc)
                      = chr acc : unEscapeString rs
                      | otherwise = replacement_character : unEscapeString rs
                    aux n _ (Just (r, rs)) acc
                      | r .&. 192 == 128
                      = aux (n - 1) rs (unEscapeByte rs) $! shiftL acc 6 .|. (r .&. 63)
                    aux _ rs _ _ = replacement_character : unEscapeString rs

Network/URI.hs:1262:1: Warning: Defined but not used: `traceShow'

Network/URI.hs:1265:1: Warning: Defined but not used: `traceVal'

Network/URI.hs:335:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '%'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:390:34: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '?'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:391:34: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '#'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:403:15: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- try (string "//")'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:422:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char ':'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:445:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '@'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:456:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '['
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:458:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char ']'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:465:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char 'v'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:467:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '.'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:483:19: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string "::"'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:490:19: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string "::"'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:497:19: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string "::"'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:504:19: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string "::"'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:511:19: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string "::"'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:518:19: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string "::"'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:524:19: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string "::"'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:530:19: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string "::"'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:553:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char ':'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:563:28: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '.'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:564:28: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '.'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:565:28: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '.'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:592:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char ':'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:635:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '/'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:656:11: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '/'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:728:34: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '?'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:729:34: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '#'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:741:15: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- try (string "//")'
    or by using the flag -fno-warn-unused-do-bind

Network/URI.hs:763:34: Warning:
    A do-notation statement discarded a result of type `Char'
    Suppress this warning by saying _ <- char '?'
    or by using the flag -fno-warn-unused-do-bind

Codec/Archive/Tar/Read.hs:203:10: Warning:
    `Partial' is an instance of Monad but not Applicative - this will become an error in GHC 7.10, under the Applicative-Monad Proposal.

src/Text/Blaze/Internal.hs:166:10: Warning:
    `MarkupM' is an instance of Monad but not Applicative - this will become an error in GHC 7.10, under the Applicative-Monad Proposal.

Data/Csv/Conversion/Internal.hs:28:11: Warning:
    Rule "formatDecimal/Int" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Data/Csv/Conversion/Internal.hs:30:11: Warning:
    Rule "formatDecimal/Int16" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Data/Csv/Conversion/Internal.hs:32:11: Warning:
    Rule "formatDecimal/Int32" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Data/Csv/Conversion/Internal.hs:34:11: Warning:
    Rule "formatDecimal/Int64" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Data/Csv/Conversion/Internal.hs:36:11: Warning:
    Rule "formatDecimal/Word" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Data/Csv/Conversion/Internal.hs:38:11: Warning:
    Rule "formatDecimal/Word8" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Data/Csv/Conversion/Internal.hs:40:11: Warning:
    Rule "formatDecimal/Word16" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Data/Csv/Conversion/Internal.hs:42:11: Warning:
    Rule "formatDecimal/Word32" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Data/Csv/Conversion/Internal.hs:44:11: Warning:
    Rule "formatDecimal/Word64" may never fire
      because `formatDecimal' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `formatDecimal'

Crypto/Hash/Whirlpool.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/Tiger.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/RIPEMD160.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/SHA512.hs:51:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/SHA384.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/SHA256.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/SHA224.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/SHA1.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/MD5.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/MD4.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

Crypto/Hash/MD2.hs:50:11: Warning:
    Rule "digestSize" may never fire
      because `B.length' might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma on `B.length'

src/Control/Monad/CatchIO.hs:29:1: Warning:
    Module `Prelude' does not export `catch'

src/Control/Monad/CatchIO/Try.hs:23:1: Warning:
    The import of `MonadIO'
    from module `Control.Monad.Error' is redundant

Yesod/Routes/Overlap.hs:39:7: Warning:
    Defined but not used: `overlapF1'

Yesod/Routes/Overlap.hs:40:7: Warning:
    Defined but not used: `overlapF2'

Yesod/Routes/TH/Dispatch.hs:301:17: Warning:
    Defined but not used: `env'

lib/Filesystem.hs:79:1: Warning:
    The import of `when' from module `Control.Monad' is redundant

lib/Filesystem.hs:95:1: Warning:
    The import of `System.IO.Error' is redundant
      except perhaps to import instances from `System.IO.Error'
    To import instances alone, use: import System.IO.Error()

lib/Filesystem.hs:922:1: Warning:
    Defined but not used: `throwErrnoPathIfMinus1'
unused terminals: 2
shift/reduce conflicts:  134
reduce/reduce conflicts: 198

src/Language/JavaScript/Parser/LexerUtils.hs:86:1: Warning:
    Defined but not used: `stripLineContinuations'

src/Language/JavaScript/Parser/LexerUtils.hs:89:1: Warning:
    Defined but not used: `doStripLineContinuations'

dist/dist-sandbox-fda5b430/build/Language/JavaScript/Parser/Lexer.hs:646:1: Warning:
    Top-level binding with no type signature:
      alexIndexInt32OffAddr :: AlexAddr -> Int# -> Int#

dist/dist-sandbox-fda5b430/build/Language/JavaScript/Parser/Lexer.hs:671:1: Warning:
    Top-level binding with no type signature:
      quickIndex :: Array
                      Int (AlexAcc (AlexInput -> Int -> Alex Token) Any)
                    -> Int -> AlexAcc (AlexInput -> Int -> Alex Token) Any

dist/dist-sandbox-fda5b430/build/Language/JavaScript/Parser/Lexer.hs:687:1: Warning:
    Top-level binding with no type signature:
      alexScan :: AlexInput
                  -> Int -> AlexReturn (AlexInput -> Int -> Alex Token)

dist/dist-sandbox-fda5b430/build/Language/JavaScript/Parser/Lexer.hs:690:1: Warning:
    Top-level binding with no type signature:
      alexScanUser :: forall t.
                      t
                      -> AlexInput -> Int -> AlexReturn (AlexInput -> Int -> Alex Token)

dist/dist-sandbox-fda5b430/build/Language/JavaScript/Parser/Lexer.hs:721:1: Warning:
    Top-level binding with no type signature:
      alex_scan_tkn :: forall t t1.
                       t
                       -> t1
                       -> Int#
                       -> AlexInput
                       -> Int#
                       -> AlexLastAcc (AlexInput -> Int -> Alex Token)
                       -> (AlexLastAcc (AlexInput -> Int -> Alex Token), AlexInput)

src/Language/JavaScript/Parser/Lexer.x:361:1: Warning:
    Top-level binding with no type signature: lexToken :: Alex Token

src/Language/JavaScript/Parser/Lexer.x:369:11: Warning:
    This binding for `token' shadows the existing binding
      defined at templates/wrappers.hs:240:1

src/Language/JavaScript/Parser/Lexer.x:372:19: Warning:
    Defined but not used: inp'

src/Language/JavaScript/Parser/Lexer.x:380:11: Warning:
    This binding for `token' shadows the existing binding
      defined at templates/wrappers.hs:240:1

src/Language/JavaScript/Parser/Lexer.x:388:1: Warning:
    Top-level binding with no type signature:
      lexCont :: forall b. (Token -> Alex b) -> Alex b

src/Language/JavaScript/Parser/Lexer.x:407:1: Warning:
    Top-level binding with no type signature:
      toCommentAnnotation :: [Token] -> [CommentAnnotation]

src/Language/JavaScript/Parser/Lexer.x:452:9: Warning:
    Defined but not used: `loc'

src/Language/JavaScript/Parser/Lexer.x:452:14: Warning:
    Defined but not used: `p'

src/Language/JavaScript/Parser/Lexer.x:567:1: Warning:
    Defined but not used: `bof'

src/Language/JavaScript/Parser/Lexer.x:570:1: Warning:
    Top-level binding with no type signature:
      alex_action_1 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:571:1: Warning:
    Top-level binding with no type signature:
      alex_action_2 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:572:1: Warning:
    Top-level binding with no type signature:
      alex_action_3 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:573:1: Warning:
    Top-level binding with no type signature:
      alex_action_4 :: forall t t1.
                       (AlexPosn, t, t1, [Char]) -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:573:19: Warning:
    Defined but not used: `ap'

src/Language/JavaScript/Parser/Lexer.x:574:1: Warning:
    Top-level binding with no type signature:
      alex_action_5 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:575:1: Warning:
    Top-level binding with no type signature:
      alex_action_6 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:576:1: Warning:
    Top-level binding with no type signature:
      alex_action_7 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:577:1: Warning:
    Top-level binding with no type signature:
      alex_action_8 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:578:1: Warning:
    Top-level binding with no type signature:
      alex_action_9 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:579:1: Warning:
    Top-level binding with no type signature:
      alex_action_11 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:580:1: Warning:
    Top-level binding with no type signature:
      alex_action_12 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:581:1: Warning:
    Top-level binding with no type signature:
      alex_action_13 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:582:1: Warning:
    Top-level binding with no type signature:
      alex_action_14 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:583:1: Warning:
    Top-level binding with no type signature:
      alex_action_15 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:584:1: Warning:
    Top-level binding with no type signature:
      alex_action_16 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:585:1: Warning:
    Top-level binding with no type signature:
      alex_action_17 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:586:1: Warning:
    Top-level binding with no type signature:
      alex_action_18 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:587:1: Warning:
    Top-level binding with no type signature:
      alex_action_19 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:588:1: Warning:
    Top-level binding with no type signature:
      alex_action_20 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:589:1: Warning:
    Top-level binding with no type signature:
      alex_action_21 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:590:1: Warning:
    Top-level binding with no type signature:
      alex_action_22 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:591:1: Warning:
    Top-level binding with no type signature:
      alex_action_23 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:592:1: Warning:
    Top-level binding with no type signature:
      alex_action_24 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:593:1: Warning:
    Top-level binding with no type signature:
      alex_action_25 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:594:1: Warning:
    Top-level binding with no type signature:
      alex_action_26 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:595:1: Warning:
    Top-level binding with no type signature:
      alex_action_27 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:596:1: Warning:
    Top-level binding with no type signature:
      alex_action_28 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:597:1: Warning:
    Top-level binding with no type signature:
      alex_action_29 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:598:1: Warning:
    Top-level binding with no type signature:
      alex_action_30 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:599:1: Warning:
    Top-level binding with no type signature:
      alex_action_31 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:600:1: Warning:
    Top-level binding with no type signature:
      alex_action_32 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:601:1: Warning:
    Top-level binding with no type signature:
      alex_action_33 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:602:1: Warning:
    Top-level binding with no type signature:
      alex_action_34 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:603:1: Warning:
    Top-level binding with no type signature:
      alex_action_35 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:604:1: Warning:
    Top-level binding with no type signature:
      alex_action_36 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:605:1: Warning:
    Top-level binding with no type signature:
      alex_action_37 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:606:1: Warning:
    Top-level binding with no type signature:
      alex_action_38 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:607:1: Warning:
    Top-level binding with no type signature:
      alex_action_39 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:608:1: Warning:
    Top-level binding with no type signature:
      alex_action_40 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:609:1: Warning:
    Top-level binding with no type signature:
      alex_action_41 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:610:1: Warning:
    Top-level binding with no type signature:
      alex_action_42 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:611:1: Warning:
    Top-level binding with no type signature:
      alex_action_43 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:612:1: Warning:
    Top-level binding with no type signature:
      alex_action_44 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:613:1: Warning:
    Top-level binding with no type signature:
      alex_action_45 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:614:1: Warning:
    Top-level binding with no type signature:
      alex_action_46 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:615:1: Warning:
    Top-level binding with no type signature:
      alex_action_47 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:616:1: Warning:
    Top-level binding with no type signature:
      alex_action_48 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:617:1: Warning:
    Top-level binding with no type signature:
      alex_action_49 :: AlexInput -> Int -> Alex Token

src/Language/JavaScript/Parser/Lexer.x:618:1: Warning:
    Top-level binding with no type signature:
      alex_action_50 :: AlexInput -> Int -> Alex Token

templates/GenericTemplate.hs:60:1: Warning:
    Top-level binding with no type signature:
      alexIndexInt16OffAddr :: AlexAddr -> Int# -> Int#

templates/GenericTemplate.hs:205:10: Warning:
    Defined but not used: `f'

templates/GenericTemplate.hs:207:10: Warning:
    Defined but not used: `f'

templates/GenericTemplate.hs:244:1: Warning:
    Defined but not used: `iUnbox'

templates/GenericTemplate.hs:244:1: Warning:
    Top-level binding with no type signature: iUnbox :: Int -> Int#

templates/wrappers.hs:60:1: Warning:
    Defined but not used: `ignorePendingBytes'

templates/wrappers.hs:60:25: Warning: Defined but not used: `ps'

templates/wrappers.hs:63:1: Warning:
    Defined but not used: `alexInputPrevChar'

templates/wrappers.hs:63:20: Warning: Defined but not used: `p'

templates/wrappers.hs:63:24: Warning: Defined but not used: `bs'

templates/wrappers.hs:63:27: Warning: Defined but not used: `s'

templates/wrappers.hs:67:14: Warning: Defined but not used: `p'

templates/wrappers.hs:67:16: Warning: Defined but not used: `c'

templates/wrappers.hs:141:22: Warning: Defined but not used: `c'

templates/wrappers.hs:176:10: Warning:
    `Alex' is an instance of Monad but not Applicative - this will become an error in GHC 7.10, under the Applicative-Monad Proposal.

templates/wrappers.hs:190:19: Warning:
    This binding for `s' shadows the existing binding
      bound at templates/wrappers.hs:189:12

templates/wrappers.hs:193:29: Warning: Defined but not used: `s'

templates/wrappers.hs:196:1: Warning:
    Defined but not used: `alexGetStartCode'

templates/wrappers.hs:199:1: Warning:
    Defined but not used: `alexSetStartCode'

templates/wrappers.hs:203:1: Warning:
    Defined but not used: `alexGetUserState'

templates/wrappers.hs:206:1: Warning:
    Defined but not used: `alexSetUserState'

templates/wrappers.hs:209:1: Warning:
    Defined but not used: `alexMonadScan'

templates/wrappers.hs:209:1: Warning:
    Top-level binding with no type signature:
      alexMonadScan :: Alex Token

templates/wrappers.hs:215:20: Warning: Defined but not used: `len'

templates/wrappers.hs:229:1: Warning: Defined but not used: `skip'

templates/wrappers.hs:229:1: Warning:
    Top-level binding with no type signature:
      skip :: forall t t1. t -> t1 -> Alex Token

templates/wrappers.hs:229:6: Warning: Defined but not used: `input'

templates/wrappers.hs:229:12: Warning: Defined but not used: `len'

templates/wrappers.hs:233:1: Warning: Defined but not used: `begin'

templates/wrappers.hs:233:1: Warning:
    Top-level binding with no type signature:
      begin :: forall t t1. Int -> t -> t1 -> Alex Token

templates/wrappers.hs:233:12: Warning:
    Defined but not used: `input'

templates/wrappers.hs:233:18: Warning: Defined but not used: `len'

templates/wrappers.hs:237:9: Warning:
    Defined but not used: `andBegin'

templates/wrappers.hs:240:1: Warning: Defined but not used: `token'

templates/wrappers.hs:443:1: Warning:
    Top-level binding with no type signature:
      alex_accept :: forall user.
                     Array Int (AlexAcc (AlexInput -> Int -> Alex Token) user)

src/Language/JavaScript/Parser/Lexer.x:412:5: Warning:
    Pattern match(es) are non-exhaustive
    In an equation for `go':
        Patterns not matched:
            IdentifierToken _ _ _
            DecimalToken _ _ _
            HexIntegerToken _ _ _
            OctalToken _ _ _
            ...

src/Language/JavaScript/Parser/Parser.hs:15:1: Warning:
    The import of `Language.JavaScript.Parser.ParseError' is redundant
      except perhaps to import instances from `Language.JavaScript.Parser.ParseError'
    To import instances alone, use: import Language.JavaScript.Parser.ParseError()

src/Language/JavaScript/Pretty/Printer.hs:19:1: Warning:
    The import of `Debug.Trace' is redundant
      except perhaps to import instances from `Debug.Trace'
    To import instances alone, use: import Debug.Trace()

src/Language/JavaScript/Pretty/Printer.hs:32:1: Warning:
    Defined but not used: `<+>'

src/Language/JavaScript/Pretty/Printer.hs:38:1: Warning:
    Defined but not used: `hcat'

src/Language/JavaScript/Pretty/Printer.hs:47:1: Warning:
    Defined but not used: `char'

src/Language/JavaScript/Pretty/Printer.hs:50:1: Warning:
    Defined but not used: `comma'

src/Language/JavaScript/Pretty/Printer.hs:53:1: Warning:
    Defined but not used: `punctuate'

src/Language/JavaScript/Pretty/Printer.hs:58:1: Warning:
    Defined but not used: `<!>'

src/Language/JavaScript/Pretty/Printer.hs:86:26: Warning:
    Defined but not used: `s'

src/Language/JavaScript/Pretty/Printer.hs:94:28: Warning:
    Defined but not used: `s'

src/Language/JavaScript/Pretty/Printer.hs:96:29: Warning:
    Defined but not used: `s'

src/Language/JavaScript/Pretty/Printer.hs:122:17: Warning:
    Defined but not used: `l'

src/Language/JavaScript/Pretty/Printer.hs:148:8: Warning:
    This binding for `foo' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:145:7

src/Language/JavaScript/Pretty/Printer.hs:149:8: Warning:
    This binding for `foo' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:145:7

src/Language/JavaScript/Pretty/Printer.hs:150:8: Warning:
    This binding for `foo' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:145:7

src/Language/JavaScript/Pretty/Printer.hs:162:34: Warning:
    This binding for `char' shadows the existing binding
      defined at src/Language/JavaScript/Pretty/Printer.hs:47:1

src/Language/JavaScript/Pretty/Printer.hs:164:9: Warning:
    This binding for `r' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:160:12

src/Language/JavaScript/Pretty/Printer.hs:164:11: Warning:
    This binding for `c' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:160:14

src/Language/JavaScript/Pretty/Printer.hs:164:11: Warning:
    Defined but not used: `c'

src/Language/JavaScript/Pretty/Printer.hs:165:9: Warning:
    This binding for `r' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:160:12

src/Language/JavaScript/Pretty/Printer.hs:165:11: Warning:
    This binding for `c' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:160:14

src/Language/JavaScript/Pretty/Printer.hs:166:9: Warning:
    This binding for `r' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:160:12

src/Language/JavaScript/Pretty/Printer.hs:166:11: Warning:
    This binding for `c' shadows the existing binding
      bound at src/Language/JavaScript/Pretty/Printer.hs:160:14

src/Language/JavaScript/Pretty/Printer.hs:199:1: Warning:
    Top-level binding with no type signature: _ax :: JSNode

src/Language/JavaScript/Pretty/Printer.hs:211:1: Warning:
    Top-level binding with no type signature: _r1 :: JSNode

src/Language/JavaScript/Parser.hs:23:1: Warning:
    The import of `Language.JavaScript.Parser.ParseError' is redundant
      except perhaps to import instances from `Language.JavaScript.Parser.ParseError'
    To import instances alone, use: import Language.JavaScript.Parser.ParseError()

Crypto/Cipher/Types/Block.hs:38:1: Warning:
    The import of `Bits' from module `Data.Bits' is redundant

Text/Hamlet.hs:402:1: Warning: Defined but not used: `varName'

Text/Hamlet.hs:406:1: Warning: Defined but not used: `strToExp'

Text/Hamlet.hs:439:16: Warning: Defined but not used: `html'

Text/Hamlet.hs:440:14: Warning: Defined but not used: `url'

Text/Hamlet.hs:441:19: Warning: Defined but not used: `url'

Text/Hamlet.hs:442:16: Warning: Defined but not used: `url'

Text/Hamlet.hs:443:20: Warning: Defined but not used: `msg_url'

Text/Hamlet.hs:444:14: Warning: Defined but not used: `msg'

Text/Hamlet.hs:488:43: Warning:
    This binding for `c' shadows the existing binding
      bound at Text/Hamlet.hs:484:13

Text/Hamlet/RT.hs:78:13: Warning: Defined but not used: `x'

Text/Hamlet/RT.hs:78:26: Warning: Defined but not used: `deref'

Text/Hamlet/RT.hs:78:45: Warning: Defined but not used: `docs'

Text/Hamlet/RT.hs:85:13: Warning: Defined but not used: `x'

Text/Hamlet/RT.hs:85:25: Warning: Defined but not used: `deref'

Text/Hamlet/RT.hs:85:44: Warning: Defined but not used: `jdocs'

Text/Hamlet/RT.hs:85:50: Warning: Defined but not used: `ndocs'

Text/Hamlet/RT.hs:115:37: Warning:
    This binding for `x' shadows the existing binding
      bound at Text/Hamlet/RT.hs:108:13

Text/Julius.hs:90:63: Warning:
    In the use of `fromValue' (imported from Data.Aeson.Encode):
    Deprecated: "Use 'encodeToTextBuilder' instead"

Text/Css.hs:349:40: Warning: Defined but not used: `subblocks'

Text/Css.hs:367:5: Warning: Defined but not used: `subGo'

Data/ASN1/Parse.hs:40:1: Warning:
    Top-level binding with no type signature:
      runErrT :: forall e (m :: * -> *) a. ErrorT e m a -> m (Either e a)

Network/Wai/Handler/Warp.hs:65:5: Warning:
    The export item `HostPreference(..)' suggests that
    `HostPreference' has (in-scope) constructors or class methods,
    but it has none

Network/Wai/Handler/Warp.hs:229:5: Warning:
    accepting non-standard pattern guards (use PatternGuards to suppress this message)
        Just x' <- x, x' < 0

Control/Monad/Trans/Resource/Internal.hs:27:1: Warning:
    The import of `ComposeSt, defaultRestoreM, defaultLiftBaseWith,
                   control'
    from module `Control.Monad.Trans.Control' is redundant

Control/Monad/Trans/Resource/Internal.hs:53:1: Warning:
    The import of `ap' from module `Control.Monad' is redundant

Control/Monad/Trans/Resource/Internal.hs:55:1: Warning:
    The import of `Control.Monad.ST' is redundant
      except perhaps to import instances from `Control.Monad.ST'
    To import instances alone, use: import Control.Monad.ST()

Control/Monad/Trans/Resource/Internal.hs:67:1: Warning:
    Module `Prelude' does not export `catch'

Control/Monad/Trans/Resource/Internal.hs:71:1: Warning:
    The import of `Control.Monad.ST.Unsafe' is redundant
      except perhaps to import instances from `Control.Monad.ST.Unsafe'
    To import instances alone, use: import Control.Monad.ST.Unsafe()

Control/Monad/Trans/Resource/Internal.hs:77:1: Warning:
    The qualified import of `Control.Monad.ST.Lazy.Unsafe' is redundant
      except perhaps to import instances from `Control.Monad.ST.Lazy.Unsafe'
    To import instances alone, use: import Control.Monad.ST.Lazy.Unsafe()

Control/Monad/Trans/Resource/Internal.hs:82:1: Warning:
    The qualified import of `Control.Monad.ST.Lazy' is redundant
      except perhaps to import instances from `Control.Monad.ST.Lazy'
    To import instances alone, use: import Control.Monad.ST.Lazy()

Control/Monad/Trans/Resource.hs:54:7: Warning:
    The export item `ExceptionT(..)' suggests that
    `ExceptionT' has (in-scope) constructors or class methods,
    but it has none

Control/Monad/Trans/Resource.hs:64:1: Warning:
    The import of `throw' from module `Control.Exception' is redundant

Control/Monad/Trans/Resource.hs:73:1: Warning:
    The import of `Data.Monoid' is redundant
      except perhaps to import instances from `Data.Monoid'
    To import instances alone, use: import Data.Monoid()

Control/Monad/Trans/Resource.hs:76:1: Warning:
    The import of `Control.Monad.Trans.Identity' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Identity'
    To import instances alone, use: import Control.Monad.Trans.Identity()

Control/Monad/Trans/Resource.hs:77:1: Warning:
    The import of `Control.Monad.Trans.List' is redundant
      except perhaps to import instances from `Control.Monad.Trans.List'
    To import instances alone, use: import Control.Monad.Trans.List()

Control/Monad/Trans/Resource.hs:78:1: Warning:
    The import of `Control.Monad.Trans.Maybe' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Maybe'
    To import instances alone, use: import Control.Monad.Trans.Maybe()

Control/Monad/Trans/Resource.hs:79:1: Warning:
    The import of `Control.Monad.Trans.Error' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Error'
    To import instances alone, use: import Control.Monad.Trans.Error()

Control/Monad/Trans/Resource.hs:80:1: Warning:
    The import of `Control.Monad.Trans.Reader' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Reader'
    To import instances alone, use: import Control.Monad.Trans.Reader()

Control/Monad/Trans/Resource.hs:81:1: Warning:
    The import of `Control.Monad.Trans.State' is redundant
      except perhaps to import instances from `Control.Monad.Trans.State'
    To import instances alone, use: import Control.Monad.Trans.State()

Control/Monad/Trans/Resource.hs:82:1: Warning:
    The import of `Control.Monad.Trans.Writer' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Writer'
    To import instances alone, use: import Control.Monad.Trans.Writer()

Control/Monad/Trans/Resource.hs:84:1: Warning:
    The import of `Control.Monad.Trans.RWS' is redundant
      except perhaps to import instances from `Control.Monad.Trans.RWS'
    To import instances alone, use: import Control.Monad.Trans.RWS()

Control/Monad/Trans/Resource.hs:86:1: Warning:
    The qualified import of `Control.Monad.Trans.RWS.Strict' is redundant
      except perhaps to import instances from `Control.Monad.Trans.RWS.Strict'
    To import instances alone, use: import Control.Monad.Trans.RWS.Strict()

Control/Monad/Trans/Resource.hs:87:1: Warning:
    The qualified import of `Control.Monad.Trans.State.Strict' is redundant
      except perhaps to import instances from `Control.Monad.Trans.State.Strict'
    To import instances alone, use: import Control.Monad.Trans.State.Strict()

Control/Monad/Trans/Resource.hs:88:1: Warning:
    The qualified import of `Control.Monad.Trans.Writer.Strict' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Writer.Strict'
    To import instances alone, use: import Control.Monad.Trans.Writer.Strict()

Control/Monad/Trans/Resource.hs:91:1: Warning:
    The import of `Control.Monad.ST' is redundant
      except perhaps to import instances from `Control.Monad.ST'
    To import instances alone, use: import Control.Monad.ST()

Control/Monad/Trans/Resource.hs:93:1: Warning:
    The qualified import of `Control.Monad.ST.Lazy' is redundant
      except perhaps to import instances from `Control.Monad.ST.Lazy'
    To import instances alone, use: import Control.Monad.ST.Lazy()

Control/Monad/Trans/Resource.hs:96:1: Warning:
    The import of `Control.Monad.Morph' is redundant
      except perhaps to import instances from `Control.Monad.Morph'
    To import instances alone, use: import Control.Monad.Morph()

Control/Monad/Trans/Resource.hs:222:1: Warning:
    Defined but not used: `finally'

Data/Acquire.hs:14:1: Warning:
    The import of `Control.Monad.Trans.Resource' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Resource'
    To import instances alone, use: import Control.Monad.Trans.Resource()

Data/Acquire.hs:16:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()

Data/Acquire.hs:17:1: Warning:
    The import of `Control.Monad.Base' is redundant
      except perhaps to import instances from `Control.Monad.Base'
    To import instances alone, use: import Control.Monad.Base()

Data/Acquire.hs:19:1: Warning:
    The import of `Control.Monad.Trans.Control' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Control'
    To import instances alone, use: import Control.Monad.Trans.Control()

Data/Acquire.hs:21:1: Warning:
    The import of `Data.Typeable' is redundant
      except perhaps to import instances from `Data.Typeable'
    To import instances alone, use: import Data.Typeable()

Data/Acquire.hs:22:1: Warning:
    The import of `Control.Monad' is redundant
      except perhaps to import instances from `Control.Monad'
    To import instances alone, use: import Control.Monad()

Crypto/Random/AESCtr.hs:31:1: Warning:
    The import of `.&.' from module `Data.Bits' is redundant

Data/X509/Internal.hs:29:1: Warning:
    Top-level binding with no type signature:
      runErrT :: forall e (m :: * -> *) a. ErrorT e m a -> m (Either e a)

Data/Conduit/Internal/Conduit.hs:85:1: Warning:
    Module `Prelude' does not export `catch'

Network/Wai/EventSource.hs:11:1: Warning:
    The import of `Blaze.ByteString.Builder' is redundant
      except perhaps to import instances from `Blaze.ByteString.Builder'
    To import instances alone, use: import Blaze.ByteString.Builder()

Network/Wai/EventSource.hs:16:1: Warning:
    The import of `Response' from module `Network.Wai' is redundant

Network/Wai/Middleware/Jsonp.hs:22:1: Warning:
    The import of `Builder'
    from module `Blaze.ByteString.Builder' is redundant

Network/Wai/Middleware/Jsonp.hs:28:1: Warning:
    The import of `Data.CaseInsensitive' is redundant
      except perhaps to import instances from `Data.CaseInsensitive'
    To import instances alone, use: import Data.CaseInsensitive()

Network/Wai/Middleware/Jsonp.hs:29:1: Warning:
    The import of `Network.HTTP.Types' is redundant
      except perhaps to import instances from `Network.HTTP.Types'
    To import instances alone, use: import Network.HTTP.Types()

Network/Wai/Middleware/Jsonp.hs:85:13: Warning:
    A do-notation statement discarded a result of type `a'
    Suppress this warning by saying `_ <- body sendChunk flush'
    or by using the flag -fno-warn-unused-do-bind

Network/Wai/Middleware/Gzip.hs:33:1: Warning:
    The import of `Control.Monad.IO.Class' is redundant
      except perhaps to import instances from `Control.Monad.IO.Class'
    To import instances alone, use: import Control.Monad.IO.Class()

Network/Wai/Middleware/Gzip.hs:34:1: Warning:
    The import of `Control.Monad.Trans.Resource' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Resource'
    To import instances alone, use: import Control.Monad.Trans.Resource()

Network/Wai/Middleware/Gzip.hs:121:43: Warning:
    This binding for `e' shadows the existing binding
      bound at Network/Wai/Middleware/Gzip.hs:103:5

Network/Wai/Middleware/Gzip.hs:152:33: Warning:
    Defined but not used: `blazeFinish'

Network/Wai/Middleware/Gzip.hs:167:29: Warning:
    This binding for `res' shadows the existing binding
      bound at Network/Wai/Middleware/Gzip.hs:147:15

Network/Wai/Middleware/RequestLogger/Internal.hs:11:1: Warning:
    The import of `Control.Concurrent' is redundant
      except perhaps to import instances from `Control.Concurrent'
    To import instances alone, use: import Control.Concurrent()

Network/Wai/Middleware/RequestLogger/Internal.hs:12:1: Warning:
    The import of `Control.Monad' is redundant
      except perhaps to import instances from `Control.Monad'
    To import instances alone, use: import Control.Monad()

Network/Wai/Middleware/RequestLogger/Internal.hs:21:15: Warning:
    Defined but not used: `flusher'

Network/Wai/Middleware/RequestLogger/Internal.hs:22:14: Warning:
    Defined but not used: `updater'

src/Web/ClientSession.hs:91:1: Warning:
    The import of `Data.Tagged' is redundant
      except perhaps to import instances from `Data.Tagged'
    To import instances alone, use: import Data.Tagged()

src/Web/ClientSession.hs:95:1: Warning:
    The import of `Crypto.Random' is redundant
      except perhaps to import instances from `Crypto.Random'
    To import instances alone, use: import Crypto.Random()

src/Web/ClientSession.hs:96:1: Warning:
    The import of `Crypto.Types' is redundant
      except perhaps to import instances from `Crypto.Types'
    To import instances alone, use: import Crypto.Types()

src/Web/ClientSession.hs:267:37: Warning:
    In the use of `A.initKey' (imported from Crypto.Cipher.AES):
    Deprecated: "use initAES"

Data/X509/Memory.hs:19:1: Warning:
    The import of `PEM' from module `Data.PEM' is redundant

Data/Conduit/Text.hs:40:1: Warning:
    The qualified import of `Prelude' is redundant
      except perhaps to import instances from `Prelude'
    To import instances alone, use: import Prelude()

Data/Conduit/Text.hs:150:21: Warning: Defined but not used: `name'

Data/Conduit/Network/UDP.hs:16:1: Warning:
    The import of `SockAddr, AddrInfo'
    from module `Network.Socket' is redundant

Data/Conduit/Network/UDP.hs:17:1: Warning:
    The qualified import of `Network.Socket' is redundant
      except perhaps to import instances from `Network.Socket'
    To import instances alone, use: import Network.Socket()

Data/Conduit/Network.hs:41:1: Warning:
    Module `Prelude' does not export `catch'

Data/Conduit/Network.hs:43:1: Warning:
    The qualified import of `Network.Socket' is redundant
      except perhaps to import instances from `Network.Socket'
    To import instances alone, use: import Network.Socket()

Data/Conduit/Network.hs:45:1: Warning:
    The import of `recv'
    from module `Network.Socket.ByteString' is redundant

Data/Conduit/Network.hs:49:1: Warning:
    The qualified import of `Data.ByteString.Char8' is redundant
      except perhaps to import instances from `Data.ByteString.Char8'
    To import instances alone, use: import Data.ByteString.Char8()

Data/Conduit/Network.hs:51:1: Warning:
    The import of `Control.Exception' is redundant
      except perhaps to import instances from `Control.Exception'
    To import instances alone, use: import Control.Exception()

Data/Conduit/Network.hs:84:1: Warning:
    Top-level binding with no type signature:
      serverSettings :: Int -> SN.HostPreference -> SN.ServerSettings

Data/Conduit/Network.hs:85:1: Warning:
    Top-level binding with no type signature:
      clientSettings :: Int -> ByteString -> SN.ClientSettings

Data/Conduit/Network/Unix.hs:29:1: Warning:
    The import of `Data.Conduit' is redundant
      except perhaps to import instances from `Data.Conduit'
    To import instances alone, use: import Data.Conduit()

Data/Conduit/Network/Unix.hs:30:1: Warning:
    The import of `Network.Socket' is redundant
      except perhaps to import instances from `Network.Socket'
    To import instances alone, use: import Network.Socket()

Data/Conduit/Network/Unix.hs:31:1: Warning:
    The qualified import of `Network.Socket' is redundant
      except perhaps to import instances from `Network.Socket'
    To import instances alone, use: import Network.Socket()

Data/Conduit/Network/Unix.hs:34:1: Warning:
    The import of `Control.Monad.IO.Class' is redundant
      except perhaps to import instances from `Control.Monad.IO.Class'
    To import instances alone, use: import Control.Monad.IO.Class()

Data/Conduit/Network/Unix.hs:35:1: Warning:
    The import of `Control.Exception' is redundant
      except perhaps to import instances from `Control.Exception'
    To import instances alone, use: import Control.Exception()

Data/Conduit/Network/Unix.hs:37:1: Warning:
    The import of `Control.Monad' is redundant
      except perhaps to import instances from `Control.Monad'
    To import instances alone, use: import Control.Monad()

Data/Conduit/Network/Unix.hs:38:1: Warning:
    The import of `Control.Monad.Trans.Control' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Control'
    To import instances alone, use: import Control.Monad.Trans.Control()

Data/Conduit/Network/Unix.hs:39:1: Warning:
    The import of `Control.Concurrent' is redundant
      except perhaps to import instances from `Control.Concurrent'
    To import instances alone, use: import Control.Concurrent()

Data/Conduit/Network/Unix.hs:40:1: Warning:
    The import of `System.Directory' is redundant
      except perhaps to import instances from `System.Directory'
    To import instances alone, use: import System.Directory()

Data/Conduit/Network/Unix.hs:41:1: Warning:
    The import of `System.IO.Error' is redundant
      except perhaps to import instances from `System.IO.Error'
    To import instances alone, use: import System.IO.Error()

Data/Conduit/Network/Unix.hs:42:1: Warning:
    The import of `Control.Monad.Trans.Resource' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Resource'
    To import instances alone, use: import Control.Monad.Trans.Resource()

Data/Conduit/Network/Unix.hs:44:1: Warning:
    Top-level binding with no type signature:
      clientSettings :: FilePath -> SN.ClientSettingsUnix

Data/Conduit/Network/Unix.hs:45:1: Warning:
    Top-level binding with no type signature:
      serverSettings :: FilePath -> SN.ServerSettingsUnix

Data/Conduit/Blaze.hs:52:1: Warning:
    The import of `Blaze.ByteString.Builder.Internal.Types' is redundant
      except perhaps to import instances from `Blaze.ByteString.Builder.Internal.Types'
    To import instances alone, use: import Blaze.ByteString.Builder.Internal.Types()

Text/XML/Stream/Render.hs:28:1: Warning:
    The import of `Data.ByteString' is redundant
      except perhaps to import instances from `Data.ByteString'
    To import instances alone, use: import Data.ByteString()

Text/XML/Stream/Render.hs:36:1: Warning:
    The import of `Control.Monad.Trans.Resource' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Resource'
    To import instances alone, use: import Control.Monad.Trans.Resource()

Text/XML/Stream/Render.hs:44:1: Warning:
    Top-level binding with no type signature:
      renderBytes :: forall (m :: * -> *) (base :: * -> *).
                     (transformers-base-0.4.3:Control.Monad.Base.MonadBase base m,
                      primitive-0.5.2.1:Control.Monad.Primitive.PrimMonad base) =>
                     RenderSettings -> ConduitM Event ByteString m ()

Text/XML/Stream/Render.hs:53:1: Warning:
    Top-level binding with no type signature:
      renderText :: forall (m :: * -> *) (base :: * -> *).
                    (MonadThrow m,
                     transformers-base-0.4.3:Control.Monad.Base.MonadBase base m,
                     primitive-0.5.2.1:Control.Monad.Primitive.PrimMonad base) =>
                    RenderSettings -> ConduitM Event Text m ()

Text/XML/Unresolved.hs:129:1: Warning:
    Top-level binding with no type signature:
      renderBytes :: forall a (m :: * -> *) (base :: * -> *).
                     (transformers-base-0.4.3:Control.Monad.Base.MonadBase base m,
                      primitive-0.5.2.1:Control.Monad.Primitive.PrimMonad base) =>
                     R.RenderSettings -> Document -> ConduitM a ByteString m ()

Text/XML/Unresolved.hs:132:1: Warning:
    Top-level binding with no type signature:
      renderText :: forall a (m :: * -> *) (base :: * -> *).
                    (MonadThrow m,
                     transformers-base-0.4.3:Control.Monad.Base.MonadBase base m,
                     primitive-0.5.2.1:Control.Monad.Primitive.PrimMonad base) =>
                    R.RenderSettings -> Document -> ConduitM a Text m ()

Text/XML.hs:112:1: Warning:
    The import of `Control.Monad.Trans.Resource' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Resource'
    To import instances alone, use: import Control.Monad.Trans.Resource()

Text/XML.hs:285:1: Warning:
    Top-level binding with no type signature:
      renderBytes :: forall a (m :: * -> *) (base :: * -> *).
                     (transformers-base-0.4.3:Control.Monad.Base.MonadBase base m,
                      primitive-0.5.2.1:Control.Monad.Primitive.PrimMonad base) =>
                     R.RenderSettings -> Document -> ConduitM a ByteString m ()

Network/TLS/ErrT.hs:25:1: Warning:
    Top-level binding with no type signature:
      runErrT :: forall e (m :: * -> *) a. ErrorT e m a -> m (Either e a)

Network/Wai/Application/Static.hs:213:13: Warning:
    Defined but not used: `filesize'

WaiAppStatic/CmdLine.hs:42:1: Warning:
    Top-level binding with no type signature:
      option' :: Mod OptionFields Int -> Parser Int

WaiAppStatic/CmdLine.hs:96:5: Warning:
    This binding for `args' shadows the existing binding
      defined at WaiAppStatic/CmdLine.hs:48:1

WaiAppStatic/CmdLine.hs:106:11: Warning:
    In the use of `settingsPort'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setPort instead"

WaiAppStatic/CmdLine.hs:107:11: Warning:
    In the use of `settingsHost'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setHost instead"

Database/Persist/Class/PersistQuery.hs:15:1: Warning:
    The import of `MonadIO'
    from module `Control.Monad.IO.Class' is redundant

Database/Persist/Class/PersistUnique.hs:11:1: Warning:
    The qualified import of `Prelude' is redundant
      except perhaps to import instances from `Prelude'
    To import instances alone, use: import Prelude()

Database/Persist/Sql/Types.hs:93:65: Warning:
    `SqlPersistT' is an instance of MonadPlus but not Alternative - this will become an error in GHC 7.10, under the Applicative-Monad Proposal.

Database/Persist/Sql/Internal.hs:14:1: Warning:
    The import of `Monoid' from module `Data.Monoid' is redundant

Database/Persist/Sql/Class.hs:271:11: Warning:
    In the use of `bitSize' (imported from Data.Bits):
    Deprecated: "Use 'bitSizeMaybe' or 'finiteBitSize' instead"

Database/Persist/Sql/Run.hs:40:25: Warning:
    This binding for `local' shadows the existing binding
      imported from `Control.Monad.Trans.Reader' at Database/Persist/Sql/Run.hs:7:1-33

Database/Persist/Sql/Orphan/PersistQuery.hs:238:1: Warning:
    Pattern match(es) are non-exhaustive
    In an equation for `updateFieldDef':
        Patterns not matched: BackendUpdate _

Database/Persist/Sql/Orphan/PersistQuery.hs:401:1: Warning:
    Pattern match(es) are non-exhaustive
    In an equation for `updatePersistValue':
        Patterns not matched: BackendUpdate _

Yesod/Core/Types.hs:69:1: Warning:
    Module `Prelude' does not export `catch'

Yesod/Core/Class/Handler.hs:16:1: Warning:
    The import of `MonadIO'
    from module `Control.Monad.IO.Class' is redundant

Yesod/Core/Class/Handler.hs:17:1: Warning:
    The import item `ExceptionT(..)' suggests that
    `ExceptionT' has (in-scope) constructors or class methods,
    but it has none

Yesod/Core/Class/Handler.hs:17:1: Warning:
    The import of `ExceptionT'
    from module `Control.Monad.Trans.Resource' is redundant

Yesod/Core/Internal/Request.hs:42:1: Warning:
    The import of `Control.Monad.IO.Class' is redundant
      except perhaps to import instances from `Control.Monad.IO.Class'
    To import instances alone, use: import Control.Monad.IO.Class()

Yesod/Core/Content.hs:250:17: Warning:
    In the use of `fromValue' (imported from Data.Aeson.Encode):
    Deprecated: "Use 'encodeToTextBuilder' instead"

Yesod/Core/Class/Yesod.hs:42:1: Warning:
    The import of `System.IO' is redundant
      except perhaps to import instances from `System.IO'
    To import instances alone, use: import System.IO()

Yesod/Core/Class/Yesod.hs:46:1: Warning:
    The qualified import of `GHC.IO.FD' is redundant
      except perhaps to import instances from `GHC.IO.FD'
    To import instances alone, use: import GHC.IO.FD()

Yesod/Core/Class/Yesod.hs:222:9: Warning:
    This binding for `loggerSet' shadows the existing binding
      imported from `Yesod.Core.Types' at Yesod/Core/Class/Yesod.hs:62:1-33
      (and originally defined at Yesod/Core/Types.hs:543:7-15)

Yesod/Core/Class/Yesod.hs:222:22: Warning:
    In the use of `newLoggerSet' (imported from System.Log.FastLogger):
    Deprecated: "Use newFileLoggerSet etc instead"

Yesod/Core/Json.hs:32:1: Warning:
    The import of `Control.Monad.Trans.Resource' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Resource'
    To import instances alone, use: import Control.Monad.Trans.Resource()

Yesod/Core/Internal/Response.hs:18:1: Warning:
    The import of `runResourceT, getInternalState, closeInternalState'
    from module `Control.Monad.Trans.Resource' is redundant

Yesod/Core/Internal/Response.hs:19:1: Warning:
    The import of `Control.Monad.Trans.Class' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Class'
    To import instances alone, use: import Control.Monad.Trans.Class()

Yesod/Core/Internal/Response.hs:21:1: Warning:
    The import of `Control.Exception' is redundant
      except perhaps to import instances from `Control.Exception'
    To import instances alone, use: import Control.Exception()

Yesod/Core/Internal/Response.hs:23:1: Warning:
    Module `Prelude' does not export `catch'

Yesod/Core/Internal/Response.hs:49:61: Warning:
    Defined but not used: `req'

Yesod/Core/Internal/Run.hs:13:1: Warning:
    The import of `bracketOnError'
    from module `Control.Exception' is redundant

Yesod/Core/Internal/Run.hs:40:1: Warning:
    Module `Prelude' does not export `catch'

Yesod/Core/Internal/Run.hs:52:1: Warning:
    The import of `NFData' from module `Control.DeepSeq' is redundant

Yesod/Core/Internal/Run.hs:53:1: Warning:
    The import of `Control.Monad' is redundant
      except perhaps to import instances from `Control.Monad'
    To import instances alone, use: import Control.Monad()

Yesod/Core/Internal/Run.hs:218:24: Warning:
    Fields of `Request' not initialised: requestHeaderRange
    In the expression:
      Request
        {requestMethod = "POST", httpVersion = H.http11,
         rawPathInfo = "/runFakeHandler/pathInfo", rawQueryString = "",
         requestHeaderHost = Nothing, requestHeaders = [], isSecure = False,
         remoteHost = error "runFakeHandler-remoteHost",
         pathInfo = ["runFakeHandler", "pathInfo"], queryString = [],
         requestBody = return mempty, vault = mempty,
         requestBodyLength = KnownLength 0}
    In an equation for `fakeWaiRequest':
        fakeWaiRequest
          = Request
              {requestMethod = "POST", httpVersion = H.http11,
               rawPathInfo = "/runFakeHandler/pathInfo", rawQueryString = "",
               requestHeaderHost = Nothing, requestHeaders = [], isSecure = False,
               remoteHost = error "runFakeHandler-remoteHost",
               pathInfo = ["runFakeHandler", "pathInfo"], queryString = [],
               requestBody = return mempty, vault = mempty,
               requestBodyLength = KnownLength 0}
    In the second argument of `($)', namely
      `do { ret <- I.newIORef
                     (Left $ InternalError "runFakeHandler: no result");
            let handler' = ...;
            let yapp = runHandler (...) handler'
                errHandler err req = ...
                ....;
            _ <- runResourceT $ yapp fakeRequest;
            .... }'

Yesod/Core/Internal/Run.hs:114:13: Warning:
    Pattern match(es) are non-exhaustive
    In a case alternative: Patterns not matched: YRWaiApp _

Yesod/Core/Dispatch.hs:45:1: Warning:
    The import of `pack' from module `Data.Text' is redundant

Yesod/Core/Dispatch.hs:48:1: Warning:
    The qualified import of `Data.ByteString.Char8' is redundant
      except perhaps to import instances from `Data.ByteString.Char8'
    To import instances alone, use: import Data.ByteString.Char8()

Yesod/Core/Dispatch.hs:69:1: Warning:
    The qualified import of `Paths_yesod_core' is redundant
      except perhaps to import instances from `Paths_yesod_core'
    To import instances alone, use: import Paths_yesod_core()

Yesod/Core/Dispatch.hs:70:1: Warning:
    The import of `Data.Version' is redundant
      except perhaps to import instances from `Data.Version'
    To import instances alone, use: import Data.Version()

Yesod/Core/Dispatch.hs:162:15: Warning:
    In the use of `Network.Wai.Handler.Warp.settingsPort'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setPort instead"

Yesod/Core/Dispatch.hs:172:15: Warning:
    In the use of `Network.Wai.Handler.Warp.settingsOnException'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setOnException instead"

Network/Connection.hs:85:1: Warning:
    Defined but not used: `connectionSessionManager'

Database/Persist/TH.hs:41:1: Warning:
    The qualified import of `Prelude' is redundant
      except perhaps to import instances from `Prelude'
    To import instances alone, use: import Prelude()

Database/Persist/TH.hs:304:1: Warning:
    Defined but not used: `readMay'

Database/Persist/TH.hs:310:1: Warning:
    Defined but not used: `entityUpdates'

Database/Persist/TH.hs:445:1: Warning:
    Defined but not used: `mkToUpdate'

Database/Persist/TH.hs:467:1: Warning:
    Defined but not used: `mkToFieldName'

Database/Persist/TH.hs:474:1: Warning:
    Defined but not used: `mkToValue'

Database/Persist/TH.hs:487:21: Warning: Defined but not used: `mps'

Yesod/EmbeddedStatic/Generators.hs:36:1: Warning:
    The import of `Control.Monad.Trans.Resource' is redundant
      except perhaps to import instances from `Control.Monad.Trans.Resource'
    To import instances alone, use: import Control.Monad.Trans.Resource()

Yesod/Static.hs:349:9: Warning: Defined but not used: pack'

Yesod/Static.hs:506:1: Warning: Defined but not used: `errorIntro'

Yesod/Persist/Core.hs:26:1: Warning:
    The import of `ReaderT'
    from module `Control.Monad.Trans.Reader' is redundant

Yesod/Form/Functions.hs:63:1: Warning:
    The import of `Text.Hamlet' is redundant
      except perhaps to import instances from `Text.Hamlet'
    To import instances alone, use: import Text.Hamlet()

Yesod/Form/Fields.hs:57:1: Warning:
    The import of `Text.Hamlet' is redundant
      except perhaps to import instances from `Text.Hamlet'
    To import instances alone, use: import Text.Hamlet()

Yesod/Form/Fields.hs:62:1: Warning:
    The import of `Text.Cassius' is redundant
      except perhaps to import instances from `Text.Cassius'
    To import instances alone, use: import Text.Cassius()

Yesod/Form/Fields.hs:94:1: Warning:
    The import of `runDB, YesodPersist'
    from module `Yesod.Persist' is redundant

Yesod/Form/Fields.hs:438:31: Warning: Defined but not used: `isReq'

Yesod/Form/Jquery.hs:20:1: Warning:
    The import of `Text.Hamlet' is redundant
      except perhaps to import instances from `Text.Hamlet'
    To import instances alone, use: import Text.Hamlet()

Yesod/Form/Jquery.hs:21:1: Warning:
    The import of `julius' from module `Text.Julius' is redundant

Yesod/Form/Nic.hs:15:1: Warning:
    The import of `Text.Hamlet' is redundant
      except perhaps to import instances from `Text.Hamlet'
    To import instances alone, use: import Text.Hamlet()

Yesod/Form/Nic.hs:16:1: Warning:
    The import of `julius' from module `Text.Julius' is redundant

Yesod/PasswordStore.hs:166:32: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Num b0)
        arising from the literal `32' at Yesod/PasswordStore.hs:166:32-33
      (Integral b0)
        arising from a use of `^' at Yesod/PasswordStore.hs:166:31
    In the second argument of `(^)', namely `32'
    In the first argument of `(-)', namely `2 ^ 32'
    In the first argument of `(*)', namely `(2 ^ 32 - 1)'

Yesod/PasswordStore.hs:419:1: Warning:
    Defined but not used: `toStrict'

Yesod/PasswordStore.hs:422:1: Warning:
    Defined but not used: `fromStrict'

Yesod/Auth.hs:348:18: Warning:
    This binding for `json' shadows the existing binding
      imported from `Data.Aeson' at Yesod/Auth.hs:50:1-17
      (and originally defined in `aeson-0.7.0.4:Data.Aeson.Parser.Internal')

Yesod/Auth/BrowserId.hs:19:1: Warning:
    The import of `Text.Hamlet' is redundant
      except perhaps to import instances from `Text.Hamlet'
    To import instances alone, use: import Text.Hamlet()

Yesod/Auth/BrowserId.hs:23:1: Warning:
    The import of `julius' from module `Text.Julius' is redundant

Yesod/Auth/Dummy.hs:12:1: Warning:
    The import of `Text.Hamlet' is redundant
      except perhaps to import instances from `Text.Hamlet'
    To import instances alone, use: import Text.Hamlet()

Yesod/Auth/Email.hs:39:1: Warning:
    The qualified import of `Data.Text.Lazy' is redundant
      except perhaps to import instances from `Data.Text.Lazy'
    To import instances alone, use: import Data.Text.Lazy()

Yesod/Auth/Email.hs:41:1: Warning:
    The qualified import of `Data.Text.Lazy.Encoding' is redundant
      except perhaps to import instances from `Data.Text.Lazy.Encoding'
    To import instances alone, use: import Data.Text.Lazy.Encoding()

Yesod/Auth/Email.hs:52:1: Warning:
    The import of `Control.Monad' is redundant
      except perhaps to import instances from `Control.Monad'
    To import instances alone, use: import Control.Monad()

Yesod/Auth/OpenId.hs:19:1: Warning:
    The import of `Text.Cassius' is redundant
      except perhaps to import instances from `Text.Cassius'
    To import instances alone, use: import Text.Cassius()

Yesod/Auth/Rpxnow.hs:14:1: Warning:
    The import of `Text.Hamlet' is redundant
      except perhaps to import instances from `Text.Hamlet'
    To import instances alone, use: import Text.Hamlet()

Yesod/Default/Config.hs:18:1: Warning:
    The import of `toLower' from module `Data.Char' is redundant

Yesod/Default/Main.hs:52:11: Warning:
    In the use of `settingsPort'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setPort instead"

Yesod/Default/Main.hs:53:11: Warning:
    In the use of `settingsHost'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setHost instead"

Yesod/Default/Main.hs:70:11: Warning:
    In the use of `settingsPort'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setPort instead"

Yesod/Default/Main.hs:71:11: Warning:
    In the use of `settingsHost'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setHost instead"

Yesod/Default/Main.hs:72:11: Warning:
    In the use of `settingsOnException'
    (imported from Network.Wai.Handler.Warp, but defined in warp-3.0.3:Network.Wai.Handler.Warp.Settings):
    Deprecated: "Use setOnException instead"

Importer/Internal.hs:5:1: Warning:
    The import of `Data.Maybe' is redundant
      except perhaps to import instances from `Data.Maybe'
    To import instances alone, use: import Data.Maybe()

Importer/Interpreter/LRI.hs:8:1: Warning:
    The qualified import of `Data.Map.Strict' is redundant
      except perhaps to import instances from `Data.Map.Strict'
    To import instances alone, use: import Data.Map.Strict()

Importer/Interpreter/LRI.hs:126:1: Warning:
    Defined but not used: `interpret'

Importer/Parser/LRI.hs:8:1: Warning:
    The import of `Debug.Trace' is redundant
      except perhaps to import instances from `Debug.Trace'
    To import instances alone, use: import Debug.Trace()

Importer/Parser/LRI.hs:9:1: Warning:
    The qualified import of `Data.List' is redundant
      except perhaps to import instances from `Data.List'
    To import instances alone, use: import Data.List()

Importer/Parser/LRI.hs:24:19: Warning:
    This binding for `ls' shadows the existing binding
      bound at Importer/Parser/LRI.hs:18:12

Importer/Parser/LRI.hs:24:23: Warning: Defined but not used: `s'

Importer/Parser/LRI.hs:31:9: Warning: Defined but not used: `p'

Importer/Parser/LRI.hs:31:25: Warning: Defined but not used: `c'

Importer/Parser/LRI.hs:47:23: Warning:
    This binding for `ls' shadows the existing binding
      bound at Importer/Parser/LRI.hs:18:12

Importer/Parser/LRI.hs:66:22: Warning:
    This binding for `ls' shadows the existing binding
      bound at Importer/Parser/LRI.hs:18:12

Importer/Parser/LRI.hs:67:20: Warning:
    This binding for `ls' shadows the existing binding
      bound at Importer/Parser/LRI.hs:18:12

Importer/Parser/LRI.hs:67:20: Warning: Defined but not used: `ls'

Importer/Parser/LRI.hs:73:19: Warning: Defined but not used: `s'

Importer/Parser/LRI.hs:73:22: Warning:
    This binding for `l' shadows the existing binding
      bound at Importer/Parser/LRI.hs:67:18

Importer/Parser/LRI.hs:74:22: Warning:
    This binding for `l' shadows the existing binding
      bound at Importer/Parser/LRI.hs:67:18

Importer/Parser/LRI.hs:74:24: Warning:
    This binding for `ls' shadows the existing binding
      bound at Importer/Parser/LRI.hs:67:20

Importer/Parser/LRI.hs:48:7: Warning:
    Pattern match(es) are non-exhaustive
    In a case alternative:
        Patterns not matched:
            []
            [_]
            _ : (#x : _) with #x `notElem` ["="##]

Importer/Parser/LRI.hs:73:9: Warning:
    Pattern match(es) are non-exhaustive
    In an equation for getValue': Patterns not matched: _ []

Presenter/Model/Query.hs:3:1: Warning:
    The import of `Yesod' is redundant
      except perhaps to import instances from `Yesod'
    To import instances alone, use: import Yesod()

Presenter/Model/Complexity.hs:23:1: Warning:
    Top-level binding with no type signature: b1 :: Bounds

Presenter/Model/Complexity.hs:24:1: Warning:
    Top-level binding with no type signature: b2 :: Bounds

Presenter/Model/Complexity.hs:25:1: Warning:
    Top-level binding with no type signature: b3 :: Bounds

Presenter/Model/Complexity.hs:26:1: Warning:
    Top-level binding with no type signature: b4 :: Bounds

Presenter/Model/Complexity.hs:27:1: Warning:
    Top-level binding with no type signature: b5 :: Bounds

Presenter/Model/Complexity.hs:28:1: Warning:
    Top-level binding with no type signature: b6 :: Bounds

Presenter/Model/Complexity.hs:79:14: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- string s'
    or by using the flag -fno-warn-unused-do-bind

Presenter/Model/RouteTypes.hs:6:1: Warning:
    The qualified import of `Data.Text.Read' is redundant
      except perhaps to import instances from `Data.Text.Read'
    To import instances alone, use: import Data.Text.Read()

Presenter/Model/RouteTypes.hs:9:1: Warning:
    The import of `Presenter.Internal.Stringish' is redundant
      except perhaps to import instances from `Presenter.Internal.Stringish'
    To import instances alone, use: import Presenter.Internal.Stringish()

Presenter/Model/RouteTypes.hs:180:10: Warning:
    Orphan instance: instance PathPiece Query
Presenter/Model/Competition.hs:1:1: Splicing declarations
    derivePersistField "MetaCategory"
  ======>
    Presenter/Model/Competition.hs:31:1-33
    instance PersistField MetaCategory where
      toPersistValue = (PersistText . (T.pack . show))
      fromPersistValue
        = \ dt_a1j3c v_a1j3d
            -> case fromPersistValue v_a1j3d of {
                 Data.Either.Left e_a1j3e -> Data.Either.Left e_a1j3e
                 Data.Either.Right s'_a1j3f
                   -> case (reads $ (T.unpack s'_a1j3f)) of {
                        ((x_a1j3g, _) ghc-prim:GHC.Types.: _) -> Data.Either.Right x_a1j3g
                        ghc-prim:GHC.Types.[]
                          -> (Data.Either.Left
                              $ ((T.pack "Invalid ")
                                 Database.Persist.TH.++
                                   ((T.pack dt_a1j3c)
                                    Database.Persist.TH.++
                                      ((T.pack ": ") Database.Persist.TH.++ s'_a1j3f)))) } }
            "MetaCategory"
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql MetaCategory where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
Presenter/Model/Competition.hs:1:1: Splicing declarations
    derivePersistField "Competition"
  ======>
    Presenter/Model/Competition.hs:42:1-32
    instance PersistField Competition where
      toPersistValue = (PersistText . (T.pack . show))
      fromPersistValue
        = \ dt_a1jdF v_a1jdG
            -> case fromPersistValue v_a1jdG of {
                 Data.Either.Left e_a1jdH -> Data.Either.Left e_a1jdH
                 Data.Either.Right s'_a1jdI
                   -> case (reads $ (T.unpack s'_a1jdI)) of {
                        ((x_a1jdJ, _) ghc-prim:GHC.Types.: _) -> Data.Either.Right x_a1jdJ
                        ghc-prim:GHC.Types.[]
                          -> (Data.Either.Left
                              $ ((T.pack "Invalid ")
                                 Database.Persist.TH.++
                                   ((T.pack dt_a1jdF)
                                    Database.Persist.TH.++
                                      ((T.pack ": ") Database.Persist.TH.++ s'_a1jdI)))) } }
            "Competition"
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql Competition where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
Presenter/Model/StarExec.hs:1:1: Splicing declarations
    derivePersistField "JobStatus"
  ======>
    Presenter/Model/StarExec.hs:16:1-30
    instance PersistField JobStatus where
      toPersistValue = (PersistText . (T.pack . show))
      fromPersistValue
        = \ dt_a1wgP v_a1wgQ
            -> case fromPersistValue v_a1wgQ of {
                 Left e_a1wgR -> Left e_a1wgR
                 Right s'_a1wgS
                   -> case (reads $ (T.unpack s'_a1wgS)) of {
                        ((x_a1wgT, _) ghc-prim:GHC.Types.: _) -> Right x_a1wgT
                        ghc-prim:GHC.Types.[]
                          -> (Left
                              $ ((T.pack "Invalid ")
                                 Database.Persist.TH.++
                                   ((T.pack dt_a1wgP)
                                    Database.Persist.TH.++
                                      ((T.pack ": ") Database.Persist.TH.++ s'_a1wgS)))) } }
            "JobStatus"
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql JobStatus where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
Presenter/Model/StarExec.hs:1:1: Splicing declarations
    derivePersistField "SolverResult"
  ======>
    Presenter/Model/StarExec.hs:30:1-33
    instance PersistField SolverResult where
      toPersistValue = (PersistText . (T.pack . show))
      fromPersistValue
        = \ dt_a1wm0 v_a1wm1
            -> case fromPersistValue v_a1wm1 of {
                 Left e_a1wm2 -> Left e_a1wm2
                 Right s'_a1wm3
                   -> case (reads $ (T.unpack s'_a1wm3)) of {
                        ((x_a1wm4, _) ghc-prim:GHC.Types.: _) -> Right x_a1wm4
                        ghc-prim:GHC.Types.[]
                          -> (Left
                              $ ((T.pack "Invalid ")
                                 Database.Persist.TH.++
                                   ((T.pack dt_a1wm0)
                                    Database.Persist.TH.++
                                      ((T.pack ": ") Database.Persist.TH.++ s'_a1wm3)))) } }
            "SolverResult"
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql SolverResult where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
Presenter/Model/StarExec.hs:1:1: Splicing declarations
    derivePersistField "JobResultStatus"
  ======>
    Presenter/Model/StarExec.hs:39:1-36
    instance PersistField JobResultStatus where
      toPersistValue = (PersistText . (T.pack . show))
      fromPersistValue
        = \ dt_a1woS v_a1woT
            -> case fromPersistValue v_a1woT of {
                 Left e_a1woU -> Left e_a1woU
                 Right s'_a1woV
                   -> case (reads $ (T.unpack s'_a1woV)) of {
                        ((x_a1woW, _) ghc-prim:GHC.Types.: _) -> Right x_a1woW
                        ghc-prim:GHC.Types.[]
                          -> (Left
                              $ ((T.pack "Invalid ")
                                 Database.Persist.TH.++
                                   ((T.pack dt_a1woS)
                                    Database.Persist.TH.++
                                      ((T.pack ": ") Database.Persist.TH.++ s'_a1woV)))) } }
            "JobResultStatus"
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql JobResultStatus where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
Presenter/Model/StarExec.hs:1:1: Splicing declarations
    derivePersistField "SEQuery"
  ======>
    Presenter/Model/StarExec.hs:107:1-28
    instance PersistField SEQuery where
      toPersistValue = (PersistText . (T.pack . show))
      fromPersistValue
        = \ dt_a1wGg v_a1wGh
            -> case fromPersistValue v_a1wGh of {
                 Left e_a1wGi -> Left e_a1wGi
                 Right s'_a1wGj
                   -> case (reads $ (T.unpack s'_a1wGj)) of {
                        ((x_a1wGk, _) ghc-prim:GHC.Types.: _) -> Right x_a1wGk
                        ghc-prim:GHC.Types.[]
                          -> (Left
                              $ ((T.pack "Invalid ")
                                 Database.Persist.TH.++
                                   ((T.pack dt_a1wGg)
                                    Database.Persist.TH.++
                                      ((T.pack ": ") Database.Persist.TH.++ s'_a1wGj)))) } }
            "SEQuery"
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql SEQuery where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
Presenter/Auth.hs:(42,18)-(50,2): Splicing expression
    "\n\
    \$newline never\n\
    \<form method=\"post\" action=\"@{authToMaster url}\">\n\
    \    <p>prove that you are the person who started this instance of star-exec-presenter: \n\
    \    <p>\n\
    \        <input type=\"text\" name=\"ident\">\n\
    \        <input type=\"password\" name=\"pass\">\n\
    \        <input type=\"submit\" value=\"prove\">"
  ======>
    \ _render_a1X5D
      -> do { id
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<form method=\"post\" action=\"");
              id
                (toHtml
                   (\ u_a1X5E -> _render_a1X5D u_a1X5E [] (authToMaster url)));
              id
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "\"><p>prove that you are the person who started this instance of star-exec-presenter: </p><p><input type=\"text\" name=\"ident\"><input type=\"password\" name=\"pass\"><input type=\"submit\" value=\"prove\"></p></form>") }

Presenter/Auth.hs:12:1: Warning:
    The import of `Text.Hamlet' is redundant
      except perhaps to import instances from `Text.Hamlet'
    To import instances alone, use: import Text.Hamlet()
Model.hs:23:7-55: Splicing expression
    persistFileWith lowerCaseSettings "config/models"
  ======>
    [EntityDef
       (HaskellName (packPTH "User"))
       (DBName (packPTH "user"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "ident"))
          (DBName (packPTH "ident"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "password"))
          (DBName (packPTH "password"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          [packPTH "Maybe"]
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueUser"))
          (DBName (packPTH "unique_user"))
          [(HaskellName (packPTH "ident"), DBName (packPTH "ident"))]
          []]
       []
       [packPTH "Typeable"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "StarExecSessionData"))
       (DBName (packPTH "star_exec_session_data"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "key"))
          (DBName (packPTH "key"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "cookies"))
          (DBName (packPTH "cookies"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "date"))
          (DBName (packPTH "date"))
          (FTTypeCon Nothing (packPTH "UTCTime"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe UTCTime))
          []
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueStarExecSessionData"))
          (DBName (packPTH "unique_star_exec_session_data"))
          [(HaskellName (packPTH "key"), DBName (packPTH "key"))]
          []]
       []
       []
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "JobResultInfo"))
       (DBName (packPTH "job_result_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "jobId"))
          (DBName (packPTH "job_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "score"))
          (DBName (packPTH "score"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          [packPTH "Maybe"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "pairId"))
          (DBName (packPTH "pair_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "benchmark"))
          (DBName (packPTH "benchmark"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "benchmarkId"))
          (DBName (packPTH "benchmark_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "solver"))
          (DBName (packPTH "solver"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "solverId"))
          (DBName (packPTH "solver_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "configuration"))
          (DBName (packPTH "configuration"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "configurationId"))
          (DBName (packPTH "configuration_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "status"))
          (DBName (packPTH "status"))
          (FTTypeCon Nothing (packPTH "JobResultStatus"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe JobResultStatus))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "cpuTime"))
          (DBName (packPTH "cpu_time"))
          (FTTypeCon Nothing (packPTH "Double"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Double))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "wallclockTime"))
          (DBName (packPTH "wallclock_time"))
          (FTTypeCon Nothing (packPTH "Double"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Double))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "result"))
          (DBName (packPTH "result"))
          (FTTypeCon Nothing (packPTH "SolverResult"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe SolverResult))
          []
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueJobResultInfo"))
          (DBName (packPTH "unique_job_result_info"))
          [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "LriResultInfo"))
       (DBName (packPTH "lri_result_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "jobId"))
          (DBName (packPTH "job_id"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "score"))
          (DBName (packPTH "score"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          [packPTH "Maybe"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "pairId"))
          (DBName (packPTH "pair_id"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "benchmarkId"))
          (DBName (packPTH "benchmark_id"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "solverId"))
          (DBName (packPTH "solver_id"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "result"))
          (DBName (packPTH "result"))
          (FTTypeCon Nothing (packPTH "SolverResult"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe SolverResult))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "cpuTime"))
          (DBName (packPTH "cpu_time"))
          (FTTypeCon Nothing (packPTH "Double"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Double))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "wallclockTime"))
          (DBName (packPTH "wallclock_time"))
          (FTTypeCon Nothing (packPTH "Double"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Double))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "checkResult"))
          (DBName (packPTH "check_result"))
          (FTTypeCon Nothing (packPTH "SolverResult"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe SolverResult))
          [packPTH "Maybe"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "checkCpuTime"))
          (DBName (packPTH "check_cpu_time"))
          (FTTypeCon Nothing (packPTH "Double"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Double))
          [packPTH "Maybe"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "checkWallclockTime"))
          (DBName (packPTH "check_wallclock_time"))
          (FTTypeCon Nothing (packPTH "Double"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Double))
          [packPTH "Maybe"]
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueLriResultInfo"))
          (DBName (packPTH "unique_lri_result_info"))
          [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "JobPairInfo"))
       (DBName (packPTH "job_pair_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "pairId"))
          (DBName (packPTH "pair_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "stdout"))
          (DBName (packPTH "stdout"))
          (FTTypeCon Nothing (packPTH "ByteString"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe ByteString))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "log"))
          (DBName (packPTH "log"))
          (FTTypeCon Nothing (packPTH "ByteString"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe ByteString))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "htmlProof"))
          (DBName (packPTH "html_proof"))
          (FTTypeCon Nothing (packPTH "ByteString"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe ByteString))
          [packPTH "Maybe"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "resultStatus"))
          (DBName (packPTH "result_status"))
          (FTTypeCon Nothing (packPTH "JobResultStatus"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe JobResultStatus))
          [packPTH "default='JobResultUndetermined'"]
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueJobPairInfo"))
          (DBName (packPTH "unique_job_pair_info"))
          [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "JobInfo"))
       (DBName (packPTH "job_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "starExecId"))
          (DBName (packPTH "star_exec_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "name"))
          (DBName (packPTH "name"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "status"))
          (DBName (packPTH "status"))
          (FTTypeCon Nothing (packPTH "JobStatus"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe JobStatus))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "date"))
          (DBName (packPTH "date"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "preProc"))
          (DBName (packPTH "pre_proc"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          [packPTH "default='unknown'"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "postProc"))
          (DBName (packPTH "post_proc"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          [packPTH "default='unknown'"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isComplexity"))
          (DBName (packPTH "is_complexity"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          [packPTH "default=FALSE"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isPublic"))
          (DBName (packPTH "is_public"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          [packPTH "default=TRUE"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "startDate"))
          (DBName (packPTH "start_date"))
          (FTTypeCon Nothing (packPTH "UTCTime"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe UTCTime))
          [packPTH "default=now()"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "finishDate"))
          (DBName (packPTH "finish_date"))
          (FTTypeCon Nothing (packPTH "UTCTime"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe UTCTime))
          [packPTH "Maybe"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "lastUpdate"))
          (DBName (packPTH "last_update"))
          (FTTypeCon Nothing (packPTH "UTCTime"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe UTCTime))
          [packPTH "default=now()"]
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueJobInfo"))
          (DBName (packPTH "unique_job_info"))
          [(HaskellName (packPTH "starExecId"), 
            DBName (packPTH "star_exec_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "LriJobInfo"))
       (DBName (packPTH "lri_job_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "jobId"))
          (DBName (packPTH "job_id"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "name"))
          (DBName (packPTH "name"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueLriJobInfo"))
          (DBName (packPTH "unique_lri_job_info"))
          [(HaskellName (packPTH "jobId"), DBName (packPTH "job_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "SolverInfo"))
       (DBName (packPTH "solver_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "starExecId"))
          (DBName (packPTH "star_exec_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "name"))
          (DBName (packPTH "name"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "description"))
          (DBName (packPTH "description"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "lastUpdate"))
          (DBName (packPTH "last_update"))
          (FTTypeCon Nothing (packPTH "UTCTime"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe UTCTime))
          [packPTH "default=now()"]
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueSolverInfo"))
          (DBName (packPTH "unique_solver_info"))
          [(HaskellName (packPTH "starExecId"), 
            DBName (packPTH "star_exec_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "LriSolverInfo"))
       (DBName (packPTH "lri_solver_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "solverId"))
          (DBName (packPTH "solver_id"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "name"))
          (DBName (packPTH "name"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "author"))
          (DBName (packPTH "author"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "description"))
          (DBName (packPTH "description"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "url"))
          (DBName (packPTH "url"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isStandard"))
          (DBName (packPTH "is_standard"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isRelative"))
          (DBName (packPTH "is_relative"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isConditional"))
          (DBName (packPTH "is_conditional"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isContextSensitive"))
          (DBName (packPTH "is_context_sensitive"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isInnermost"))
          (DBName (packPTH "is_innermost"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isTheory"))
          (DBName (packPTH "is_theory"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isCertifying"))
          (DBName (packPTH "is_certifying"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueLriSolverInfo"))
          (DBName (packPTH "unique_lri_solver_info"))
          [(HaskellName (packPTH "solverId"), DBName (packPTH "solver_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "BenchmarkInfo"))
       (DBName (packPTH "benchmark_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "starExecId"))
          (DBName (packPTH "star_exec_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "name"))
          (DBName (packPTH "name"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "type"))
          (DBName (packPTH "type"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "lastUpdate"))
          (DBName (packPTH "last_update"))
          (FTTypeCon Nothing (packPTH "UTCTime"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe UTCTime))
          [packPTH "default=now()"]
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueBenchmarkInfo"))
          (DBName (packPTH "unique_benchmark_info"))
          [(HaskellName (packPTH "starExecId"), 
            DBName (packPTH "star_exec_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "LriBenchmarkInfo"))
       (DBName (packPTH "lri_benchmark_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "benchmarkId"))
          (DBName (packPTH "benchmark_id"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "name"))
          (DBName (packPTH "name"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "file"))
          (DBName (packPTH "file"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "rating"))
          (DBName (packPTH "rating"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "solved"))
          (DBName (packPTH "solved"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isConditional"))
          (DBName (packPTH "is_conditional"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isContextSensitive"))
          (DBName (packPTH "is_context_sensitive"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isInnermost"))
          (DBName (packPTH "is_innermost"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isOutermost"))
          (DBName (packPTH "is_outermost"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isRelative"))
          (DBName (packPTH "is_relative"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "isTheory"))
          (DBName (packPTH "is_theory"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          []
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueLriBenchmarkInfo"))
          (DBName (packPTH "unique_lri_benchmark_info"))
          [(HaskellName (packPTH "benchmarkId"), 
            DBName (packPTH "benchmark_id"))]
          []]
       []
       [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "QueryInfo"))
       (DBName (packPTH "query_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "query"))
          (DBName (packPTH "query"))
          (FTTypeCon Nothing (packPTH "SEQuery"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe SEQuery))
          []
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniqueQueryInfo"))
          (DBName (packPTH "unique_query_info"))
          [(HaskellName (packPTH "query"), DBName (packPTH "query"))]
          []]
       []
       [packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "CompetitionInfo"))
       (DBName (packPTH "competition_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "competition"))
          (DBName (packPTH "competition"))
          (FTTypeCon Nothing (packPTH "Competition"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Competition))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "date"))
          (DBName (packPTH "date"))
          (FTTypeCon Nothing (packPTH "UTCTime"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe UTCTime))
          [packPTH "default=now()"]
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "public"))
          (DBName (packPTH "public"))
          (FTTypeCon Nothing (packPTH "Bool"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Bool))
          [packPTH "default=True"]
          True
          Nothing]
       Nothing
       []
       []
       [packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False,
     EntityDef
       (HaskellName (packPTH "PostProcInfo"))
       (DBName (packPTH "post_proc_info"))
       (DBName (packPTH "id"))
       []
       [FieldDef
          (HaskellName (packPTH "starExecId"))
          (DBName (packPTH "star_exec_id"))
          (FTTypeCon Nothing (packPTH "Int"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Int))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "name"))
          (DBName (packPTH "name"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "description"))
          (DBName (packPTH "description"))
          (FTTypeCon Nothing (packPTH "Text"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe Text))
          []
          True
          Nothing,
        FieldDef
          (HaskellName (packPTH "lastUpdate"))
          (DBName (packPTH "last_update"))
          (FTTypeCon Nothing (packPTH "UTCTime"))
          (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
             (Nothing :: Maybe UTCTime))
          [packPTH "default=now()"]
          True
          Nothing]
       Nothing
       [UniqueDef
          (HaskellName (packPTH "UniquePostProcInfo"))
          (DBName (packPTH "unique_post_proc_info"))
          [(HaskellName (packPTH "starExecId"), 
            DBName (packPTH "star_exec_id"))]
          []]
       []
       [packPTH "Show"]
       (containers-0.5.5.1:Data.Map.Base.fromList [])
       False]
Model.hs:1:1: Splicing declarations
    share
      [mkPersist sqlOnlySettings, mkMigrate "migrateAll"]
      [EntityDef
         (HaskellName (packPTH "User"))
         (DBName (packPTH "user"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "ident"))
            (DBName (packPTH "ident"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "password"))
            (DBName (packPTH "password"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            [packPTH "Maybe"]
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueUser"))
            (DBName (packPTH "unique_user"))
            [(HaskellName (packPTH "ident"), DBName (packPTH "ident"))]
            []]
         []
         [packPTH "Typeable"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "StarExecSessionData"))
         (DBName (packPTH "star_exec_session_data"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "key"))
            (DBName (packPTH "key"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "cookies"))
            (DBName (packPTH "cookies"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "date"))
            (DBName (packPTH "date"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe UTCTime))
            []
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueStarExecSessionData"))
            (DBName (packPTH "unique_star_exec_session_data"))
            [(HaskellName (packPTH "key"), DBName (packPTH "key"))]
            []]
         []
         []
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "JobResultInfo"))
         (DBName (packPTH "job_result_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "jobId"))
            (DBName (packPTH "job_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "score"))
            (DBName (packPTH "score"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            [packPTH "Maybe"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "pairId"))
            (DBName (packPTH "pair_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "benchmark"))
            (DBName (packPTH "benchmark"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "benchmarkId"))
            (DBName (packPTH "benchmark_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "solver"))
            (DBName (packPTH "solver"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "solverId"))
            (DBName (packPTH "solver_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "configuration"))
            (DBName (packPTH "configuration"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "configurationId"))
            (DBName (packPTH "configuration_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "status"))
            (DBName (packPTH "status"))
            (FTTypeCon Nothing (packPTH "JobResultStatus"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe JobResultStatus))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "cpuTime"))
            (DBName (packPTH "cpu_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Double))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "wallclockTime"))
            (DBName (packPTH "wallclock_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Double))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "result"))
            (DBName (packPTH "result"))
            (FTTypeCon Nothing (packPTH "SolverResult"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe SolverResult))
            []
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueJobResultInfo"))
            (DBName (packPTH "unique_job_result_info"))
            [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "LriResultInfo"))
         (DBName (packPTH "lri_result_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "jobId"))
            (DBName (packPTH "job_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "score"))
            (DBName (packPTH "score"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            [packPTH "Maybe"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "pairId"))
            (DBName (packPTH "pair_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "benchmarkId"))
            (DBName (packPTH "benchmark_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "solverId"))
            (DBName (packPTH "solver_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "result"))
            (DBName (packPTH "result"))
            (FTTypeCon Nothing (packPTH "SolverResult"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe SolverResult))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "cpuTime"))
            (DBName (packPTH "cpu_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Double))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "wallclockTime"))
            (DBName (packPTH "wallclock_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Double))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "checkResult"))
            (DBName (packPTH "check_result"))
            (FTTypeCon Nothing (packPTH "SolverResult"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe SolverResult))
            [packPTH "Maybe"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "checkCpuTime"))
            (DBName (packPTH "check_cpu_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Double))
            [packPTH "Maybe"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "checkWallclockTime"))
            (DBName (packPTH "check_wallclock_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Double))
            [packPTH "Maybe"]
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueLriResultInfo"))
            (DBName (packPTH "unique_lri_result_info"))
            [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "JobPairInfo"))
         (DBName (packPTH "job_pair_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "pairId"))
            (DBName (packPTH "pair_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "stdout"))
            (DBName (packPTH "stdout"))
            (FTTypeCon Nothing (packPTH "ByteString"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe ByteString))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "log"))
            (DBName (packPTH "log"))
            (FTTypeCon Nothing (packPTH "ByteString"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe ByteString))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "htmlProof"))
            (DBName (packPTH "html_proof"))
            (FTTypeCon Nothing (packPTH "ByteString"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe ByteString))
            [packPTH "Maybe"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "resultStatus"))
            (DBName (packPTH "result_status"))
            (FTTypeCon Nothing (packPTH "JobResultStatus"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe JobResultStatus))
            [packPTH "default='JobResultUndetermined'"]
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueJobPairInfo"))
            (DBName (packPTH "unique_job_pair_info"))
            [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "JobInfo"))
         (DBName (packPTH "job_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "starExecId"))
            (DBName (packPTH "star_exec_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "status"))
            (DBName (packPTH "status"))
            (FTTypeCon Nothing (packPTH "JobStatus"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe JobStatus))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "date"))
            (DBName (packPTH "date"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "preProc"))
            (DBName (packPTH "pre_proc"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            [packPTH "default='unknown'"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "postProc"))
            (DBName (packPTH "post_proc"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            [packPTH "default='unknown'"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isComplexity"))
            (DBName (packPTH "is_complexity"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            [packPTH "default=FALSE"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isPublic"))
            (DBName (packPTH "is_public"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            [packPTH "default=TRUE"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "startDate"))
            (DBName (packPTH "start_date"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe UTCTime))
            [packPTH "default=now()"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "finishDate"))
            (DBName (packPTH "finish_date"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe UTCTime))
            [packPTH "Maybe"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "lastUpdate"))
            (DBName (packPTH "last_update"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe UTCTime))
            [packPTH "default=now()"]
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueJobInfo"))
            (DBName (packPTH "unique_job_info"))
            [(HaskellName (packPTH "starExecId"), 
              DBName (packPTH "star_exec_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "LriJobInfo"))
         (DBName (packPTH "lri_job_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "jobId"))
            (DBName (packPTH "job_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueLriJobInfo"))
            (DBName (packPTH "unique_lri_job_info"))
            [(HaskellName (packPTH "jobId"), DBName (packPTH "job_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "SolverInfo"))
         (DBName (packPTH "solver_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "starExecId"))
            (DBName (packPTH "star_exec_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "description"))
            (DBName (packPTH "description"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "lastUpdate"))
            (DBName (packPTH "last_update"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe UTCTime))
            [packPTH "default=now()"]
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueSolverInfo"))
            (DBName (packPTH "unique_solver_info"))
            [(HaskellName (packPTH "starExecId"), 
              DBName (packPTH "star_exec_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "LriSolverInfo"))
         (DBName (packPTH "lri_solver_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "solverId"))
            (DBName (packPTH "solver_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "author"))
            (DBName (packPTH "author"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "description"))
            (DBName (packPTH "description"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "url"))
            (DBName (packPTH "url"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isStandard"))
            (DBName (packPTH "is_standard"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isRelative"))
            (DBName (packPTH "is_relative"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isConditional"))
            (DBName (packPTH "is_conditional"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isContextSensitive"))
            (DBName (packPTH "is_context_sensitive"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isInnermost"))
            (DBName (packPTH "is_innermost"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isTheory"))
            (DBName (packPTH "is_theory"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isCertifying"))
            (DBName (packPTH "is_certifying"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueLriSolverInfo"))
            (DBName (packPTH "unique_lri_solver_info"))
            [(HaskellName (packPTH "solverId"), DBName (packPTH "solver_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "BenchmarkInfo"))
         (DBName (packPTH "benchmark_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "starExecId"))
            (DBName (packPTH "star_exec_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "type"))
            (DBName (packPTH "type"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "lastUpdate"))
            (DBName (packPTH "last_update"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe UTCTime))
            [packPTH "default=now()"]
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueBenchmarkInfo"))
            (DBName (packPTH "unique_benchmark_info"))
            [(HaskellName (packPTH "starExecId"), 
              DBName (packPTH "star_exec_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "LriBenchmarkInfo"))
         (DBName (packPTH "lri_benchmark_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "benchmarkId"))
            (DBName (packPTH "benchmark_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "file"))
            (DBName (packPTH "file"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "rating"))
            (DBName (packPTH "rating"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "solved"))
            (DBName (packPTH "solved"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isConditional"))
            (DBName (packPTH "is_conditional"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isContextSensitive"))
            (DBName (packPTH "is_context_sensitive"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isInnermost"))
            (DBName (packPTH "is_innermost"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isOutermost"))
            (DBName (packPTH "is_outermost"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isRelative"))
            (DBName (packPTH "is_relative"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "isTheory"))
            (DBName (packPTH "is_theory"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            []
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueLriBenchmarkInfo"))
            (DBName (packPTH "unique_lri_benchmark_info"))
            [(HaskellName (packPTH "benchmarkId"), 
              DBName (packPTH "benchmark_id"))]
            []]
         []
         [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "QueryInfo"))
         (DBName (packPTH "query_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "query"))
            (DBName (packPTH "query"))
            (FTTypeCon Nothing (packPTH "SEQuery"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe SEQuery))
            []
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniqueQueryInfo"))
            (DBName (packPTH "unique_query_info"))
            [(HaskellName (packPTH "query"), DBName (packPTH "query"))]
            []]
         []
         [packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "CompetitionInfo"))
         (DBName (packPTH "competition_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "competition"))
            (DBName (packPTH "competition"))
            (FTTypeCon Nothing (packPTH "Competition"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Competition))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "date"))
            (DBName (packPTH "date"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe UTCTime))
            [packPTH "default=now()"]
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "public"))
            (DBName (packPTH "public"))
            (FTTypeCon Nothing (packPTH "Bool"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Bool))
            [packPTH "default=True"]
            True
            Nothing]
         Nothing
         []
         []
         [packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False,
       EntityDef
         (HaskellName (packPTH "PostProcInfo"))
         (DBName (packPTH "post_proc_info"))
         (DBName (packPTH "id"))
         []
         [FieldDef
            (HaskellName (packPTH "starExecId"))
            (DBName (packPTH "star_exec_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Int))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "description"))
            (DBName (packPTH "description"))
            (FTTypeCon Nothing (packPTH "Text"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe Text))
            []
            True
            Nothing,
          FieldDef
            (HaskellName (packPTH "lastUpdate"))
            (DBName (packPTH "last_update"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            (persistent-1.3.3:Database.Persist.Sql.Class.sqlType
               (Nothing :: Maybe UTCTime))
            [packPTH "default=now()"]
            True
            Nothing]
         Nothing
         [UniqueDef
            (HaskellName (packPTH "UniquePostProcInfo"))
            (DBName (packPTH "unique_post_proc_info"))
            [(HaskellName (packPTH "starExecId"), 
              DBName (packPTH "star_exec_id"))]
            []]
         []
         [packPTH "Show"]
         (containers-0.5.5.1:Data.Map.Base.fromList [])
         False]
  ======>
    Model.hs:(22,1)-(23,56)
    instance PersistField User where
      toPersistValue
        = \ ent_a23ML
            -> (PersistMap
                $ (zip
                     (map Data.Text.pack ["ident", "password"])
                     ((map toPersistValue) $ (toPersistFields ent_a23ML))))
      fromPersistValue
        = ((\ x_a23MM
              -> let
                   columns_a23MN
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23MM
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23MO
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23MO) columns_a23MN
                                of {
                                  Just v_a23MP -> v_a23MP
                                  Nothing -> PersistNull }))
                       $ ["ident", "password"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql User where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField StarExecSessionData where
      toPersistValue
        = \ ent_a23MQ
            -> (PersistMap
                $ (zip
                     (map Data.Text.pack ["key", "cookies", "date"])
                     ((map toPersistValue) $ (toPersistFields ent_a23MQ))))
      fromPersistValue
        = ((\ x_a23MR
              -> let
                   columns_a23MS
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23MR
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23MT
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23MT) columns_a23MS
                                of {
                                  Just v_a23MU -> v_a23MU
                                  Nothing -> PersistNull }))
                       $ ["key", "cookies", "date"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql StarExecSessionData where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField JobResultInfo where
      toPersistValue
        = \ ent_a23MV
            -> (PersistMap
                $ (zip
                     (map
                        Data.Text.pack
                        ["jobId", "score", "pairId", "benchmark", "benchmarkId", "solver",
                         "solverId", "configuration", "configurationId", "status",
                         "cpuTime", "wallclockTime", "result"])
                     ((map toPersistValue) $ (toPersistFields ent_a23MV))))
      fromPersistValue
        = ((\ x_a23MW
              -> let
                   columns_a23MX
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23MW
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23MY
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23MY) columns_a23MX
                                of {
                                  Just v_a23MZ -> v_a23MZ
                                  Nothing -> PersistNull }))
                       $ ["jobId", "score", "pairId", "benchmark", "benchmarkId",
                          "solver", "solverId", "configuration", "configurationId", "status",
                          "cpuTime", "wallclockTime", "result"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql JobResultInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField LriResultInfo where
      toPersistValue
        = \ ent_a23N0
            -> (PersistMap
                $ (zip
                     (map
                        Data.Text.pack
                        ["jobId", "score", "pairId", "benchmarkId", "solverId", "result",
                         "cpuTime", "wallclockTime", "checkResult", "checkCpuTime",
                         "checkWallclockTime"])
                     ((map toPersistValue) $ (toPersistFields ent_a23N0))))
      fromPersistValue
        = ((\ x_a23N1
              -> let
                   columns_a23N2
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23N1
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23N3
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23N3) columns_a23N2
                                of {
                                  Just v_a23N4 -> v_a23N4
                                  Nothing -> PersistNull }))
                       $ ["jobId", "score", "pairId", "benchmarkId", "solverId", "result",
                          "cpuTime", "wallclockTime", "checkResult", "checkCpuTime",
                          "checkWallclockTime"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql LriResultInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField JobPairInfo where
      toPersistValue
        = \ ent_a23N5
            -> (PersistMap
                $ (zip
                     (map
                        Data.Text.pack
                        ["pairId", "stdout", "log", "htmlProof", "resultStatus"])
                     ((map toPersistValue) $ (toPersistFields ent_a23N5))))
      fromPersistValue
        = ((\ x_a23N6
              -> let
                   columns_a23N7
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23N6
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23N8
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23N8) columns_a23N7
                                of {
                                  Just v_a23N9 -> v_a23N9
                                  Nothing -> PersistNull }))
                       $ ["pairId", "stdout", "log", "htmlProof", "resultStatus"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql JobPairInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField JobInfo where
      toPersistValue
        = \ ent_a23Na
            -> (PersistMap
                $ (zip
                     (map
                        Data.Text.pack
                        ["starExecId", "name", "status", "date", "preProc", "postProc",
                         "isComplexity", "isPublic", "startDate", "finishDate",
                         "lastUpdate"])
                     ((map toPersistValue) $ (toPersistFields ent_a23Na))))
      fromPersistValue
        = ((\ x_a23Nb
              -> let
                   columns_a23Nc
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23Nb
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23Nd
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23Nd) columns_a23Nc
                                of {
                                  Just v_a23Ne -> v_a23Ne
                                  Nothing -> PersistNull }))
                       $ ["starExecId", "name", "status", "date", "preProc", "postProc",
                          "isComplexity", "isPublic", "startDate", "finishDate",
                          "lastUpdate"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql JobInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField LriJobInfo where
      toPersistValue
        = \ ent_a23Nf
            -> (PersistMap
                $ (zip
                     (map Data.Text.pack ["jobId", "name"])
                     ((map toPersistValue) $ (toPersistFields ent_a23Nf))))
      fromPersistValue
        = ((\ x_a23Ng
              -> let
                   columns_a23Nh
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23Ng
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23Ni
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23Ni) columns_a23Nh
                                of {
                                  Just v_a23Nj -> v_a23Nj
                                  Nothing -> PersistNull }))
                       $ ["jobId", "name"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql LriJobInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField SolverInfo where
      toPersistValue
        = \ ent_a23Nk
            -> (PersistMap
                $ (zip
                     (map
                        Data.Text.pack ["starExecId", "name", "description", "lastUpdate"])
                     ((map toPersistValue) $ (toPersistFields ent_a23Nk))))
      fromPersistValue
        = ((\ x_a23Nl
              -> let
                   columns_a23Nm
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23Nl
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23Nn
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23Nn) columns_a23Nm
                                of {
                                  Just v_a23No -> v_a23No
                                  Nothing -> PersistNull }))
                       $ ["starExecId", "name", "description", "lastUpdate"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql SolverInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField LriSolverInfo where
      toPersistValue
        = \ ent_a23Np
            -> (PersistMap
                $ (zip
                     (map
                        Data.Text.pack
                        ["solverId", "name", "author", "description", "url", "isStandard",
                         "isRelative", "isConditional", "isContextSensitive", "isInnermost",
                         "isTheory", "isCertifying"])
                     ((map toPersistValue) $ (toPersistFields ent_a23Np))))
      fromPersistValue
        = ((\ x_a23Nq
              -> let
                   columns_a23Nr
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23Nq
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23Ns
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23Ns) columns_a23Nr
                                of {
                                  Just v_a23Nt -> v_a23Nt
                                  Nothing -> PersistNull }))
                       $ ["solverId", "name", "author", "description", "url",
                          "isStandard", "isRelative", "isConditional", "isContextSensitive",
                          "isInnermost", "isTheory", "isCertifying"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql LriSolverInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField BenchmarkInfo where
      toPersistValue
        = \ ent_a23Nu
            -> (PersistMap
                $ (zip
                     (map Data.Text.pack ["starExecId", "name", "type", "lastUpdate"])
                     ((map toPersistValue) $ (toPersistFields ent_a23Nu))))
      fromPersistValue
        = ((\ x_a23Nv
              -> let
                   columns_a23Nw
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23Nv
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23Nx
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23Nx) columns_a23Nw
                                of {
                                  Just v_a23Ny -> v_a23Ny
                                  Nothing -> PersistNull }))
                       $ ["starExecId", "name", "type", "lastUpdate"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql BenchmarkInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField LriBenchmarkInfo where
      toPersistValue
        = \ ent_a23Nz
            -> (PersistMap
                $ (zip
                     (map
                        Data.Text.pack
                        ["benchmarkId", "name", "file", "rating", "solved",
                         "isConditional", "isContextSensitive", "isInnermost",
                         "isOutermost", "isRelative", "isTheory"])
                     ((map toPersistValue) $ (toPersistFields ent_a23Nz))))
      fromPersistValue
        = ((\ x_a23NA
              -> let
                   columns_a23NB
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23NA
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23NC
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23NC) columns_a23NB
                                of {
                                  Just v_a23ND -> v_a23ND
                                  Nothing -> PersistNull }))
                       $ ["benchmarkId", "name", "file", "rating", "solved",
                          "isConditional", "isContextSensitive", "isInnermost",
                          "isOutermost", "isRelative", "isTheory"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql LriBenchmarkInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField QueryInfo where
      toPersistValue
        = \ ent_a23NE
            -> (PersistMap
                $ (zip
                     (map Data.Text.pack ["query"])
                     ((map toPersistValue) $ (toPersistFields ent_a23NE))))
      fromPersistValue
        = ((\ x_a23NF
              -> let
                   columns_a23NG
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23NF
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23NH
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23NH) columns_a23NG
                                of {
                                  Just v_a23NI -> v_a23NI
                                  Nothing -> PersistNull }))
                       $ ["query"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql QueryInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField CompetitionInfo where
      toPersistValue
        = \ ent_a23NJ
            -> (PersistMap
                $ (zip
                     (map Data.Text.pack ["competition", "date", "public"])
                     ((map toPersistValue) $ (toPersistFields ent_a23NJ))))
      fromPersistValue
        = ((\ x_a23NK
              -> let
                   columns_a23NL
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23NK
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23NM
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23NM) columns_a23NL
                                of {
                                  Just v_a23NN -> v_a23NN
                                  Nothing -> PersistNull }))
                       $ ["competition", "date", "public"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql CompetitionInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    instance PersistField PostProcInfo where
      toPersistValue
        = \ ent_a23NO
            -> (PersistMap
                $ (zip
                     (map
                        Data.Text.pack ["starExecId", "name", "description", "lastUpdate"])
                     ((map toPersistValue) $ (toPersistFields ent_a23NO))))
      fromPersistValue
        = ((\ x_a23NP
              -> let
                   columns_a23NQ
                     = unordered-containers-0.2.4.0:Data.HashMap.Strict.fromList x_a23NP
                 in
                   (fromPersistValues
                    $ ((map
                          (\ name_a23NR
                             -> case
                                    unordered-containers-0.2.4.0:Data.HashMap.Base.lookup
                                      (Data.Text.pack name_a23NR) columns_a23NQ
                                of {
                                  Just v_a23NS -> v_a23NS
                                  Nothing -> PersistNull }))
                       $ ["starExecId", "name", "description", "lastUpdate"])))
           Control.Monad.<=< getPersistMap)
    instance persistent-1.3.3:Database.Persist.Sql.Class.PersistFieldSql PostProcInfo where
      persistent-1.3.3:Database.Persist.Sql.Class.sqlType _ = SqlString
    data User
      = User {userIdent :: !Text, userPassword :: !(Maybe Text)}
      deriving (Typeable)
    type UserId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend User
    instance PersistEntity User where
      type PersistEntityBackend User = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique User = UniqueUser Text
      data EntityField User typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend User =>
          UserId |
          typ ~ Text => UserIdent |
          typ ~ Maybe Text => UserPassword
      entityDef _
        = EntityDef
            (HaskellName (packPTH "User"))
            (DBName (packPTH "user"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "ident"))
               (DBName (packPTH "ident"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "password"))
               (DBName (packPTH "password"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               [packPTH "Maybe"]
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueUser"))
               (DBName (packPTH "unique_user"))
               [(HaskellName (packPTH "ident"), DBName (packPTH "ident"))]
               []]
            []
            [packPTH "Typeable"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields (User x_a23NT x_a23NU)
        = [SomePersistField x_a23NT, SomePersistField x_a23NU]
      fromPersistValues [x_a23NV, x_a23NW]
        = (((Right User)
            Control.Applicative.<*>
              (\ persistValue_a23NX
                 -> case fromPersistValue persistValue_a23NX of {
                      Right r_a23NY -> Right r_a23NY
                      Left err_a23NZ
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "ident"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23NZ)) }
                 x_a23NV))
           Control.Applicative.<*>
             (\ persistValue_a23O0
                -> case fromPersistValue persistValue_a23O0 of {
                     Right r_a23O1 -> Right r_a23O1
                     Left err_a23O2
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "password"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23O2)) }
                x_a23NW))
      fromPersistValues _
        = Left (packPTH "Invalid fromPersistValues input. Entity: User")
      persistUniqueToFieldNames (UniqueUser {})
        = [(HaskellName (packPTH "ident"), DBName (packPTH "ident"))]
      persistUniqueToValues (UniqueUser x_a23O3)
        = [toPersistValue x_a23O3]
      persistUniqueKeys (User _ident_a23O4 _password_a23O5)
        = [UniqueUser _ident_a23O4]
      persistFieldDef UserId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "UserId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef UserIdent
        = FieldDef
            (HaskellName (packPTH "ident"))
            (DBName (packPTH "ident"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef UserPassword
        = FieldDef
            (HaskellName (packPTH "password"))
            (DBName (packPTH "password"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            [packPTH "Maybe"]
            True
            Nothing
      persistIdField = UserId
      fieldLens UserId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23O6) key_a23O7
               -> Entity key_a23O7 value_a23O6)
      fieldLens UserIdent
        = lensPTH
            (userIdent . entityVal)
            (\ (Entity key_a23O8 value_a23O9) x_a23Oa
               -> Entity key_a23O8 (value_a23O9 {userIdent = x_a23Oa}))
      fieldLens UserPassword
        = lensPTH
            (userPassword . entityVal)
            (\ (Entity key_a23O8 value_a23O9) x_a23Oa
               -> Entity key_a23O8 (value_a23O9 {userPassword = x_a23Oa}))
    data StarExecSessionData
      = StarExecSessionData {starExecSessionDataKey :: !Int,
                             starExecSessionDataCookies :: !Text,
                             starExecSessionDataDate :: !UTCTime}
    type StarExecSessionDataId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend StarExecSessionData
    instance PersistEntity StarExecSessionData where
      type PersistEntityBackend StarExecSessionData = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique StarExecSessionData = UniqueStarExecSessionData Int
      data EntityField StarExecSessionData typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend StarExecSessionData =>
          StarExecSessionDataId |
          typ ~ Int => StarExecSessionDataKey |
          typ ~ Text => StarExecSessionDataCookies |
          typ ~ UTCTime => StarExecSessionDataDate
      entityDef _
        = EntityDef
            (HaskellName (packPTH "StarExecSessionData"))
            (DBName (packPTH "star_exec_session_data"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "key"))
               (DBName (packPTH "key"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "cookies"))
               (DBName (packPTH "cookies"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "date"))
               (DBName (packPTH "date"))
               (FTTypeCon Nothing (packPTH "UTCTime"))
               SqlDayTime
               []
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueStarExecSessionData"))
               (DBName (packPTH "unique_star_exec_session_data"))
               [(HaskellName (packPTH "key"), DBName (packPTH "key"))]
               []]
            []
            []
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields (StarExecSessionData x_a23Ob x_a23Oc x_a23Od)
        = [SomePersistField x_a23Ob, SomePersistField x_a23Oc,
           SomePersistField x_a23Od]
      fromPersistValues [x_a23Oe, x_a23Of, x_a23Og]
        = ((((Right StarExecSessionData)
             Control.Applicative.<*>
               (\ persistValue_a23Oh
                  -> case fromPersistValue persistValue_a23Oh of {
                       Right r_a23Oi -> Right r_a23Oi
                       Left err_a23Oj
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "key"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23Oj)) }
                  x_a23Oe))
            Control.Applicative.<*>
              (\ persistValue_a23Ok
                 -> case fromPersistValue persistValue_a23Ok of {
                      Right r_a23Ol -> Right r_a23Ol
                      Left err_a23Om
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "cookies"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23Om)) }
                 x_a23Of))
           Control.Applicative.<*>
             (\ persistValue_a23On
                -> case fromPersistValue persistValue_a23On of {
                     Right r_a23Oo -> Right r_a23Oo
                     Left err_a23Op
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "date"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Op)) }
                x_a23Og))
      fromPersistValues _
        = Left
            (packPTH
               "Invalid fromPersistValues input. Entity: StarExecSessionData")
      persistUniqueToFieldNames (UniqueStarExecSessionData {})
        = [(HaskellName (packPTH "key"), DBName (packPTH "key"))]
      persistUniqueToValues (UniqueStarExecSessionData x_a23Oq)
        = [toPersistValue x_a23Oq]
      persistUniqueKeys
        (StarExecSessionData _key_a23Or _cookies_a23Os _date_a23Ot)
        = [UniqueStarExecSessionData _key_a23Or]
      persistFieldDef StarExecSessionDataId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "StarExecSessionDataId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef StarExecSessionDataKey
        = FieldDef
            (HaskellName (packPTH "key"))
            (DBName (packPTH "key"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef StarExecSessionDataCookies
        = FieldDef
            (HaskellName (packPTH "cookies"))
            (DBName (packPTH "cookies"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef StarExecSessionDataDate
        = FieldDef
            (HaskellName (packPTH "date"))
            (DBName (packPTH "date"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            SqlDayTime
            []
            True
            Nothing
      persistIdField = StarExecSessionDataId
      fieldLens StarExecSessionDataId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23Ou) key_a23Ov
               -> Entity key_a23Ov value_a23Ou)
      fieldLens StarExecSessionDataKey
        = lensPTH
            (starExecSessionDataKey . entityVal)
            (\ (Entity key_a23Ow value_a23Ox) x_a23Oy
               -> Entity
                    key_a23Ow (value_a23Ox {starExecSessionDataKey = x_a23Oy}))
      fieldLens StarExecSessionDataCookies
        = lensPTH
            (starExecSessionDataCookies . entityVal)
            (\ (Entity key_a23Ow value_a23Ox) x_a23Oy
               -> Entity
                    key_a23Ow (value_a23Ox {starExecSessionDataCookies = x_a23Oy}))
      fieldLens StarExecSessionDataDate
        = lensPTH
            (starExecSessionDataDate . entityVal)
            (\ (Entity key_a23Ow value_a23Ox) x_a23Oy
               -> Entity
                    key_a23Ow (value_a23Ox {starExecSessionDataDate = x_a23Oy}))
    data JobResultInfo
      = JobResultInfo {jobResultInfoJobId :: !Int,
                       jobResultInfoScore :: !(Maybe Int),
                       jobResultInfoPairId :: !Int,
                       jobResultInfoBenchmark :: !Text,
                       jobResultInfoBenchmarkId :: !Int,
                       jobResultInfoSolver :: !Text,
                       jobResultInfoSolverId :: !Int,
                       jobResultInfoConfiguration :: !Text,
                       jobResultInfoConfigurationId :: !Int,
                       jobResultInfoStatus :: !JobResultStatus,
                       jobResultInfoCpuTime :: !Double,
                       jobResultInfoWallclockTime :: !Double,
                       jobResultInfoResult :: !SolverResult}
      deriving (Eq, Ord, Read, Show)
    type JobResultInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend JobResultInfo
    instance PersistEntity JobResultInfo where
      type PersistEntityBackend JobResultInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique JobResultInfo = UniqueJobResultInfo Int
      data EntityField JobResultInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend JobResultInfo =>
          JobResultInfoId |
          typ ~ Int => JobResultInfoJobId |
          typ ~ Maybe Int => JobResultInfoScore |
          typ ~ Int => JobResultInfoPairId |
          typ ~ Text => JobResultInfoBenchmark |
          typ ~ Int => JobResultInfoBenchmarkId |
          typ ~ Text => JobResultInfoSolver |
          typ ~ Int => JobResultInfoSolverId |
          typ ~ Text => JobResultInfoConfiguration |
          typ ~ Int => JobResultInfoConfigurationId |
          typ ~ JobResultStatus => JobResultInfoStatus |
          typ ~ Double => JobResultInfoCpuTime |
          typ ~ Double => JobResultInfoWallclockTime |
          typ ~ SolverResult => JobResultInfoResult
      entityDef _
        = EntityDef
            (HaskellName (packPTH "JobResultInfo"))
            (DBName (packPTH "job_result_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "jobId"))
               (DBName (packPTH "job_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "score"))
               (DBName (packPTH "score"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               [packPTH "Maybe"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "pairId"))
               (DBName (packPTH "pair_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "benchmark"))
               (DBName (packPTH "benchmark"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "benchmarkId"))
               (DBName (packPTH "benchmark_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "solver"))
               (DBName (packPTH "solver"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "solverId"))
               (DBName (packPTH "solver_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "configuration"))
               (DBName (packPTH "configuration"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "configurationId"))
               (DBName (packPTH "configuration_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "status"))
               (DBName (packPTH "status"))
               (FTTypeCon Nothing (packPTH "JobResultStatus"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "cpuTime"))
               (DBName (packPTH "cpu_time"))
               (FTTypeCon Nothing (packPTH "Double"))
               SqlReal
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "wallclockTime"))
               (DBName (packPTH "wallclock_time"))
               (FTTypeCon Nothing (packPTH "Double"))
               SqlReal
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "result"))
               (DBName (packPTH "result"))
               (FTTypeCon Nothing (packPTH "SolverResult"))
               SqlString
               []
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueJobResultInfo"))
               (DBName (packPTH "unique_job_result_info"))
               [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields
        (JobResultInfo x_a23Oz
                       x_a23OA
                       x_a23OB
                       x_a23OC
                       x_a23OD
                       x_a23OE
                       x_a23OF
                       x_a23OG
                       x_a23OH
                       x_a23OI
                       x_a23OJ
                       x_a23OK
                       x_a23OL)
        = [SomePersistField x_a23Oz, SomePersistField x_a23OA,
           SomePersistField x_a23OB, SomePersistField x_a23OC,
           SomePersistField x_a23OD, SomePersistField x_a23OE,
           SomePersistField x_a23OF, SomePersistField x_a23OG,
           SomePersistField x_a23OH, SomePersistField x_a23OI,
           SomePersistField x_a23OJ, SomePersistField x_a23OK,
           SomePersistField x_a23OL]
      fromPersistValues
        [x_a23OM,
         x_a23ON,
         x_a23OO,
         x_a23OP,
         x_a23OQ,
         x_a23OR,
         x_a23OS,
         x_a23OT,
         x_a23OU,
         x_a23OV,
         x_a23OW,
         x_a23OX,
         x_a23OY]
        = ((((((((((((((Right JobResultInfo)
                       Control.Applicative.<*>
                         (\ persistValue_a23OZ
                            -> case fromPersistValue persistValue_a23OZ of {
                                 Right r_a23P0 -> Right r_a23P0
                                 Left err_a23P1
                                   -> (Left
                                       $ ((("field " `Data.Monoid.mappend` (packPTH "jobId"))
                                           `Data.Monoid.mappend` ": ")
                                          `Data.Monoid.mappend` err_a23P1)) }
                            x_a23OM))
                      Control.Applicative.<*>
                        (\ persistValue_a23P2
                           -> case fromPersistValue persistValue_a23P2 of {
                                Right r_a23P3 -> Right r_a23P3
                                Left err_a23P4
                                  -> (Left
                                      $ ((("field " `Data.Monoid.mappend` (packPTH "score"))
                                          `Data.Monoid.mappend` ": ")
                                         `Data.Monoid.mappend` err_a23P4)) }
                           x_a23ON))
                     Control.Applicative.<*>
                       (\ persistValue_a23P5
                          -> case fromPersistValue persistValue_a23P5 of {
                               Right r_a23P6 -> Right r_a23P6
                               Left err_a23P7
                                 -> (Left
                                     $ ((("field " `Data.Monoid.mappend` (packPTH "pairId"))
                                         `Data.Monoid.mappend` ": ")
                                        `Data.Monoid.mappend` err_a23P7)) }
                          x_a23OO))
                    Control.Applicative.<*>
                      (\ persistValue_a23P8
                         -> case fromPersistValue persistValue_a23P8 of {
                              Right r_a23P9 -> Right r_a23P9
                              Left err_a23Pa
                                -> (Left
                                    $ ((("field " `Data.Monoid.mappend` (packPTH "benchmark"))
                                        `Data.Monoid.mappend` ": ")
                                       `Data.Monoid.mappend` err_a23Pa)) }
                         x_a23OP))
                   Control.Applicative.<*>
                     (\ persistValue_a23Pb
                        -> case fromPersistValue persistValue_a23Pb of {
                             Right r_a23Pc -> Right r_a23Pc
                             Left err_a23Pd
                               -> (Left
                                   $ ((("field " `Data.Monoid.mappend` (packPTH "benchmarkId"))
                                       `Data.Monoid.mappend` ": ")
                                      `Data.Monoid.mappend` err_a23Pd)) }
                        x_a23OQ))
                  Control.Applicative.<*>
                    (\ persistValue_a23Pe
                       -> case fromPersistValue persistValue_a23Pe of {
                            Right r_a23Pf -> Right r_a23Pf
                            Left err_a23Pg
                              -> (Left
                                  $ ((("field " `Data.Monoid.mappend` (packPTH "solver"))
                                      `Data.Monoid.mappend` ": ")
                                     `Data.Monoid.mappend` err_a23Pg)) }
                       x_a23OR))
                 Control.Applicative.<*>
                   (\ persistValue_a23Ph
                      -> case fromPersistValue persistValue_a23Ph of {
                           Right r_a23Pi -> Right r_a23Pi
                           Left err_a23Pj
                             -> (Left
                                 $ ((("field " `Data.Monoid.mappend` (packPTH "solverId"))
                                     `Data.Monoid.mappend` ": ")
                                    `Data.Monoid.mappend` err_a23Pj)) }
                      x_a23OS))
                Control.Applicative.<*>
                  (\ persistValue_a23Pk
                     -> case fromPersistValue persistValue_a23Pk of {
                          Right r_a23Pl -> Right r_a23Pl
                          Left err_a23Pm
                            -> (Left
                                $ ((("field " `Data.Monoid.mappend` (packPTH "configuration"))
                                    `Data.Monoid.mappend` ": ")
                                   `Data.Monoid.mappend` err_a23Pm)) }
                     x_a23OT))
               Control.Applicative.<*>
                 (\ persistValue_a23Pn
                    -> case fromPersistValue persistValue_a23Pn of {
                         Right r_a23Po -> Right r_a23Po
                         Left err_a23Pp
                           -> (Left
                               $ ((("field " `Data.Monoid.mappend` (packPTH "configurationId"))
                                   `Data.Monoid.mappend` ": ")
                                  `Data.Monoid.mappend` err_a23Pp)) }
                    x_a23OU))
              Control.Applicative.<*>
                (\ persistValue_a23Pq
                   -> case fromPersistValue persistValue_a23Pq of {
                        Right r_a23Pr -> Right r_a23Pr
                        Left err_a23Ps
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "status"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23Ps)) }
                   x_a23OV))
             Control.Applicative.<*>
               (\ persistValue_a23Pt
                  -> case fromPersistValue persistValue_a23Pt of {
                       Right r_a23Pu -> Right r_a23Pu
                       Left err_a23Pv
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "cpuTime"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23Pv)) }
                  x_a23OW))
            Control.Applicative.<*>
              (\ persistValue_a23Pw
                 -> case fromPersistValue persistValue_a23Pw of {
                      Right r_a23Px -> Right r_a23Px
                      Left err_a23Py
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "wallclockTime"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23Py)) }
                 x_a23OX))
           Control.Applicative.<*>
             (\ persistValue_a23Pz
                -> case fromPersistValue persistValue_a23Pz of {
                     Right r_a23PA -> Right r_a23PA
                     Left err_a23PB
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "result"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23PB)) }
                x_a23OY))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: JobResultInfo")
      persistUniqueToFieldNames (UniqueJobResultInfo {})
        = [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
      persistUniqueToValues (UniqueJobResultInfo x_a23PC)
        = [toPersistValue x_a23PC]
      persistUniqueKeys
        (JobResultInfo _jobId_a23PD
                       _score_a23PE
                       _pairId_a23PF
                       _benchmark_a23PG
                       _benchmarkId_a23PH
                       _solver_a23PI
                       _solverId_a23PJ
                       _configuration_a23PK
                       _configurationId_a23PL
                       _status_a23PM
                       _cpuTime_a23PN
                       _wallclockTime_a23PO
                       _result_a23PP)
        = [UniqueJobResultInfo _pairId_a23PF]
      persistFieldDef JobResultInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "JobResultInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobResultInfoJobId
        = FieldDef
            (HaskellName (packPTH "jobId"))
            (DBName (packPTH "job_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobResultInfoScore
        = FieldDef
            (HaskellName (packPTH "score"))
            (DBName (packPTH "score"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            [packPTH "Maybe"]
            True
            Nothing
      persistFieldDef JobResultInfoPairId
        = FieldDef
            (HaskellName (packPTH "pairId"))
            (DBName (packPTH "pair_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobResultInfoBenchmark
        = FieldDef
            (HaskellName (packPTH "benchmark"))
            (DBName (packPTH "benchmark"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef JobResultInfoBenchmarkId
        = FieldDef
            (HaskellName (packPTH "benchmarkId"))
            (DBName (packPTH "benchmark_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobResultInfoSolver
        = FieldDef
            (HaskellName (packPTH "solver"))
            (DBName (packPTH "solver"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef JobResultInfoSolverId
        = FieldDef
            (HaskellName (packPTH "solverId"))
            (DBName (packPTH "solver_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobResultInfoConfiguration
        = FieldDef
            (HaskellName (packPTH "configuration"))
            (DBName (packPTH "configuration"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef JobResultInfoConfigurationId
        = FieldDef
            (HaskellName (packPTH "configurationId"))
            (DBName (packPTH "configuration_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobResultInfoStatus
        = FieldDef
            (HaskellName (packPTH "status"))
            (DBName (packPTH "status"))
            (FTTypeCon Nothing (packPTH "JobResultStatus"))
            SqlString
            []
            True
            Nothing
      persistFieldDef JobResultInfoCpuTime
        = FieldDef
            (HaskellName (packPTH "cpuTime"))
            (DBName (packPTH "cpu_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            SqlReal
            []
            True
            Nothing
      persistFieldDef JobResultInfoWallclockTime
        = FieldDef
            (HaskellName (packPTH "wallclockTime"))
            (DBName (packPTH "wallclock_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            SqlReal
            []
            True
            Nothing
      persistFieldDef JobResultInfoResult
        = FieldDef
            (HaskellName (packPTH "result"))
            (DBName (packPTH "result"))
            (FTTypeCon Nothing (packPTH "SolverResult"))
            SqlString
            []
            True
            Nothing
      persistIdField = JobResultInfoId
      fieldLens JobResultInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23PQ) key_a23PR
               -> Entity key_a23PR value_a23PQ)
      fieldLens JobResultInfoJobId
        = lensPTH
            (jobResultInfoJobId . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity key_a23PS (value_a23PT {jobResultInfoJobId = x_a23PU}))
      fieldLens JobResultInfoScore
        = lensPTH
            (jobResultInfoScore . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity key_a23PS (value_a23PT {jobResultInfoScore = x_a23PU}))
      fieldLens JobResultInfoPairId
        = lensPTH
            (jobResultInfoPairId . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity key_a23PS (value_a23PT {jobResultInfoPairId = x_a23PU}))
      fieldLens JobResultInfoBenchmark
        = lensPTH
            (jobResultInfoBenchmark . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity
                    key_a23PS (value_a23PT {jobResultInfoBenchmark = x_a23PU}))
      fieldLens JobResultInfoBenchmarkId
        = lensPTH
            (jobResultInfoBenchmarkId . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity
                    key_a23PS (value_a23PT {jobResultInfoBenchmarkId = x_a23PU}))
      fieldLens JobResultInfoSolver
        = lensPTH
            (jobResultInfoSolver . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity key_a23PS (value_a23PT {jobResultInfoSolver = x_a23PU}))
      fieldLens JobResultInfoSolverId
        = lensPTH
            (jobResultInfoSolverId . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity
                    key_a23PS (value_a23PT {jobResultInfoSolverId = x_a23PU}))
      fieldLens JobResultInfoConfiguration
        = lensPTH
            (jobResultInfoConfiguration . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity
                    key_a23PS (value_a23PT {jobResultInfoConfiguration = x_a23PU}))
      fieldLens JobResultInfoConfigurationId
        = lensPTH
            (jobResultInfoConfigurationId . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity
                    key_a23PS (value_a23PT {jobResultInfoConfigurationId = x_a23PU}))
      fieldLens JobResultInfoStatus
        = lensPTH
            (jobResultInfoStatus . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity key_a23PS (value_a23PT {jobResultInfoStatus = x_a23PU}))
      fieldLens JobResultInfoCpuTime
        = lensPTH
            (jobResultInfoCpuTime . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity key_a23PS (value_a23PT {jobResultInfoCpuTime = x_a23PU}))
      fieldLens JobResultInfoWallclockTime
        = lensPTH
            (jobResultInfoWallclockTime . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity
                    key_a23PS (value_a23PT {jobResultInfoWallclockTime = x_a23PU}))
      fieldLens JobResultInfoResult
        = lensPTH
            (jobResultInfoResult . entityVal)
            (\ (Entity key_a23PS value_a23PT) x_a23PU
               -> Entity key_a23PS (value_a23PT {jobResultInfoResult = x_a23PU}))
    data LriResultInfo
      = LriResultInfo {lriResultInfoJobId :: !Text,
                       lriResultInfoScore :: !(Maybe Int),
                       lriResultInfoPairId :: !Text,
                       lriResultInfoBenchmarkId :: !Text,
                       lriResultInfoSolverId :: !Text,
                       lriResultInfoResult :: !SolverResult,
                       lriResultInfoCpuTime :: !Double,
                       lriResultInfoWallclockTime :: !Double,
                       lriResultInfoCheckResult :: !(Maybe SolverResult),
                       lriResultInfoCheckCpuTime :: !(Maybe Double),
                       lriResultInfoCheckWallclockTime :: !(Maybe Double)}
      deriving (Eq, Ord, Read, Show)
    type LriResultInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend LriResultInfo
    instance PersistEntity LriResultInfo where
      type PersistEntityBackend LriResultInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique LriResultInfo = UniqueLriResultInfo Text
      data EntityField LriResultInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend LriResultInfo =>
          LriResultInfoId |
          typ ~ Text => LriResultInfoJobId |
          typ ~ Maybe Int => LriResultInfoScore |
          typ ~ Text => LriResultInfoPairId |
          typ ~ Text => LriResultInfoBenchmarkId |
          typ ~ Text => LriResultInfoSolverId |
          typ ~ SolverResult => LriResultInfoResult |
          typ ~ Double => LriResultInfoCpuTime |
          typ ~ Double => LriResultInfoWallclockTime |
          typ ~ Maybe SolverResult => LriResultInfoCheckResult |
          typ ~ Maybe Double => LriResultInfoCheckCpuTime |
          typ ~ Maybe Double => LriResultInfoCheckWallclockTime
      entityDef _
        = EntityDef
            (HaskellName (packPTH "LriResultInfo"))
            (DBName (packPTH "lri_result_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "jobId"))
               (DBName (packPTH "job_id"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "score"))
               (DBName (packPTH "score"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               [packPTH "Maybe"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "pairId"))
               (DBName (packPTH "pair_id"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "benchmarkId"))
               (DBName (packPTH "benchmark_id"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "solverId"))
               (DBName (packPTH "solver_id"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "result"))
               (DBName (packPTH "result"))
               (FTTypeCon Nothing (packPTH "SolverResult"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "cpuTime"))
               (DBName (packPTH "cpu_time"))
               (FTTypeCon Nothing (packPTH "Double"))
               SqlReal
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "wallclockTime"))
               (DBName (packPTH "wallclock_time"))
               (FTTypeCon Nothing (packPTH "Double"))
               SqlReal
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "checkResult"))
               (DBName (packPTH "check_result"))
               (FTTypeCon Nothing (packPTH "SolverResult"))
               SqlString
               [packPTH "Maybe"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "checkCpuTime"))
               (DBName (packPTH "check_cpu_time"))
               (FTTypeCon Nothing (packPTH "Double"))
               SqlReal
               [packPTH "Maybe"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "checkWallclockTime"))
               (DBName (packPTH "check_wallclock_time"))
               (FTTypeCon Nothing (packPTH "Double"))
               SqlReal
               [packPTH "Maybe"]
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueLriResultInfo"))
               (DBName (packPTH "unique_lri_result_info"))
               [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields
        (LriResultInfo x_a23PV
                       x_a23PW
                       x_a23PX
                       x_a23PY
                       x_a23PZ
                       x_a23Q0
                       x_a23Q1
                       x_a23Q2
                       x_a23Q3
                       x_a23Q4
                       x_a23Q5)
        = [SomePersistField x_a23PV, SomePersistField x_a23PW,
           SomePersistField x_a23PX, SomePersistField x_a23PY,
           SomePersistField x_a23PZ, SomePersistField x_a23Q0,
           SomePersistField x_a23Q1, SomePersistField x_a23Q2,
           SomePersistField x_a23Q3, SomePersistField x_a23Q4,
           SomePersistField x_a23Q5]
      fromPersistValues
        [x_a23Q6,
         x_a23Q7,
         x_a23Q8,
         x_a23Q9,
         x_a23Qa,
         x_a23Qb,
         x_a23Qc,
         x_a23Qd,
         x_a23Qe,
         x_a23Qf,
         x_a23Qg]
        = ((((((((((((Right LriResultInfo)
                     Control.Applicative.<*>
                       (\ persistValue_a23Qh
                          -> case fromPersistValue persistValue_a23Qh of {
                               Right r_a23Qi -> Right r_a23Qi
                               Left err_a23Qj
                                 -> (Left
                                     $ ((("field " `Data.Monoid.mappend` (packPTH "jobId"))
                                         `Data.Monoid.mappend` ": ")
                                        `Data.Monoid.mappend` err_a23Qj)) }
                          x_a23Q6))
                    Control.Applicative.<*>
                      (\ persistValue_a23Qk
                         -> case fromPersistValue persistValue_a23Qk of {
                              Right r_a23Ql -> Right r_a23Ql
                              Left err_a23Qm
                                -> (Left
                                    $ ((("field " `Data.Monoid.mappend` (packPTH "score"))
                                        `Data.Monoid.mappend` ": ")
                                       `Data.Monoid.mappend` err_a23Qm)) }
                         x_a23Q7))
                   Control.Applicative.<*>
                     (\ persistValue_a23Qn
                        -> case fromPersistValue persistValue_a23Qn of {
                             Right r_a23Qo -> Right r_a23Qo
                             Left err_a23Qp
                               -> (Left
                                   $ ((("field " `Data.Monoid.mappend` (packPTH "pairId"))
                                       `Data.Monoid.mappend` ": ")
                                      `Data.Monoid.mappend` err_a23Qp)) }
                        x_a23Q8))
                  Control.Applicative.<*>
                    (\ persistValue_a23Qq
                       -> case fromPersistValue persistValue_a23Qq of {
                            Right r_a23Qr -> Right r_a23Qr
                            Left err_a23Qs
                              -> (Left
                                  $ ((("field " `Data.Monoid.mappend` (packPTH "benchmarkId"))
                                      `Data.Monoid.mappend` ": ")
                                     `Data.Monoid.mappend` err_a23Qs)) }
                       x_a23Q9))
                 Control.Applicative.<*>
                   (\ persistValue_a23Qt
                      -> case fromPersistValue persistValue_a23Qt of {
                           Right r_a23Qu -> Right r_a23Qu
                           Left err_a23Qv
                             -> (Left
                                 $ ((("field " `Data.Monoid.mappend` (packPTH "solverId"))
                                     `Data.Monoid.mappend` ": ")
                                    `Data.Monoid.mappend` err_a23Qv)) }
                      x_a23Qa))
                Control.Applicative.<*>
                  (\ persistValue_a23Qw
                     -> case fromPersistValue persistValue_a23Qw of {
                          Right r_a23Qx -> Right r_a23Qx
                          Left err_a23Qy
                            -> (Left
                                $ ((("field " `Data.Monoid.mappend` (packPTH "result"))
                                    `Data.Monoid.mappend` ": ")
                                   `Data.Monoid.mappend` err_a23Qy)) }
                     x_a23Qb))
               Control.Applicative.<*>
                 (\ persistValue_a23Qz
                    -> case fromPersistValue persistValue_a23Qz of {
                         Right r_a23QA -> Right r_a23QA
                         Left err_a23QB
                           -> (Left
                               $ ((("field " `Data.Monoid.mappend` (packPTH "cpuTime"))
                                   `Data.Monoid.mappend` ": ")
                                  `Data.Monoid.mappend` err_a23QB)) }
                    x_a23Qc))
              Control.Applicative.<*>
                (\ persistValue_a23QC
                   -> case fromPersistValue persistValue_a23QC of {
                        Right r_a23QD -> Right r_a23QD
                        Left err_a23QE
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "wallclockTime"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23QE)) }
                   x_a23Qd))
             Control.Applicative.<*>
               (\ persistValue_a23QF
                  -> case fromPersistValue persistValue_a23QF of {
                       Right r_a23QG -> Right r_a23QG
                       Left err_a23QH
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "checkResult"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23QH)) }
                  x_a23Qe))
            Control.Applicative.<*>
              (\ persistValue_a23QI
                 -> case fromPersistValue persistValue_a23QI of {
                      Right r_a23QJ -> Right r_a23QJ
                      Left err_a23QK
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "checkCpuTime"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23QK)) }
                 x_a23Qf))
           Control.Applicative.<*>
             (\ persistValue_a23QL
                -> case fromPersistValue persistValue_a23QL of {
                     Right r_a23QM -> Right r_a23QM
                     Left err_a23QN
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "checkWallclockTime"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23QN)) }
                x_a23Qg))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: LriResultInfo")
      persistUniqueToFieldNames (UniqueLriResultInfo {})
        = [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
      persistUniqueToValues (UniqueLriResultInfo x_a23QO)
        = [toPersistValue x_a23QO]
      persistUniqueKeys
        (LriResultInfo _jobId_a23QP
                       _score_a23QQ
                       _pairId_a23QR
                       _benchmarkId_a23QS
                       _solverId_a23QT
                       _result_a23QU
                       _cpuTime_a23QV
                       _wallclockTime_a23QW
                       _checkResult_a23QX
                       _checkCpuTime_a23QY
                       _checkWallclockTime_a23QZ)
        = [UniqueLriResultInfo _pairId_a23QR]
      persistFieldDef LriResultInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "LriResultInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef LriResultInfoJobId
        = FieldDef
            (HaskellName (packPTH "jobId"))
            (DBName (packPTH "job_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriResultInfoScore
        = FieldDef
            (HaskellName (packPTH "score"))
            (DBName (packPTH "score"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            [packPTH "Maybe"]
            True
            Nothing
      persistFieldDef LriResultInfoPairId
        = FieldDef
            (HaskellName (packPTH "pairId"))
            (DBName (packPTH "pair_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriResultInfoBenchmarkId
        = FieldDef
            (HaskellName (packPTH "benchmarkId"))
            (DBName (packPTH "benchmark_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriResultInfoSolverId
        = FieldDef
            (HaskellName (packPTH "solverId"))
            (DBName (packPTH "solver_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriResultInfoResult
        = FieldDef
            (HaskellName (packPTH "result"))
            (DBName (packPTH "result"))
            (FTTypeCon Nothing (packPTH "SolverResult"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriResultInfoCpuTime
        = FieldDef
            (HaskellName (packPTH "cpuTime"))
            (DBName (packPTH "cpu_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            SqlReal
            []
            True
            Nothing
      persistFieldDef LriResultInfoWallclockTime
        = FieldDef
            (HaskellName (packPTH "wallclockTime"))
            (DBName (packPTH "wallclock_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            SqlReal
            []
            True
            Nothing
      persistFieldDef LriResultInfoCheckResult
        = FieldDef
            (HaskellName (packPTH "checkResult"))
            (DBName (packPTH "check_result"))
            (FTTypeCon Nothing (packPTH "SolverResult"))
            SqlString
            [packPTH "Maybe"]
            True
            Nothing
      persistFieldDef LriResultInfoCheckCpuTime
        = FieldDef
            (HaskellName (packPTH "checkCpuTime"))
            (DBName (packPTH "check_cpu_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            SqlReal
            [packPTH "Maybe"]
            True
            Nothing
      persistFieldDef LriResultInfoCheckWallclockTime
        = FieldDef
            (HaskellName (packPTH "checkWallclockTime"))
            (DBName (packPTH "check_wallclock_time"))
            (FTTypeCon Nothing (packPTH "Double"))
            SqlReal
            [packPTH "Maybe"]
            True
            Nothing
      persistIdField = LriResultInfoId
      fieldLens LriResultInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23R0) key_a23R1
               -> Entity key_a23R1 value_a23R0)
      fieldLens LriResultInfoJobId
        = lensPTH
            (lriResultInfoJobId . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity key_a23R2 (value_a23R3 {lriResultInfoJobId = x_a23R4}))
      fieldLens LriResultInfoScore
        = lensPTH
            (lriResultInfoScore . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity key_a23R2 (value_a23R3 {lriResultInfoScore = x_a23R4}))
      fieldLens LriResultInfoPairId
        = lensPTH
            (lriResultInfoPairId . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity key_a23R2 (value_a23R3 {lriResultInfoPairId = x_a23R4}))
      fieldLens LriResultInfoBenchmarkId
        = lensPTH
            (lriResultInfoBenchmarkId . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity
                    key_a23R2 (value_a23R3 {lriResultInfoBenchmarkId = x_a23R4}))
      fieldLens LriResultInfoSolverId
        = lensPTH
            (lriResultInfoSolverId . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity
                    key_a23R2 (value_a23R3 {lriResultInfoSolverId = x_a23R4}))
      fieldLens LriResultInfoResult
        = lensPTH
            (lriResultInfoResult . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity key_a23R2 (value_a23R3 {lriResultInfoResult = x_a23R4}))
      fieldLens LriResultInfoCpuTime
        = lensPTH
            (lriResultInfoCpuTime . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity key_a23R2 (value_a23R3 {lriResultInfoCpuTime = x_a23R4}))
      fieldLens LriResultInfoWallclockTime
        = lensPTH
            (lriResultInfoWallclockTime . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity
                    key_a23R2 (value_a23R3 {lriResultInfoWallclockTime = x_a23R4}))
      fieldLens LriResultInfoCheckResult
        = lensPTH
            (lriResultInfoCheckResult . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity
                    key_a23R2 (value_a23R3 {lriResultInfoCheckResult = x_a23R4}))
      fieldLens LriResultInfoCheckCpuTime
        = lensPTH
            (lriResultInfoCheckCpuTime . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity
                    key_a23R2 (value_a23R3 {lriResultInfoCheckCpuTime = x_a23R4}))
      fieldLens LriResultInfoCheckWallclockTime
        = lensPTH
            (lriResultInfoCheckWallclockTime . entityVal)
            (\ (Entity key_a23R2 value_a23R3) x_a23R4
               -> Entity
                    key_a23R2
                    (value_a23R3 {lriResultInfoCheckWallclockTime = x_a23R4}))
    data JobPairInfo
      = JobPairInfo {jobPairInfoPairId :: !Int,
                     jobPairInfoStdout :: !ByteString,
                     jobPairInfoLog :: !ByteString,
                     jobPairInfoHtmlProof :: !(Maybe ByteString),
                     jobPairInfoResultStatus :: !JobResultStatus}
      deriving (Eq, Ord, Read, Show)
    type JobPairInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend JobPairInfo
    instance PersistEntity JobPairInfo where
      type PersistEntityBackend JobPairInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique JobPairInfo = UniqueJobPairInfo Int
      data EntityField JobPairInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend JobPairInfo =>
          JobPairInfoId |
          typ ~ Int => JobPairInfoPairId |
          typ ~ ByteString => JobPairInfoStdout |
          typ ~ ByteString => JobPairInfoLog |
          typ ~ Maybe ByteString => JobPairInfoHtmlProof |
          typ ~ JobResultStatus => JobPairInfoResultStatus
      entityDef _
        = EntityDef
            (HaskellName (packPTH "JobPairInfo"))
            (DBName (packPTH "job_pair_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "pairId"))
               (DBName (packPTH "pair_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "stdout"))
               (DBName (packPTH "stdout"))
               (FTTypeCon Nothing (packPTH "ByteString"))
               SqlBlob
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "log"))
               (DBName (packPTH "log"))
               (FTTypeCon Nothing (packPTH "ByteString"))
               SqlBlob
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "htmlProof"))
               (DBName (packPTH "html_proof"))
               (FTTypeCon Nothing (packPTH "ByteString"))
               SqlBlob
               [packPTH "Maybe"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "resultStatus"))
               (DBName (packPTH "result_status"))
               (FTTypeCon Nothing (packPTH "JobResultStatus"))
               SqlString
               [packPTH "default='JobResultUndetermined'"]
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueJobPairInfo"))
               (DBName (packPTH "unique_job_pair_info"))
               [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields
        (JobPairInfo x_a23R5 x_a23R6 x_a23R7 x_a23R8 x_a23R9)
        = [SomePersistField x_a23R5, SomePersistField x_a23R6,
           SomePersistField x_a23R7, SomePersistField x_a23R8,
           SomePersistField x_a23R9]
      fromPersistValues [x_a23Ra, x_a23Rb, x_a23Rc, x_a23Rd, x_a23Re]
        = ((((((Right JobPairInfo)
               Control.Applicative.<*>
                 (\ persistValue_a23Rf
                    -> case fromPersistValue persistValue_a23Rf of {
                         Right r_a23Rg -> Right r_a23Rg
                         Left err_a23Rh
                           -> (Left
                               $ ((("field " `Data.Monoid.mappend` (packPTH "pairId"))
                                   `Data.Monoid.mappend` ": ")
                                  `Data.Monoid.mappend` err_a23Rh)) }
                    x_a23Ra))
              Control.Applicative.<*>
                (\ persistValue_a23Ri
                   -> case fromPersistValue persistValue_a23Ri of {
                        Right r_a23Rj -> Right r_a23Rj
                        Left err_a23Rk
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "stdout"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23Rk)) }
                   x_a23Rb))
             Control.Applicative.<*>
               (\ persistValue_a23Rl
                  -> case fromPersistValue persistValue_a23Rl of {
                       Right r_a23Rm -> Right r_a23Rm
                       Left err_a23Rn
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "log"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23Rn)) }
                  x_a23Rc))
            Control.Applicative.<*>
              (\ persistValue_a23Ro
                 -> case fromPersistValue persistValue_a23Ro of {
                      Right r_a23Rp -> Right r_a23Rp
                      Left err_a23Rq
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "htmlProof"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23Rq)) }
                 x_a23Rd))
           Control.Applicative.<*>
             (\ persistValue_a23Rr
                -> case fromPersistValue persistValue_a23Rr of {
                     Right r_a23Rs -> Right r_a23Rs
                     Left err_a23Rt
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "resultStatus"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Rt)) }
                x_a23Re))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: JobPairInfo")
      persistUniqueToFieldNames (UniqueJobPairInfo {})
        = [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
      persistUniqueToValues (UniqueJobPairInfo x_a23Ru)
        = [toPersistValue x_a23Ru]
      persistUniqueKeys
        (JobPairInfo _pairId_a23Rv
                     _stdout_a23Rw
                     _log_a23Rx
                     _htmlProof_a23Ry
                     _resultStatus_a23Rz)
        = [UniqueJobPairInfo _pairId_a23Rv]
      persistFieldDef JobPairInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "JobPairInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobPairInfoPairId
        = FieldDef
            (HaskellName (packPTH "pairId"))
            (DBName (packPTH "pair_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobPairInfoStdout
        = FieldDef
            (HaskellName (packPTH "stdout"))
            (DBName (packPTH "stdout"))
            (FTTypeCon Nothing (packPTH "ByteString"))
            SqlBlob
            []
            True
            Nothing
      persistFieldDef JobPairInfoLog
        = FieldDef
            (HaskellName (packPTH "log"))
            (DBName (packPTH "log"))
            (FTTypeCon Nothing (packPTH "ByteString"))
            SqlBlob
            []
            True
            Nothing
      persistFieldDef JobPairInfoHtmlProof
        = FieldDef
            (HaskellName (packPTH "htmlProof"))
            (DBName (packPTH "html_proof"))
            (FTTypeCon Nothing (packPTH "ByteString"))
            SqlBlob
            [packPTH "Maybe"]
            True
            Nothing
      persistFieldDef JobPairInfoResultStatus
        = FieldDef
            (HaskellName (packPTH "resultStatus"))
            (DBName (packPTH "result_status"))
            (FTTypeCon Nothing (packPTH "JobResultStatus"))
            SqlString
            [packPTH "default='JobResultUndetermined'"]
            True
            Nothing
      persistIdField = JobPairInfoId
      fieldLens JobPairInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23RA) key_a23RB
               -> Entity key_a23RB value_a23RA)
      fieldLens JobPairInfoPairId
        = lensPTH
            (jobPairInfoPairId . entityVal)
            (\ (Entity key_a23RC value_a23RD) x_a23RE
               -> Entity key_a23RC (value_a23RD {jobPairInfoPairId = x_a23RE}))
      fieldLens JobPairInfoStdout
        = lensPTH
            (jobPairInfoStdout . entityVal)
            (\ (Entity key_a23RC value_a23RD) x_a23RE
               -> Entity key_a23RC (value_a23RD {jobPairInfoStdout = x_a23RE}))
      fieldLens JobPairInfoLog
        = lensPTH
            (jobPairInfoLog . entityVal)
            (\ (Entity key_a23RC value_a23RD) x_a23RE
               -> Entity key_a23RC (value_a23RD {jobPairInfoLog = x_a23RE}))
      fieldLens JobPairInfoHtmlProof
        = lensPTH
            (jobPairInfoHtmlProof . entityVal)
            (\ (Entity key_a23RC value_a23RD) x_a23RE
               -> Entity key_a23RC (value_a23RD {jobPairInfoHtmlProof = x_a23RE}))
      fieldLens JobPairInfoResultStatus
        = lensPTH
            (jobPairInfoResultStatus . entityVal)
            (\ (Entity key_a23RC value_a23RD) x_a23RE
               -> Entity
                    key_a23RC (value_a23RD {jobPairInfoResultStatus = x_a23RE}))
    data JobInfo
      = JobInfo {jobInfoStarExecId :: !Int,
                 jobInfoName :: !Text,
                 jobInfoStatus :: !JobStatus,
                 jobInfoDate :: !Text,
                 jobInfoPreProc :: !Text,
                 jobInfoPostProc :: !Text,
                 jobInfoIsComplexity :: !Bool,
                 jobInfoIsPublic :: !Bool,
                 jobInfoStartDate :: !UTCTime,
                 jobInfoFinishDate :: !(Maybe UTCTime),
                 jobInfoLastUpdate :: !UTCTime}
      deriving (Eq, Ord, Read, Show)
    type JobInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend JobInfo
    instance PersistEntity JobInfo where
      type PersistEntityBackend JobInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique JobInfo = UniqueJobInfo Int
      data EntityField JobInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend JobInfo =>
          JobInfoId |
          typ ~ Int => JobInfoStarExecId |
          typ ~ Text => JobInfoName |
          typ ~ JobStatus => JobInfoStatus |
          typ ~ Text => JobInfoDate |
          typ ~ Text => JobInfoPreProc |
          typ ~ Text => JobInfoPostProc |
          typ ~ Bool => JobInfoIsComplexity |
          typ ~ Bool => JobInfoIsPublic |
          typ ~ UTCTime => JobInfoStartDate |
          typ ~ Maybe UTCTime => JobInfoFinishDate |
          typ ~ UTCTime => JobInfoLastUpdate
      entityDef _
        = EntityDef
            (HaskellName (packPTH "JobInfo"))
            (DBName (packPTH "job_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "starExecId"))
               (DBName (packPTH "star_exec_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "name"))
               (DBName (packPTH "name"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "status"))
               (DBName (packPTH "status"))
               (FTTypeCon Nothing (packPTH "JobStatus"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "date"))
               (DBName (packPTH "date"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "preProc"))
               (DBName (packPTH "pre_proc"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               [packPTH "default='unknown'"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "postProc"))
               (DBName (packPTH "post_proc"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               [packPTH "default='unknown'"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isComplexity"))
               (DBName (packPTH "is_complexity"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               [packPTH "default=FALSE"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isPublic"))
               (DBName (packPTH "is_public"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               [packPTH "default=TRUE"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "startDate"))
               (DBName (packPTH "start_date"))
               (FTTypeCon Nothing (packPTH "UTCTime"))
               SqlDayTime
               [packPTH "default=now()"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "finishDate"))
               (DBName (packPTH "finish_date"))
               (FTTypeCon Nothing (packPTH "UTCTime"))
               SqlDayTime
               [packPTH "Maybe"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "lastUpdate"))
               (DBName (packPTH "last_update"))
               (FTTypeCon Nothing (packPTH "UTCTime"))
               SqlDayTime
               [packPTH "default=now()"]
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueJobInfo"))
               (DBName (packPTH "unique_job_info"))
               [(HaskellName (packPTH "starExecId"), 
                 DBName (packPTH "star_exec_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields
        (JobInfo x_a23RF
                 x_a23RG
                 x_a23RH
                 x_a23RI
                 x_a23RJ
                 x_a23RK
                 x_a23RL
                 x_a23RM
                 x_a23RN
                 x_a23RO
                 x_a23RP)
        = [SomePersistField x_a23RF, SomePersistField x_a23RG,
           SomePersistField x_a23RH, SomePersistField x_a23RI,
           SomePersistField x_a23RJ, SomePersistField x_a23RK,
           SomePersistField x_a23RL, SomePersistField x_a23RM,
           SomePersistField x_a23RN, SomePersistField x_a23RO,
           SomePersistField x_a23RP]
      fromPersistValues
        [x_a23RQ,
         x_a23RR,
         x_a23RS,
         x_a23RT,
         x_a23RU,
         x_a23RV,
         x_a23RW,
         x_a23RX,
         x_a23RY,
         x_a23RZ,
         x_a23S0]
        = ((((((((((((Right JobInfo)
                     Control.Applicative.<*>
                       (\ persistValue_a23S1
                          -> case fromPersistValue persistValue_a23S1 of {
                               Right r_a23S2 -> Right r_a23S2
                               Left err_a23S3
                                 -> (Left
                                     $ ((("field " `Data.Monoid.mappend` (packPTH "starExecId"))
                                         `Data.Monoid.mappend` ": ")
                                        `Data.Monoid.mappend` err_a23S3)) }
                          x_a23RQ))
                    Control.Applicative.<*>
                      (\ persistValue_a23S4
                         -> case fromPersistValue persistValue_a23S4 of {
                              Right r_a23S5 -> Right r_a23S5
                              Left err_a23S6
                                -> (Left
                                    $ ((("field " `Data.Monoid.mappend` (packPTH "name"))
                                        `Data.Monoid.mappend` ": ")
                                       `Data.Monoid.mappend` err_a23S6)) }
                         x_a23RR))
                   Control.Applicative.<*>
                     (\ persistValue_a23S7
                        -> case fromPersistValue persistValue_a23S7 of {
                             Right r_a23S8 -> Right r_a23S8
                             Left err_a23S9
                               -> (Left
                                   $ ((("field " `Data.Monoid.mappend` (packPTH "status"))
                                       `Data.Monoid.mappend` ": ")
                                      `Data.Monoid.mappend` err_a23S9)) }
                        x_a23RS))
                  Control.Applicative.<*>
                    (\ persistValue_a23Sa
                       -> case fromPersistValue persistValue_a23Sa of {
                            Right r_a23Sb -> Right r_a23Sb
                            Left err_a23Sc
                              -> (Left
                                  $ ((("field " `Data.Monoid.mappend` (packPTH "date"))
                                      `Data.Monoid.mappend` ": ")
                                     `Data.Monoid.mappend` err_a23Sc)) }
                       x_a23RT))
                 Control.Applicative.<*>
                   (\ persistValue_a23Sd
                      -> case fromPersistValue persistValue_a23Sd of {
                           Right r_a23Se -> Right r_a23Se
                           Left err_a23Sf
                             -> (Left
                                 $ ((("field " `Data.Monoid.mappend` (packPTH "preProc"))
                                     `Data.Monoid.mappend` ": ")
                                    `Data.Monoid.mappend` err_a23Sf)) }
                      x_a23RU))
                Control.Applicative.<*>
                  (\ persistValue_a23Sg
                     -> case fromPersistValue persistValue_a23Sg of {
                          Right r_a23Sh -> Right r_a23Sh
                          Left err_a23Si
                            -> (Left
                                $ ((("field " `Data.Monoid.mappend` (packPTH "postProc"))
                                    `Data.Monoid.mappend` ": ")
                                   `Data.Monoid.mappend` err_a23Si)) }
                     x_a23RV))
               Control.Applicative.<*>
                 (\ persistValue_a23Sj
                    -> case fromPersistValue persistValue_a23Sj of {
                         Right r_a23Sk -> Right r_a23Sk
                         Left err_a23Sl
                           -> (Left
                               $ ((("field " `Data.Monoid.mappend` (packPTH "isComplexity"))
                                   `Data.Monoid.mappend` ": ")
                                  `Data.Monoid.mappend` err_a23Sl)) }
                    x_a23RW))
              Control.Applicative.<*>
                (\ persistValue_a23Sm
                   -> case fromPersistValue persistValue_a23Sm of {
                        Right r_a23Sn -> Right r_a23Sn
                        Left err_a23So
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "isPublic"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23So)) }
                   x_a23RX))
             Control.Applicative.<*>
               (\ persistValue_a23Sp
                  -> case fromPersistValue persistValue_a23Sp of {
                       Right r_a23Sq -> Right r_a23Sq
                       Left err_a23Sr
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "startDate"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23Sr)) }
                  x_a23RY))
            Control.Applicative.<*>
              (\ persistValue_a23Ss
                 -> case fromPersistValue persistValue_a23Ss of {
                      Right r_a23St -> Right r_a23St
                      Left err_a23Su
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "finishDate"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23Su)) }
                 x_a23RZ))
           Control.Applicative.<*>
             (\ persistValue_a23Sv
                -> case fromPersistValue persistValue_a23Sv of {
                     Right r_a23Sw -> Right r_a23Sw
                     Left err_a23Sx
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "lastUpdate"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Sx)) }
                x_a23S0))
      fromPersistValues _
        = Left (packPTH "Invalid fromPersistValues input. Entity: JobInfo")
      persistUniqueToFieldNames (UniqueJobInfo {})
        = [(HaskellName (packPTH "starExecId"), 
            DBName (packPTH "star_exec_id"))]
      persistUniqueToValues (UniqueJobInfo x_a23Sy)
        = [toPersistValue x_a23Sy]
      persistUniqueKeys
        (JobInfo _starExecId_a23Sz
                 _name_a23SA
                 _status_a23SB
                 _date_a23SC
                 _preProc_a23SD
                 _postProc_a23SE
                 _isComplexity_a23SF
                 _isPublic_a23SG
                 _startDate_a23SH
                 _finishDate_a23SI
                 _lastUpdate_a23SJ)
        = [UniqueJobInfo _starExecId_a23Sz]
      persistFieldDef JobInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "JobInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobInfoStarExecId
        = FieldDef
            (HaskellName (packPTH "starExecId"))
            (DBName (packPTH "star_exec_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef JobInfoName
        = FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef JobInfoStatus
        = FieldDef
            (HaskellName (packPTH "status"))
            (DBName (packPTH "status"))
            (FTTypeCon Nothing (packPTH "JobStatus"))
            SqlString
            []
            True
            Nothing
      persistFieldDef JobInfoDate
        = FieldDef
            (HaskellName (packPTH "date"))
            (DBName (packPTH "date"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef JobInfoPreProc
        = FieldDef
            (HaskellName (packPTH "preProc"))
            (DBName (packPTH "pre_proc"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            [packPTH "default='unknown'"]
            True
            Nothing
      persistFieldDef JobInfoPostProc
        = FieldDef
            (HaskellName (packPTH "postProc"))
            (DBName (packPTH "post_proc"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            [packPTH "default='unknown'"]
            True
            Nothing
      persistFieldDef JobInfoIsComplexity
        = FieldDef
            (HaskellName (packPTH "isComplexity"))
            (DBName (packPTH "is_complexity"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            [packPTH "default=FALSE"]
            True
            Nothing
      persistFieldDef JobInfoIsPublic
        = FieldDef
            (HaskellName (packPTH "isPublic"))
            (DBName (packPTH "is_public"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            [packPTH "default=TRUE"]
            True
            Nothing
      persistFieldDef JobInfoStartDate
        = FieldDef
            (HaskellName (packPTH "startDate"))
            (DBName (packPTH "start_date"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            SqlDayTime
            [packPTH "default=now()"]
            True
            Nothing
      persistFieldDef JobInfoFinishDate
        = FieldDef
            (HaskellName (packPTH "finishDate"))
            (DBName (packPTH "finish_date"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            SqlDayTime
            [packPTH "Maybe"]
            True
            Nothing
      persistFieldDef JobInfoLastUpdate
        = FieldDef
            (HaskellName (packPTH "lastUpdate"))
            (DBName (packPTH "last_update"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            SqlDayTime
            [packPTH "default=now()"]
            True
            Nothing
      persistIdField = JobInfoId
      fieldLens JobInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23SK) key_a23SL
               -> Entity key_a23SL value_a23SK)
      fieldLens JobInfoStarExecId
        = lensPTH
            (jobInfoStarExecId . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoStarExecId = x_a23SO}))
      fieldLens JobInfoName
        = lensPTH
            (jobInfoName . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoName = x_a23SO}))
      fieldLens JobInfoStatus
        = lensPTH
            (jobInfoStatus . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoStatus = x_a23SO}))
      fieldLens JobInfoDate
        = lensPTH
            (jobInfoDate . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoDate = x_a23SO}))
      fieldLens JobInfoPreProc
        = lensPTH
            (jobInfoPreProc . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoPreProc = x_a23SO}))
      fieldLens JobInfoPostProc
        = lensPTH
            (jobInfoPostProc . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoPostProc = x_a23SO}))
      fieldLens JobInfoIsComplexity
        = lensPTH
            (jobInfoIsComplexity . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoIsComplexity = x_a23SO}))
      fieldLens JobInfoIsPublic
        = lensPTH
            (jobInfoIsPublic . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoIsPublic = x_a23SO}))
      fieldLens JobInfoStartDate
        = lensPTH
            (jobInfoStartDate . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoStartDate = x_a23SO}))
      fieldLens JobInfoFinishDate
        = lensPTH
            (jobInfoFinishDate . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoFinishDate = x_a23SO}))
      fieldLens JobInfoLastUpdate
        = lensPTH
            (jobInfoLastUpdate . entityVal)
            (\ (Entity key_a23SM value_a23SN) x_a23SO
               -> Entity key_a23SM (value_a23SN {jobInfoLastUpdate = x_a23SO}))
    data LriJobInfo
      = LriJobInfo {lriJobInfoJobId :: !Text, lriJobInfoName :: !Text}
      deriving (Eq, Ord, Read, Show)
    type LriJobInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend LriJobInfo
    instance PersistEntity LriJobInfo where
      type PersistEntityBackend LriJobInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique LriJobInfo = UniqueLriJobInfo Text
      data EntityField LriJobInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend LriJobInfo =>
          LriJobInfoId |
          typ ~ Text => LriJobInfoJobId |
          typ ~ Text => LriJobInfoName
      entityDef _
        = EntityDef
            (HaskellName (packPTH "LriJobInfo"))
            (DBName (packPTH "lri_job_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "jobId"))
               (DBName (packPTH "job_id"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "name"))
               (DBName (packPTH "name"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueLriJobInfo"))
               (DBName (packPTH "unique_lri_job_info"))
               [(HaskellName (packPTH "jobId"), DBName (packPTH "job_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields (LriJobInfo x_a23SP x_a23SQ)
        = [SomePersistField x_a23SP, SomePersistField x_a23SQ]
      fromPersistValues [x_a23SR, x_a23SS]
        = (((Right LriJobInfo)
            Control.Applicative.<*>
              (\ persistValue_a23ST
                 -> case fromPersistValue persistValue_a23ST of {
                      Right r_a23SU -> Right r_a23SU
                      Left err_a23SV
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "jobId"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23SV)) }
                 x_a23SR))
           Control.Applicative.<*>
             (\ persistValue_a23SW
                -> case fromPersistValue persistValue_a23SW of {
                     Right r_a23SX -> Right r_a23SX
                     Left err_a23SY
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "name"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23SY)) }
                x_a23SS))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: LriJobInfo")
      persistUniqueToFieldNames (UniqueLriJobInfo {})
        = [(HaskellName (packPTH "jobId"), DBName (packPTH "job_id"))]
      persistUniqueToValues (UniqueLriJobInfo x_a23SZ)
        = [toPersistValue x_a23SZ]
      persistUniqueKeys (LriJobInfo _jobId_a23T0 _name_a23T1)
        = [UniqueLriJobInfo _jobId_a23T0]
      persistFieldDef LriJobInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "LriJobInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef LriJobInfoJobId
        = FieldDef
            (HaskellName (packPTH "jobId"))
            (DBName (packPTH "job_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriJobInfoName
        = FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistIdField = LriJobInfoId
      fieldLens LriJobInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23T2) key_a23T3
               -> Entity key_a23T3 value_a23T2)
      fieldLens LriJobInfoJobId
        = lensPTH
            (lriJobInfoJobId . entityVal)
            (\ (Entity key_a23T4 value_a23T5) x_a23T6
               -> Entity key_a23T4 (value_a23T5 {lriJobInfoJobId = x_a23T6}))
      fieldLens LriJobInfoName
        = lensPTH
            (lriJobInfoName . entityVal)
            (\ (Entity key_a23T4 value_a23T5) x_a23T6
               -> Entity key_a23T4 (value_a23T5 {lriJobInfoName = x_a23T6}))
    data SolverInfo
      = SolverInfo {solverInfoStarExecId :: !Int,
                    solverInfoName :: !Text,
                    solverInfoDescription :: !Text,
                    solverInfoLastUpdate :: !UTCTime}
      deriving (Eq, Ord, Read, Show)
    type SolverInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend SolverInfo
    instance PersistEntity SolverInfo where
      type PersistEntityBackend SolverInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique SolverInfo = UniqueSolverInfo Int
      data EntityField SolverInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend SolverInfo =>
          SolverInfoId |
          typ ~ Int => SolverInfoStarExecId |
          typ ~ Text => SolverInfoName |
          typ ~ Text => SolverInfoDescription |
          typ ~ UTCTime => SolverInfoLastUpdate
      entityDef _
        = EntityDef
            (HaskellName (packPTH "SolverInfo"))
            (DBName (packPTH "solver_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "starExecId"))
               (DBName (packPTH "star_exec_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "name"))
               (DBName (packPTH "name"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "description"))
               (DBName (packPTH "description"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "lastUpdate"))
               (DBName (packPTH "last_update"))
               (FTTypeCon Nothing (packPTH "UTCTime"))
               SqlDayTime
               [packPTH "default=now()"]
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueSolverInfo"))
               (DBName (packPTH "unique_solver_info"))
               [(HaskellName (packPTH "starExecId"), 
                 DBName (packPTH "star_exec_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields (SolverInfo x_a23T7 x_a23T8 x_a23T9 x_a23Ta)
        = [SomePersistField x_a23T7, SomePersistField x_a23T8,
           SomePersistField x_a23T9, SomePersistField x_a23Ta]
      fromPersistValues [x_a23Tb, x_a23Tc, x_a23Td, x_a23Te]
        = (((((Right SolverInfo)
              Control.Applicative.<*>
                (\ persistValue_a23Tf
                   -> case fromPersistValue persistValue_a23Tf of {
                        Right r_a23Tg -> Right r_a23Tg
                        Left err_a23Th
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "starExecId"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23Th)) }
                   x_a23Tb))
             Control.Applicative.<*>
               (\ persistValue_a23Ti
                  -> case fromPersistValue persistValue_a23Ti of {
                       Right r_a23Tj -> Right r_a23Tj
                       Left err_a23Tk
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "name"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23Tk)) }
                  x_a23Tc))
            Control.Applicative.<*>
              (\ persistValue_a23Tl
                 -> case fromPersistValue persistValue_a23Tl of {
                      Right r_a23Tm -> Right r_a23Tm
                      Left err_a23Tn
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "description"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23Tn)) }
                 x_a23Td))
           Control.Applicative.<*>
             (\ persistValue_a23To
                -> case fromPersistValue persistValue_a23To of {
                     Right r_a23Tp -> Right r_a23Tp
                     Left err_a23Tq
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "lastUpdate"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Tq)) }
                x_a23Te))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: SolverInfo")
      persistUniqueToFieldNames (UniqueSolverInfo {})
        = [(HaskellName (packPTH "starExecId"), 
            DBName (packPTH "star_exec_id"))]
      persistUniqueToValues (UniqueSolverInfo x_a23Tr)
        = [toPersistValue x_a23Tr]
      persistUniqueKeys
        (SolverInfo _starExecId_a23Ts
                    _name_a23Tt
                    _description_a23Tu
                    _lastUpdate_a23Tv)
        = [UniqueSolverInfo _starExecId_a23Ts]
      persistFieldDef SolverInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "SolverInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef SolverInfoStarExecId
        = FieldDef
            (HaskellName (packPTH "starExecId"))
            (DBName (packPTH "star_exec_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef SolverInfoName
        = FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef SolverInfoDescription
        = FieldDef
            (HaskellName (packPTH "description"))
            (DBName (packPTH "description"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef SolverInfoLastUpdate
        = FieldDef
            (HaskellName (packPTH "lastUpdate"))
            (DBName (packPTH "last_update"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            SqlDayTime
            [packPTH "default=now()"]
            True
            Nothing
      persistIdField = SolverInfoId
      fieldLens SolverInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23Tw) key_a23Tx
               -> Entity key_a23Tx value_a23Tw)
      fieldLens SolverInfoStarExecId
        = lensPTH
            (solverInfoStarExecId . entityVal)
            (\ (Entity key_a23Ty value_a23Tz) x_a23TA
               -> Entity key_a23Ty (value_a23Tz {solverInfoStarExecId = x_a23TA}))
      fieldLens SolverInfoName
        = lensPTH
            (solverInfoName . entityVal)
            (\ (Entity key_a23Ty value_a23Tz) x_a23TA
               -> Entity key_a23Ty (value_a23Tz {solverInfoName = x_a23TA}))
      fieldLens SolverInfoDescription
        = lensPTH
            (solverInfoDescription . entityVal)
            (\ (Entity key_a23Ty value_a23Tz) x_a23TA
               -> Entity
                    key_a23Ty (value_a23Tz {solverInfoDescription = x_a23TA}))
      fieldLens SolverInfoLastUpdate
        = lensPTH
            (solverInfoLastUpdate . entityVal)
            (\ (Entity key_a23Ty value_a23Tz) x_a23TA
               -> Entity key_a23Ty (value_a23Tz {solverInfoLastUpdate = x_a23TA}))
    data LriSolverInfo
      = LriSolverInfo {lriSolverInfoSolverId :: !Text,
                       lriSolverInfoName :: !Text,
                       lriSolverInfoAuthor :: !Text,
                       lriSolverInfoDescription :: !Text,
                       lriSolverInfoUrl :: !Text,
                       lriSolverInfoIsStandard :: !Bool,
                       lriSolverInfoIsRelative :: !Bool,
                       lriSolverInfoIsConditional :: !Bool,
                       lriSolverInfoIsContextSensitive :: !Bool,
                       lriSolverInfoIsInnermost :: !Bool,
                       lriSolverInfoIsTheory :: !Bool,
                       lriSolverInfoIsCertifying :: !Bool}
      deriving (Eq, Ord, Read, Show)
    type LriSolverInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend LriSolverInfo
    instance PersistEntity LriSolverInfo where
      type PersistEntityBackend LriSolverInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique LriSolverInfo = UniqueLriSolverInfo Text
      data EntityField LriSolverInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend LriSolverInfo =>
          LriSolverInfoId |
          typ ~ Text => LriSolverInfoSolverId |
          typ ~ Text => LriSolverInfoName |
          typ ~ Text => LriSolverInfoAuthor |
          typ ~ Text => LriSolverInfoDescription |
          typ ~ Text => LriSolverInfoUrl |
          typ ~ Bool => LriSolverInfoIsStandard |
          typ ~ Bool => LriSolverInfoIsRelative |
          typ ~ Bool => LriSolverInfoIsConditional |
          typ ~ Bool => LriSolverInfoIsContextSensitive |
          typ ~ Bool => LriSolverInfoIsInnermost |
          typ ~ Bool => LriSolverInfoIsTheory |
          typ ~ Bool => LriSolverInfoIsCertifying
      entityDef _
        = EntityDef
            (HaskellName (packPTH "LriSolverInfo"))
            (DBName (packPTH "lri_solver_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "solverId"))
               (DBName (packPTH "solver_id"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "name"))
               (DBName (packPTH "name"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "author"))
               (DBName (packPTH "author"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "description"))
               (DBName (packPTH "description"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "url"))
               (DBName (packPTH "url"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isStandard"))
               (DBName (packPTH "is_standard"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isRelative"))
               (DBName (packPTH "is_relative"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isConditional"))
               (DBName (packPTH "is_conditional"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isContextSensitive"))
               (DBName (packPTH "is_context_sensitive"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isInnermost"))
               (DBName (packPTH "is_innermost"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isTheory"))
               (DBName (packPTH "is_theory"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isCertifying"))
               (DBName (packPTH "is_certifying"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueLriSolverInfo"))
               (DBName (packPTH "unique_lri_solver_info"))
               [(HaskellName (packPTH "solverId"), DBName (packPTH "solver_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields
        (LriSolverInfo x_a23TB
                       x_a23TC
                       x_a23TD
                       x_a23TE
                       x_a23TF
                       x_a23TG
                       x_a23TH
                       x_a23TI
                       x_a23TJ
                       x_a23TK
                       x_a23TL
                       x_a23TM)
        = [SomePersistField x_a23TB, SomePersistField x_a23TC,
           SomePersistField x_a23TD, SomePersistField x_a23TE,
           SomePersistField x_a23TF, SomePersistField x_a23TG,
           SomePersistField x_a23TH, SomePersistField x_a23TI,
           SomePersistField x_a23TJ, SomePersistField x_a23TK,
           SomePersistField x_a23TL, SomePersistField x_a23TM]
      fromPersistValues
        [x_a23TN,
         x_a23TO,
         x_a23TP,
         x_a23TQ,
         x_a23TR,
         x_a23TS,
         x_a23TT,
         x_a23TU,
         x_a23TV,
         x_a23TW,
         x_a23TX,
         x_a23TY]
        = (((((((((((((Right LriSolverInfo)
                      Control.Applicative.<*>
                        (\ persistValue_a23TZ
                           -> case fromPersistValue persistValue_a23TZ of {
                                Right r_a23U0 -> Right r_a23U0
                                Left err_a23U1
                                  -> (Left
                                      $ ((("field " `Data.Monoid.mappend` (packPTH "solverId"))
                                          `Data.Monoid.mappend` ": ")
                                         `Data.Monoid.mappend` err_a23U1)) }
                           x_a23TN))
                     Control.Applicative.<*>
                       (\ persistValue_a23U2
                          -> case fromPersistValue persistValue_a23U2 of {
                               Right r_a23U3 -> Right r_a23U3
                               Left err_a23U4
                                 -> (Left
                                     $ ((("field " `Data.Monoid.mappend` (packPTH "name"))
                                         `Data.Monoid.mappend` ": ")
                                        `Data.Monoid.mappend` err_a23U4)) }
                          x_a23TO))
                    Control.Applicative.<*>
                      (\ persistValue_a23U5
                         -> case fromPersistValue persistValue_a23U5 of {
                              Right r_a23U6 -> Right r_a23U6
                              Left err_a23U7
                                -> (Left
                                    $ ((("field " `Data.Monoid.mappend` (packPTH "author"))
                                        `Data.Monoid.mappend` ": ")
                                       `Data.Monoid.mappend` err_a23U7)) }
                         x_a23TP))
                   Control.Applicative.<*>
                     (\ persistValue_a23U8
                        -> case fromPersistValue persistValue_a23U8 of {
                             Right r_a23U9 -> Right r_a23U9
                             Left err_a23Ua
                               -> (Left
                                   $ ((("field " `Data.Monoid.mappend` (packPTH "description"))
                                       `Data.Monoid.mappend` ": ")
                                      `Data.Monoid.mappend` err_a23Ua)) }
                        x_a23TQ))
                  Control.Applicative.<*>
                    (\ persistValue_a23Ub
                       -> case fromPersistValue persistValue_a23Ub of {
                            Right r_a23Uc -> Right r_a23Uc
                            Left err_a23Ud
                              -> (Left
                                  $ ((("field " `Data.Monoid.mappend` (packPTH "url"))
                                      `Data.Monoid.mappend` ": ")
                                     `Data.Monoid.mappend` err_a23Ud)) }
                       x_a23TR))
                 Control.Applicative.<*>
                   (\ persistValue_a23Ue
                      -> case fromPersistValue persistValue_a23Ue of {
                           Right r_a23Uf -> Right r_a23Uf
                           Left err_a23Ug
                             -> (Left
                                 $ ((("field " `Data.Monoid.mappend` (packPTH "isStandard"))
                                     `Data.Monoid.mappend` ": ")
                                    `Data.Monoid.mappend` err_a23Ug)) }
                      x_a23TS))
                Control.Applicative.<*>
                  (\ persistValue_a23Uh
                     -> case fromPersistValue persistValue_a23Uh of {
                          Right r_a23Ui -> Right r_a23Ui
                          Left err_a23Uj
                            -> (Left
                                $ ((("field " `Data.Monoid.mappend` (packPTH "isRelative"))
                                    `Data.Monoid.mappend` ": ")
                                   `Data.Monoid.mappend` err_a23Uj)) }
                     x_a23TT))
               Control.Applicative.<*>
                 (\ persistValue_a23Uk
                    -> case fromPersistValue persistValue_a23Uk of {
                         Right r_a23Ul -> Right r_a23Ul
                         Left err_a23Um
                           -> (Left
                               $ ((("field " `Data.Monoid.mappend` (packPTH "isConditional"))
                                   `Data.Monoid.mappend` ": ")
                                  `Data.Monoid.mappend` err_a23Um)) }
                    x_a23TU))
              Control.Applicative.<*>
                (\ persistValue_a23Un
                   -> case fromPersistValue persistValue_a23Un of {
                        Right r_a23Uo -> Right r_a23Uo
                        Left err_a23Up
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "isContextSensitive"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23Up)) }
                   x_a23TV))
             Control.Applicative.<*>
               (\ persistValue_a23Uq
                  -> case fromPersistValue persistValue_a23Uq of {
                       Right r_a23Ur -> Right r_a23Ur
                       Left err_a23Us
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "isInnermost"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23Us)) }
                  x_a23TW))
            Control.Applicative.<*>
              (\ persistValue_a23Ut
                 -> case fromPersistValue persistValue_a23Ut of {
                      Right r_a23Uu -> Right r_a23Uu
                      Left err_a23Uv
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "isTheory"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23Uv)) }
                 x_a23TX))
           Control.Applicative.<*>
             (\ persistValue_a23Uw
                -> case fromPersistValue persistValue_a23Uw of {
                     Right r_a23Ux -> Right r_a23Ux
                     Left err_a23Uy
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "isCertifying"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Uy)) }
                x_a23TY))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: LriSolverInfo")
      persistUniqueToFieldNames (UniqueLriSolverInfo {})
        = [(HaskellName (packPTH "solverId"), 
            DBName (packPTH "solver_id"))]
      persistUniqueToValues (UniqueLriSolverInfo x_a23Uz)
        = [toPersistValue x_a23Uz]
      persistUniqueKeys
        (LriSolverInfo _solverId_a23UA
                       _name_a23UB
                       _author_a23UC
                       _description_a23UD
                       _url_a23UE
                       _isStandard_a23UF
                       _isRelative_a23UG
                       _isConditional_a23UH
                       _isContextSensitive_a23UI
                       _isInnermost_a23UJ
                       _isTheory_a23UK
                       _isCertifying_a23UL)
        = [UniqueLriSolverInfo _solverId_a23UA]
      persistFieldDef LriSolverInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "LriSolverInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef LriSolverInfoSolverId
        = FieldDef
            (HaskellName (packPTH "solverId"))
            (DBName (packPTH "solver_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriSolverInfoName
        = FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriSolverInfoAuthor
        = FieldDef
            (HaskellName (packPTH "author"))
            (DBName (packPTH "author"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriSolverInfoDescription
        = FieldDef
            (HaskellName (packPTH "description"))
            (DBName (packPTH "description"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriSolverInfoUrl
        = FieldDef
            (HaskellName (packPTH "url"))
            (DBName (packPTH "url"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriSolverInfoIsStandard
        = FieldDef
            (HaskellName (packPTH "isStandard"))
            (DBName (packPTH "is_standard"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriSolverInfoIsRelative
        = FieldDef
            (HaskellName (packPTH "isRelative"))
            (DBName (packPTH "is_relative"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriSolverInfoIsConditional
        = FieldDef
            (HaskellName (packPTH "isConditional"))
            (DBName (packPTH "is_conditional"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriSolverInfoIsContextSensitive
        = FieldDef
            (HaskellName (packPTH "isContextSensitive"))
            (DBName (packPTH "is_context_sensitive"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriSolverInfoIsInnermost
        = FieldDef
            (HaskellName (packPTH "isInnermost"))
            (DBName (packPTH "is_innermost"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriSolverInfoIsTheory
        = FieldDef
            (HaskellName (packPTH "isTheory"))
            (DBName (packPTH "is_theory"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriSolverInfoIsCertifying
        = FieldDef
            (HaskellName (packPTH "isCertifying"))
            (DBName (packPTH "is_certifying"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistIdField = LriSolverInfoId
      fieldLens LriSolverInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23UM) key_a23UN
               -> Entity key_a23UN value_a23UM)
      fieldLens LriSolverInfoSolverId
        = lensPTH
            (lriSolverInfoSolverId . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO (value_a23UP {lriSolverInfoSolverId = x_a23UQ}))
      fieldLens LriSolverInfoName
        = lensPTH
            (lriSolverInfoName . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity key_a23UO (value_a23UP {lriSolverInfoName = x_a23UQ}))
      fieldLens LriSolverInfoAuthor
        = lensPTH
            (lriSolverInfoAuthor . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity key_a23UO (value_a23UP {lriSolverInfoAuthor = x_a23UQ}))
      fieldLens LriSolverInfoDescription
        = lensPTH
            (lriSolverInfoDescription . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO (value_a23UP {lriSolverInfoDescription = x_a23UQ}))
      fieldLens LriSolverInfoUrl
        = lensPTH
            (lriSolverInfoUrl . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity key_a23UO (value_a23UP {lriSolverInfoUrl = x_a23UQ}))
      fieldLens LriSolverInfoIsStandard
        = lensPTH
            (lriSolverInfoIsStandard . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO (value_a23UP {lriSolverInfoIsStandard = x_a23UQ}))
      fieldLens LriSolverInfoIsRelative
        = lensPTH
            (lriSolverInfoIsRelative . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO (value_a23UP {lriSolverInfoIsRelative = x_a23UQ}))
      fieldLens LriSolverInfoIsConditional
        = lensPTH
            (lriSolverInfoIsConditional . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO (value_a23UP {lriSolverInfoIsConditional = x_a23UQ}))
      fieldLens LriSolverInfoIsContextSensitive
        = lensPTH
            (lriSolverInfoIsContextSensitive . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO
                    (value_a23UP {lriSolverInfoIsContextSensitive = x_a23UQ}))
      fieldLens LriSolverInfoIsInnermost
        = lensPTH
            (lriSolverInfoIsInnermost . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO (value_a23UP {lriSolverInfoIsInnermost = x_a23UQ}))
      fieldLens LriSolverInfoIsTheory
        = lensPTH
            (lriSolverInfoIsTheory . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO (value_a23UP {lriSolverInfoIsTheory = x_a23UQ}))
      fieldLens LriSolverInfoIsCertifying
        = lensPTH
            (lriSolverInfoIsCertifying . entityVal)
            (\ (Entity key_a23UO value_a23UP) x_a23UQ
               -> Entity
                    key_a23UO (value_a23UP {lriSolverInfoIsCertifying = x_a23UQ}))
    data BenchmarkInfo
      = BenchmarkInfo {benchmarkInfoStarExecId :: !Int,
                       benchmarkInfoName :: !Text,
                       benchmarkInfoType :: !Text,
                       benchmarkInfoLastUpdate :: !UTCTime}
      deriving (Eq, Ord, Read, Show)
    type BenchmarkInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend BenchmarkInfo
    instance PersistEntity BenchmarkInfo where
      type PersistEntityBackend BenchmarkInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique BenchmarkInfo = UniqueBenchmarkInfo Int
      data EntityField BenchmarkInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend BenchmarkInfo =>
          BenchmarkInfoId |
          typ ~ Int => BenchmarkInfoStarExecId |
          typ ~ Text => BenchmarkInfoName |
          typ ~ Text => BenchmarkInfoType |
          typ ~ UTCTime => BenchmarkInfoLastUpdate
      entityDef _
        = EntityDef
            (HaskellName (packPTH "BenchmarkInfo"))
            (DBName (packPTH "benchmark_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "starExecId"))
               (DBName (packPTH "star_exec_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "name"))
               (DBName (packPTH "name"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "type"))
               (DBName (packPTH "type"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "lastUpdate"))
               (DBName (packPTH "last_update"))
               (FTTypeCon Nothing (packPTH "UTCTime"))
               SqlDayTime
               [packPTH "default=now()"]
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueBenchmarkInfo"))
               (DBName (packPTH "unique_benchmark_info"))
               [(HaskellName (packPTH "starExecId"), 
                 DBName (packPTH "star_exec_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields (BenchmarkInfo x_a23UR x_a23US x_a23UT x_a23UU)
        = [SomePersistField x_a23UR, SomePersistField x_a23US,
           SomePersistField x_a23UT, SomePersistField x_a23UU]
      fromPersistValues [x_a23UV, x_a23UW, x_a23UX, x_a23UY]
        = (((((Right BenchmarkInfo)
              Control.Applicative.<*>
                (\ persistValue_a23UZ
                   -> case fromPersistValue persistValue_a23UZ of {
                        Right r_a23V0 -> Right r_a23V0
                        Left err_a23V1
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "starExecId"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23V1)) }
                   x_a23UV))
             Control.Applicative.<*>
               (\ persistValue_a23V2
                  -> case fromPersistValue persistValue_a23V2 of {
                       Right r_a23V3 -> Right r_a23V3
                       Left err_a23V4
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "name"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23V4)) }
                  x_a23UW))
            Control.Applicative.<*>
              (\ persistValue_a23V5
                 -> case fromPersistValue persistValue_a23V5 of {
                      Right r_a23V6 -> Right r_a23V6
                      Left err_a23V7
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "type"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23V7)) }
                 x_a23UX))
           Control.Applicative.<*>
             (\ persistValue_a23V8
                -> case fromPersistValue persistValue_a23V8 of {
                     Right r_a23V9 -> Right r_a23V9
                     Left err_a23Va
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "lastUpdate"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Va)) }
                x_a23UY))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: BenchmarkInfo")
      persistUniqueToFieldNames (UniqueBenchmarkInfo {})
        = [(HaskellName (packPTH "starExecId"), 
            DBName (packPTH "star_exec_id"))]
      persistUniqueToValues (UniqueBenchmarkInfo x_a23Vb)
        = [toPersistValue x_a23Vb]
      persistUniqueKeys
        (BenchmarkInfo _starExecId_a23Vc
                       _name_a23Vd
                       _type_a23Ve
                       _lastUpdate_a23Vf)
        = [UniqueBenchmarkInfo _starExecId_a23Vc]
      persistFieldDef BenchmarkInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "BenchmarkInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef BenchmarkInfoStarExecId
        = FieldDef
            (HaskellName (packPTH "starExecId"))
            (DBName (packPTH "star_exec_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef BenchmarkInfoName
        = FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef BenchmarkInfoType
        = FieldDef
            (HaskellName (packPTH "type"))
            (DBName (packPTH "type"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef BenchmarkInfoLastUpdate
        = FieldDef
            (HaskellName (packPTH "lastUpdate"))
            (DBName (packPTH "last_update"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            SqlDayTime
            [packPTH "default=now()"]
            True
            Nothing
      persistIdField = BenchmarkInfoId
      fieldLens BenchmarkInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23Vg) key_a23Vh
               -> Entity key_a23Vh value_a23Vg)
      fieldLens BenchmarkInfoStarExecId
        = lensPTH
            (benchmarkInfoStarExecId . entityVal)
            (\ (Entity key_a23Vi value_a23Vj) x_a23Vk
               -> Entity
                    key_a23Vi (value_a23Vj {benchmarkInfoStarExecId = x_a23Vk}))
      fieldLens BenchmarkInfoName
        = lensPTH
            (benchmarkInfoName . entityVal)
            (\ (Entity key_a23Vi value_a23Vj) x_a23Vk
               -> Entity key_a23Vi (value_a23Vj {benchmarkInfoName = x_a23Vk}))
      fieldLens BenchmarkInfoType
        = lensPTH
            (benchmarkInfoType . entityVal)
            (\ (Entity key_a23Vi value_a23Vj) x_a23Vk
               -> Entity key_a23Vi (value_a23Vj {benchmarkInfoType = x_a23Vk}))
      fieldLens BenchmarkInfoLastUpdate
        = lensPTH
            (benchmarkInfoLastUpdate . entityVal)
            (\ (Entity key_a23Vi value_a23Vj) x_a23Vk
               -> Entity
                    key_a23Vi (value_a23Vj {benchmarkInfoLastUpdate = x_a23Vk}))
    data LriBenchmarkInfo
      = LriBenchmarkInfo {lriBenchmarkInfoBenchmarkId :: !Text,
                          lriBenchmarkInfoName :: !Text,
                          lriBenchmarkInfoFile :: !Text,
                          lriBenchmarkInfoRating :: !Int,
                          lriBenchmarkInfoSolved :: !Int,
                          lriBenchmarkInfoIsConditional :: !Bool,
                          lriBenchmarkInfoIsContextSensitive :: !Bool,
                          lriBenchmarkInfoIsInnermost :: !Bool,
                          lriBenchmarkInfoIsOutermost :: !Bool,
                          lriBenchmarkInfoIsRelative :: !Bool,
                          lriBenchmarkInfoIsTheory :: !Bool}
      deriving (Eq, Ord, Read, Show)
    type LriBenchmarkInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend LriBenchmarkInfo
    instance PersistEntity LriBenchmarkInfo where
      type PersistEntityBackend LriBenchmarkInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique LriBenchmarkInfo = UniqueLriBenchmarkInfo Text
      data EntityField LriBenchmarkInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend LriBenchmarkInfo =>
          LriBenchmarkInfoId |
          typ ~ Text => LriBenchmarkInfoBenchmarkId |
          typ ~ Text => LriBenchmarkInfoName |
          typ ~ Text => LriBenchmarkInfoFile |
          typ ~ Int => LriBenchmarkInfoRating |
          typ ~ Int => LriBenchmarkInfoSolved |
          typ ~ Bool => LriBenchmarkInfoIsConditional |
          typ ~ Bool => LriBenchmarkInfoIsContextSensitive |
          typ ~ Bool => LriBenchmarkInfoIsInnermost |
          typ ~ Bool => LriBenchmarkInfoIsOutermost |
          typ ~ Bool => LriBenchmarkInfoIsRelative |
          typ ~ Bool => LriBenchmarkInfoIsTheory
      entityDef _
        = EntityDef
            (HaskellName (packPTH "LriBenchmarkInfo"))
            (DBName (packPTH "lri_benchmark_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "benchmarkId"))
               (DBName (packPTH "benchmark_id"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "name"))
               (DBName (packPTH "name"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "file"))
               (DBName (packPTH "file"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "rating"))
               (DBName (packPTH "rating"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "solved"))
               (DBName (packPTH "solved"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isConditional"))
               (DBName (packPTH "is_conditional"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isContextSensitive"))
               (DBName (packPTH "is_context_sensitive"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isInnermost"))
               (DBName (packPTH "is_innermost"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isOutermost"))
               (DBName (packPTH "is_outermost"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isRelative"))
               (DBName (packPTH "is_relative"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "isTheory"))
               (DBName (packPTH "is_theory"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               []
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueLriBenchmarkInfo"))
               (DBName (packPTH "unique_lri_benchmark_info"))
               [(HaskellName (packPTH "benchmarkId"), 
                 DBName (packPTH "benchmark_id"))]
               []]
            []
            [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields
        (LriBenchmarkInfo x_a23Vl
                          x_a23Vm
                          x_a23Vn
                          x_a23Vo
                          x_a23Vp
                          x_a23Vq
                          x_a23Vr
                          x_a23Vs
                          x_a23Vt
                          x_a23Vu
                          x_a23Vv)
        = [SomePersistField x_a23Vl, SomePersistField x_a23Vm,
           SomePersistField x_a23Vn, SomePersistField x_a23Vo,
           SomePersistField x_a23Vp, SomePersistField x_a23Vq,
           SomePersistField x_a23Vr, SomePersistField x_a23Vs,
           SomePersistField x_a23Vt, SomePersistField x_a23Vu,
           SomePersistField x_a23Vv]
      fromPersistValues
        [x_a23Vw,
         x_a23Vx,
         x_a23Vy,
         x_a23Vz,
         x_a23VA,
         x_a23VB,
         x_a23VC,
         x_a23VD,
         x_a23VE,
         x_a23VF,
         x_a23VG]
        = ((((((((((((Right LriBenchmarkInfo)
                     Control.Applicative.<*>
                       (\ persistValue_a23VH
                          -> case fromPersistValue persistValue_a23VH of {
                               Right r_a23VI -> Right r_a23VI
                               Left err_a23VJ
                                 -> (Left
                                     $ ((("field " `Data.Monoid.mappend` (packPTH "benchmarkId"))
                                         `Data.Monoid.mappend` ": ")
                                        `Data.Monoid.mappend` err_a23VJ)) }
                          x_a23Vw))
                    Control.Applicative.<*>
                      (\ persistValue_a23VK
                         -> case fromPersistValue persistValue_a23VK of {
                              Right r_a23VL -> Right r_a23VL
                              Left err_a23VM
                                -> (Left
                                    $ ((("field " `Data.Monoid.mappend` (packPTH "name"))
                                        `Data.Monoid.mappend` ": ")
                                       `Data.Monoid.mappend` err_a23VM)) }
                         x_a23Vx))
                   Control.Applicative.<*>
                     (\ persistValue_a23VN
                        -> case fromPersistValue persistValue_a23VN of {
                             Right r_a23VO -> Right r_a23VO
                             Left err_a23VP
                               -> (Left
                                   $ ((("field " `Data.Monoid.mappend` (packPTH "file"))
                                       `Data.Monoid.mappend` ": ")
                                      `Data.Monoid.mappend` err_a23VP)) }
                        x_a23Vy))
                  Control.Applicative.<*>
                    (\ persistValue_a23VQ
                       -> case fromPersistValue persistValue_a23VQ of {
                            Right r_a23VR -> Right r_a23VR
                            Left err_a23VS
                              -> (Left
                                  $ ((("field " `Data.Monoid.mappend` (packPTH "rating"))
                                      `Data.Monoid.mappend` ": ")
                                     `Data.Monoid.mappend` err_a23VS)) }
                       x_a23Vz))
                 Control.Applicative.<*>
                   (\ persistValue_a23VT
                      -> case fromPersistValue persistValue_a23VT of {
                           Right r_a23VU -> Right r_a23VU
                           Left err_a23VV
                             -> (Left
                                 $ ((("field " `Data.Monoid.mappend` (packPTH "solved"))
                                     `Data.Monoid.mappend` ": ")
                                    `Data.Monoid.mappend` err_a23VV)) }
                      x_a23VA))
                Control.Applicative.<*>
                  (\ persistValue_a23VW
                     -> case fromPersistValue persistValue_a23VW of {
                          Right r_a23VX -> Right r_a23VX
                          Left err_a23VY
                            -> (Left
                                $ ((("field " `Data.Monoid.mappend` (packPTH "isConditional"))
                                    `Data.Monoid.mappend` ": ")
                                   `Data.Monoid.mappend` err_a23VY)) }
                     x_a23VB))
               Control.Applicative.<*>
                 (\ persistValue_a23VZ
                    -> case fromPersistValue persistValue_a23VZ of {
                         Right r_a23W0 -> Right r_a23W0
                         Left err_a23W1
                           -> (Left
                               $ ((("field " `Data.Monoid.mappend` (packPTH "isContextSensitive"))
                                   `Data.Monoid.mappend` ": ")
                                  `Data.Monoid.mappend` err_a23W1)) }
                    x_a23VC))
              Control.Applicative.<*>
                (\ persistValue_a23W2
                   -> case fromPersistValue persistValue_a23W2 of {
                        Right r_a23W3 -> Right r_a23W3
                        Left err_a23W4
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "isInnermost"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23W4)) }
                   x_a23VD))
             Control.Applicative.<*>
               (\ persistValue_a23W5
                  -> case fromPersistValue persistValue_a23W5 of {
                       Right r_a23W6 -> Right r_a23W6
                       Left err_a23W7
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "isOutermost"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23W7)) }
                  x_a23VE))
            Control.Applicative.<*>
              (\ persistValue_a23W8
                 -> case fromPersistValue persistValue_a23W8 of {
                      Right r_a23W9 -> Right r_a23W9
                      Left err_a23Wa
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "isRelative"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23Wa)) }
                 x_a23VF))
           Control.Applicative.<*>
             (\ persistValue_a23Wb
                -> case fromPersistValue persistValue_a23Wb of {
                     Right r_a23Wc -> Right r_a23Wc
                     Left err_a23Wd
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "isTheory"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Wd)) }
                x_a23VG))
      fromPersistValues _
        = Left
            (packPTH
               "Invalid fromPersistValues input. Entity: LriBenchmarkInfo")
      persistUniqueToFieldNames (UniqueLriBenchmarkInfo {})
        = [(HaskellName (packPTH "benchmarkId"), 
            DBName (packPTH "benchmark_id"))]
      persistUniqueToValues (UniqueLriBenchmarkInfo x_a23We)
        = [toPersistValue x_a23We]
      persistUniqueKeys
        (LriBenchmarkInfo _benchmarkId_a23Wf
                          _name_a23Wg
                          _file_a23Wh
                          _rating_a23Wi
                          _solved_a23Wj
                          _isConditional_a23Wk
                          _isContextSensitive_a23Wl
                          _isInnermost_a23Wm
                          _isOutermost_a23Wn
                          _isRelative_a23Wo
                          _isTheory_a23Wp)
        = [UniqueLriBenchmarkInfo _benchmarkId_a23Wf]
      persistFieldDef LriBenchmarkInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "LriBenchmarkInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoBenchmarkId
        = FieldDef
            (HaskellName (packPTH "benchmarkId"))
            (DBName (packPTH "benchmark_id"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoName
        = FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoFile
        = FieldDef
            (HaskellName (packPTH "file"))
            (DBName (packPTH "file"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoRating
        = FieldDef
            (HaskellName (packPTH "rating"))
            (DBName (packPTH "rating"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoSolved
        = FieldDef
            (HaskellName (packPTH "solved"))
            (DBName (packPTH "solved"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoIsConditional
        = FieldDef
            (HaskellName (packPTH "isConditional"))
            (DBName (packPTH "is_conditional"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoIsContextSensitive
        = FieldDef
            (HaskellName (packPTH "isContextSensitive"))
            (DBName (packPTH "is_context_sensitive"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoIsInnermost
        = FieldDef
            (HaskellName (packPTH "isInnermost"))
            (DBName (packPTH "is_innermost"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoIsOutermost
        = FieldDef
            (HaskellName (packPTH "isOutermost"))
            (DBName (packPTH "is_outermost"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoIsRelative
        = FieldDef
            (HaskellName (packPTH "isRelative"))
            (DBName (packPTH "is_relative"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistFieldDef LriBenchmarkInfoIsTheory
        = FieldDef
            (HaskellName (packPTH "isTheory"))
            (DBName (packPTH "is_theory"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            []
            True
            Nothing
      persistIdField = LriBenchmarkInfoId
      fieldLens LriBenchmarkInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23Wq) key_a23Wr
               -> Entity key_a23Wr value_a23Wq)
      fieldLens LriBenchmarkInfoBenchmarkId
        = lensPTH
            (lriBenchmarkInfoBenchmarkId . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws (value_a23Wt {lriBenchmarkInfoBenchmarkId = x_a23Wu}))
      fieldLens LriBenchmarkInfoName
        = lensPTH
            (lriBenchmarkInfoName . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity key_a23Ws (value_a23Wt {lriBenchmarkInfoName = x_a23Wu}))
      fieldLens LriBenchmarkInfoFile
        = lensPTH
            (lriBenchmarkInfoFile . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity key_a23Ws (value_a23Wt {lriBenchmarkInfoFile = x_a23Wu}))
      fieldLens LriBenchmarkInfoRating
        = lensPTH
            (lriBenchmarkInfoRating . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws (value_a23Wt {lriBenchmarkInfoRating = x_a23Wu}))
      fieldLens LriBenchmarkInfoSolved
        = lensPTH
            (lriBenchmarkInfoSolved . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws (value_a23Wt {lriBenchmarkInfoSolved = x_a23Wu}))
      fieldLens LriBenchmarkInfoIsConditional
        = lensPTH
            (lriBenchmarkInfoIsConditional . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws (value_a23Wt {lriBenchmarkInfoIsConditional = x_a23Wu}))
      fieldLens LriBenchmarkInfoIsContextSensitive
        = lensPTH
            (lriBenchmarkInfoIsContextSensitive . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws
                    (value_a23Wt {lriBenchmarkInfoIsContextSensitive = x_a23Wu}))
      fieldLens LriBenchmarkInfoIsInnermost
        = lensPTH
            (lriBenchmarkInfoIsInnermost . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws (value_a23Wt {lriBenchmarkInfoIsInnermost = x_a23Wu}))
      fieldLens LriBenchmarkInfoIsOutermost
        = lensPTH
            (lriBenchmarkInfoIsOutermost . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws (value_a23Wt {lriBenchmarkInfoIsOutermost = x_a23Wu}))
      fieldLens LriBenchmarkInfoIsRelative
        = lensPTH
            (lriBenchmarkInfoIsRelative . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws (value_a23Wt {lriBenchmarkInfoIsRelative = x_a23Wu}))
      fieldLens LriBenchmarkInfoIsTheory
        = lensPTH
            (lriBenchmarkInfoIsTheory . entityVal)
            (\ (Entity key_a23Ws value_a23Wt) x_a23Wu
               -> Entity
                    key_a23Ws (value_a23Wt {lriBenchmarkInfoIsTheory = x_a23Wu}))
    data QueryInfo
      = QueryInfo {queryInfoQuery :: !SEQuery}
      deriving (Show)
    type QueryInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend QueryInfo
    instance PersistEntity QueryInfo where
      type PersistEntityBackend QueryInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique QueryInfo = UniqueQueryInfo SEQuery
      data EntityField QueryInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend QueryInfo =>
          QueryInfoId |
          typ ~ SEQuery => QueryInfoQuery
      entityDef _
        = EntityDef
            (HaskellName (packPTH "QueryInfo"))
            (DBName (packPTH "query_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "query"))
               (DBName (packPTH "query"))
               (FTTypeCon Nothing (packPTH "SEQuery"))
               SqlString
               []
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniqueQueryInfo"))
               (DBName (packPTH "unique_query_info"))
               [(HaskellName (packPTH "query"), DBName (packPTH "query"))]
               []]
            []
            [packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields (QueryInfo x_a23Wv) = [SomePersistField x_a23Wv]
      fromPersistValues [x_a23Ww]
        = ((Right QueryInfo)
           Control.Applicative.<*>
             (\ persistValue_a23Wx
                -> case fromPersistValue persistValue_a23Wx of {
                     Right r_a23Wy -> Right r_a23Wy
                     Left err_a23Wz
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "query"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Wz)) }
                x_a23Ww))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: QueryInfo")
      persistUniqueToFieldNames (UniqueQueryInfo {})
        = [(HaskellName (packPTH "query"), DBName (packPTH "query"))]
      persistUniqueToValues (UniqueQueryInfo x_a23WA)
        = [toPersistValue x_a23WA]
      persistUniqueKeys (QueryInfo _query_a23WB)
        = [UniqueQueryInfo _query_a23WB]
      persistFieldDef QueryInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "QueryInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef QueryInfoQuery
        = FieldDef
            (HaskellName (packPTH "query"))
            (DBName (packPTH "query"))
            (FTTypeCon Nothing (packPTH "SEQuery"))
            SqlString
            []
            True
            Nothing
      persistIdField = QueryInfoId
      fieldLens QueryInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23WC) key_a23WD
               -> Entity key_a23WD value_a23WC)
      fieldLens QueryInfoQuery
        = lensPTH
            (queryInfoQuery . entityVal)
            (\ (Entity key_a23WE value_a23WF) x_a23WG
               -> Entity key_a23WE (value_a23WF {queryInfoQuery = x_a23WG}))
    data CompetitionInfo
      = CompetitionInfo {competitionInfoCompetition :: !Competition,
                         competitionInfoDate :: !UTCTime,
                         competitionInfoPublic :: !Bool}
      deriving (Show)
    type CompetitionInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend CompetitionInfo
    instance PersistEntity CompetitionInfo where
      type PersistEntityBackend CompetitionInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique CompetitionInfo
      data EntityField CompetitionInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend CompetitionInfo =>
          CompetitionInfoId |
          typ ~ Competition => CompetitionInfoCompetition |
          typ ~ UTCTime => CompetitionInfoDate |
          typ ~ Bool => CompetitionInfoPublic
      entityDef _
        = EntityDef
            (HaskellName (packPTH "CompetitionInfo"))
            (DBName (packPTH "competition_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "competition"))
               (DBName (packPTH "competition"))
               (FTTypeCon Nothing (packPTH "Competition"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "date"))
               (DBName (packPTH "date"))
               (FTTypeCon Nothing (packPTH "UTCTime"))
               SqlDayTime
               [packPTH "default=now()"]
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "public"))
               (DBName (packPTH "public"))
               (FTTypeCon Nothing (packPTH "Bool"))
               SqlBool
               [packPTH "default=True"]
               True
               Nothing]
            Nothing
            []
            []
            [packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields (CompetitionInfo x_a23WH x_a23WI x_a23WJ)
        = [SomePersistField x_a23WH, SomePersistField x_a23WI,
           SomePersistField x_a23WJ]
      fromPersistValues [x_a23WK, x_a23WL, x_a23WM]
        = ((((Right CompetitionInfo)
             Control.Applicative.<*>
               (\ persistValue_a23WN
                  -> case fromPersistValue persistValue_a23WN of {
                       Right r_a23WO -> Right r_a23WO
                       Left err_a23WP
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "competition"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23WP)) }
                  x_a23WK))
            Control.Applicative.<*>
              (\ persistValue_a23WQ
                 -> case fromPersistValue persistValue_a23WQ of {
                      Right r_a23WR -> Right r_a23WR
                      Left err_a23WS
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "date"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23WS)) }
                 x_a23WL))
           Control.Applicative.<*>
             (\ persistValue_a23WT
                -> case fromPersistValue persistValue_a23WT of {
                     Right r_a23WU -> Right r_a23WU
                     Left err_a23WV
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "public"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23WV)) }
                x_a23WM))
      fromPersistValues _
        = Left
            (packPTH
               "Invalid fromPersistValues input. Entity: CompetitionInfo")
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys
        (CompetitionInfo _competition_a23WW _date_a23WX _public_a23WY)
        = []
      persistFieldDef CompetitionInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "CompetitionInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef CompetitionInfoCompetition
        = FieldDef
            (HaskellName (packPTH "competition"))
            (DBName (packPTH "competition"))
            (FTTypeCon Nothing (packPTH "Competition"))
            SqlString
            []
            True
            Nothing
      persistFieldDef CompetitionInfoDate
        = FieldDef
            (HaskellName (packPTH "date"))
            (DBName (packPTH "date"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            SqlDayTime
            [packPTH "default=now()"]
            True
            Nothing
      persistFieldDef CompetitionInfoPublic
        = FieldDef
            (HaskellName (packPTH "public"))
            (DBName (packPTH "public"))
            (FTTypeCon Nothing (packPTH "Bool"))
            SqlBool
            [packPTH "default=True"]
            True
            Nothing
      persistIdField = CompetitionInfoId
      fieldLens CompetitionInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23WZ) key_a23X0
               -> Entity key_a23X0 value_a23WZ)
      fieldLens CompetitionInfoCompetition
        = lensPTH
            (competitionInfoCompetition . entityVal)
            (\ (Entity key_a23X1 value_a23X2) x_a23X3
               -> Entity
                    key_a23X1 (value_a23X2 {competitionInfoCompetition = x_a23X3}))
      fieldLens CompetitionInfoDate
        = lensPTH
            (competitionInfoDate . entityVal)
            (\ (Entity key_a23X1 value_a23X2) x_a23X3
               -> Entity key_a23X1 (value_a23X2 {competitionInfoDate = x_a23X3}))
      fieldLens CompetitionInfoPublic
        = lensPTH
            (competitionInfoPublic . entityVal)
            (\ (Entity key_a23X1 value_a23X2) x_a23X3
               -> Entity
                    key_a23X1 (value_a23X2 {competitionInfoPublic = x_a23X3}))
    data PostProcInfo
      = PostProcInfo {postProcInfoStarExecId :: !Int,
                      postProcInfoName :: !Text,
                      postProcInfoDescription :: !Text,
                      postProcInfoLastUpdate :: !UTCTime}
      deriving (Show)
    type PostProcInfoId =
        KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend PostProcInfo
    instance PersistEntity PostProcInfo where
      type PersistEntityBackend PostProcInfo = persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend
      data Unique PostProcInfo = UniquePostProcInfo Int
      data EntityField PostProcInfo typ
        = typ ~ KeyBackend persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend PostProcInfo =>
          PostProcInfoId |
          typ ~ Int => PostProcInfoStarExecId |
          typ ~ Text => PostProcInfoName |
          typ ~ Text => PostProcInfoDescription |
          typ ~ UTCTime => PostProcInfoLastUpdate
      entityDef _
        = EntityDef
            (HaskellName (packPTH "PostProcInfo"))
            (DBName (packPTH "post_proc_info"))
            (DBName (packPTH "id"))
            []
            [FieldDef
               (HaskellName (packPTH "starExecId"))
               (DBName (packPTH "star_exec_id"))
               (FTTypeCon Nothing (packPTH "Int"))
               SqlInt64
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "name"))
               (DBName (packPTH "name"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "description"))
               (DBName (packPTH "description"))
               (FTTypeCon Nothing (packPTH "Text"))
               SqlString
               []
               True
               Nothing,
             FieldDef
               (HaskellName (packPTH "lastUpdate"))
               (DBName (packPTH "last_update"))
               (FTTypeCon Nothing (packPTH "UTCTime"))
               SqlDayTime
               [packPTH "default=now()"]
               True
               Nothing]
            Nothing
            [UniqueDef
               (HaskellName (packPTH "UniquePostProcInfo"))
               (DBName (packPTH "unique_post_proc_info"))
               [(HaskellName (packPTH "starExecId"), 
                 DBName (packPTH "star_exec_id"))]
               []]
            []
            [packPTH "Show"]
            (containers-0.5.5.1:Data.Map.Base.fromList [])
            False
      toPersistFields (PostProcInfo x_a23X4 x_a23X5 x_a23X6 x_a23X7)
        = [SomePersistField x_a23X4, SomePersistField x_a23X5,
           SomePersistField x_a23X6, SomePersistField x_a23X7]
      fromPersistValues [x_a23X8, x_a23X9, x_a23Xa, x_a23Xb]
        = (((((Right PostProcInfo)
              Control.Applicative.<*>
                (\ persistValue_a23Xc
                   -> case fromPersistValue persistValue_a23Xc of {
                        Right r_a23Xd -> Right r_a23Xd
                        Left err_a23Xe
                          -> (Left
                              $ ((("field " `Data.Monoid.mappend` (packPTH "starExecId"))
                                  `Data.Monoid.mappend` ": ")
                                 `Data.Monoid.mappend` err_a23Xe)) }
                   x_a23X8))
             Control.Applicative.<*>
               (\ persistValue_a23Xf
                  -> case fromPersistValue persistValue_a23Xf of {
                       Right r_a23Xg -> Right r_a23Xg
                       Left err_a23Xh
                         -> (Left
                             $ ((("field " `Data.Monoid.mappend` (packPTH "name"))
                                 `Data.Monoid.mappend` ": ")
                                `Data.Monoid.mappend` err_a23Xh)) }
                  x_a23X9))
            Control.Applicative.<*>
              (\ persistValue_a23Xi
                 -> case fromPersistValue persistValue_a23Xi of {
                      Right r_a23Xj -> Right r_a23Xj
                      Left err_a23Xk
                        -> (Left
                            $ ((("field " `Data.Monoid.mappend` (packPTH "description"))
                                `Data.Monoid.mappend` ": ")
                               `Data.Monoid.mappend` err_a23Xk)) }
                 x_a23Xa))
           Control.Applicative.<*>
             (\ persistValue_a23Xl
                -> case fromPersistValue persistValue_a23Xl of {
                     Right r_a23Xm -> Right r_a23Xm
                     Left err_a23Xn
                       -> (Left
                           $ ((("field " `Data.Monoid.mappend` (packPTH "lastUpdate"))
                               `Data.Monoid.mappend` ": ")
                              `Data.Monoid.mappend` err_a23Xn)) }
                x_a23Xb))
      fromPersistValues _
        = Left
            (packPTH "Invalid fromPersistValues input. Entity: PostProcInfo")
      persistUniqueToFieldNames (UniquePostProcInfo {})
        = [(HaskellName (packPTH "starExecId"), 
            DBName (packPTH "star_exec_id"))]
      persistUniqueToValues (UniquePostProcInfo x_a23Xo)
        = [toPersistValue x_a23Xo]
      persistUniqueKeys
        (PostProcInfo _starExecId_a23Xp
                      _name_a23Xq
                      _description_a23Xr
                      _lastUpdate_a23Xs)
        = [UniquePostProcInfo _starExecId_a23Xp]
      persistFieldDef PostProcInfoId
        = FieldDef
            (HaskellName (packPTH "Id"))
            (DBName (packPTH "id"))
            (FTTypeCon Nothing (packPTH "PostProcInfoId"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef PostProcInfoStarExecId
        = FieldDef
            (HaskellName (packPTH "starExecId"))
            (DBName (packPTH "star_exec_id"))
            (FTTypeCon Nothing (packPTH "Int"))
            SqlInt64
            []
            True
            Nothing
      persistFieldDef PostProcInfoName
        = FieldDef
            (HaskellName (packPTH "name"))
            (DBName (packPTH "name"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef PostProcInfoDescription
        = FieldDef
            (HaskellName (packPTH "description"))
            (DBName (packPTH "description"))
            (FTTypeCon Nothing (packPTH "Text"))
            SqlString
            []
            True
            Nothing
      persistFieldDef PostProcInfoLastUpdate
        = FieldDef
            (HaskellName (packPTH "lastUpdate"))
            (DBName (packPTH "last_update"))
            (FTTypeCon Nothing (packPTH "UTCTime"))
            SqlDayTime
            [packPTH "default=now()"]
            True
            Nothing
      persistIdField = PostProcInfoId
      fieldLens PostProcInfoId
        = lensPTH
            entityKey
            (\ (Entity _ value_a23Xt) key_a23Xu
               -> Entity key_a23Xu value_a23Xt)
      fieldLens PostProcInfoStarExecId
        = lensPTH
            (postProcInfoStarExecId . entityVal)
            (\ (Entity key_a23Xv value_a23Xw) x_a23Xx
               -> Entity
                    key_a23Xv (value_a23Xw {postProcInfoStarExecId = x_a23Xx}))
      fieldLens PostProcInfoName
        = lensPTH
            (postProcInfoName . entityVal)
            (\ (Entity key_a23Xv value_a23Xw) x_a23Xx
               -> Entity key_a23Xv (value_a23Xw {postProcInfoName = x_a23Xx}))
      fieldLens PostProcInfoDescription
        = lensPTH
            (postProcInfoDescription . entityVal)
            (\ (Entity key_a23Xv value_a23Xw) x_a23Xx
               -> Entity
                    key_a23Xv (value_a23Xw {postProcInfoDescription = x_a23Xx}))
      fieldLens PostProcInfoLastUpdate
        = lensPTH
            (postProcInfoLastUpdate . entityVal)
            (\ (Entity key_a23Xv value_a23Xw) x_a23Xx
               -> Entity
                    key_a23Xv (value_a23Xw {postProcInfoLastUpdate = x_a23Xx}))
    migrateAll ::
      forall m. (MonadBaseControl IO m, MonadIO m, MonadLogger m) =>
      persistent-1.3.3:Database.Persist.Sql.Types.Migration (persistent-1.3.3:Database.Persist.Sql.Types.SqlPersistT m)
    migrateAll
      = do { let defs_a23Xy
                   = [EntityDef
                        (HaskellName (packPTH "User"))
                        (DBName (packPTH "user"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "ident"))
                           (DBName (packPTH "ident"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "password"))
                           (DBName (packPTH "password"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           [packPTH "Maybe"]
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueUser"))
                           (DBName (packPTH "unique_user"))
                           [(HaskellName (packPTH "ident"), DBName (packPTH "ident"))]
                           []]
                        []
                        [packPTH "Typeable"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "StarExecSessionData"))
                        (DBName (packPTH "star_exec_session_data"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "key"))
                           (DBName (packPTH "key"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "cookies"))
                           (DBName (packPTH "cookies"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "date"))
                           (DBName (packPTH "date"))
                           (FTTypeCon Nothing (packPTH "UTCTime"))
                           SqlDayTime
                           []
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueStarExecSessionData"))
                           (DBName (packPTH "unique_star_exec_session_data"))
                           [(HaskellName (packPTH "key"), DBName (packPTH "key"))]
                           []]
                        []
                        []
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "JobResultInfo"))
                        (DBName (packPTH "job_result_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "jobId"))
                           (DBName (packPTH "job_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "score"))
                           (DBName (packPTH "score"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           [packPTH "Maybe"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "pairId"))
                           (DBName (packPTH "pair_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "benchmark"))
                           (DBName (packPTH "benchmark"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "benchmarkId"))
                           (DBName (packPTH "benchmark_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "solver"))
                           (DBName (packPTH "solver"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "solverId"))
                           (DBName (packPTH "solver_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "configuration"))
                           (DBName (packPTH "configuration"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "configurationId"))
                           (DBName (packPTH "configuration_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "status"))
                           (DBName (packPTH "status"))
                           (FTTypeCon Nothing (packPTH "JobResultStatus"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "cpuTime"))
                           (DBName (packPTH "cpu_time"))
                           (FTTypeCon Nothing (packPTH "Double"))
                           SqlReal
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "wallclockTime"))
                           (DBName (packPTH "wallclock_time"))
                           (FTTypeCon Nothing (packPTH "Double"))
                           SqlReal
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "result"))
                           (DBName (packPTH "result"))
                           (FTTypeCon Nothing (packPTH "SolverResult"))
                           SqlString
                           []
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueJobResultInfo"))
                           (DBName (packPTH "unique_job_result_info"))
                           [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "LriResultInfo"))
                        (DBName (packPTH "lri_result_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "jobId"))
                           (DBName (packPTH "job_id"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "score"))
                           (DBName (packPTH "score"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           [packPTH "Maybe"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "pairId"))
                           (DBName (packPTH "pair_id"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "benchmarkId"))
                           (DBName (packPTH "benchmark_id"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "solverId"))
                           (DBName (packPTH "solver_id"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "result"))
                           (DBName (packPTH "result"))
                           (FTTypeCon Nothing (packPTH "SolverResult"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "cpuTime"))
                           (DBName (packPTH "cpu_time"))
                           (FTTypeCon Nothing (packPTH "Double"))
                           SqlReal
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "wallclockTime"))
                           (DBName (packPTH "wallclock_time"))
                           (FTTypeCon Nothing (packPTH "Double"))
                           SqlReal
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "checkResult"))
                           (DBName (packPTH "check_result"))
                           (FTTypeCon Nothing (packPTH "SolverResult"))
                           SqlString
                           [packPTH "Maybe"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "checkCpuTime"))
                           (DBName (packPTH "check_cpu_time"))
                           (FTTypeCon Nothing (packPTH "Double"))
                           SqlReal
                           [packPTH "Maybe"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "checkWallclockTime"))
                           (DBName (packPTH "check_wallclock_time"))
                           (FTTypeCon Nothing (packPTH "Double"))
                           SqlReal
                           [packPTH "Maybe"]
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueLriResultInfo"))
                           (DBName (packPTH "unique_lri_result_info"))
                           [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "JobPairInfo"))
                        (DBName (packPTH "job_pair_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "pairId"))
                           (DBName (packPTH "pair_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "stdout"))
                           (DBName (packPTH "stdout"))
                           (FTTypeCon Nothing (packPTH "ByteString"))
                           SqlBlob
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "log"))
                           (DBName (packPTH "log"))
                           (FTTypeCon Nothing (packPTH "ByteString"))
                           SqlBlob
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "htmlProof"))
                           (DBName (packPTH "html_proof"))
                           (FTTypeCon Nothing (packPTH "ByteString"))
                           SqlBlob
                           [packPTH "Maybe"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "resultStatus"))
                           (DBName (packPTH "result_status"))
                           (FTTypeCon Nothing (packPTH "JobResultStatus"))
                           SqlString
                           [packPTH "default='JobResultUndetermined'"]
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueJobPairInfo"))
                           (DBName (packPTH "unique_job_pair_info"))
                           [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "JobInfo"))
                        (DBName (packPTH "job_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "starExecId"))
                           (DBName (packPTH "star_exec_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "name"))
                           (DBName (packPTH "name"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "status"))
                           (DBName (packPTH "status"))
                           (FTTypeCon Nothing (packPTH "JobStatus"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "date"))
                           (DBName (packPTH "date"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "preProc"))
                           (DBName (packPTH "pre_proc"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           [packPTH "default='unknown'"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "postProc"))
                           (DBName (packPTH "post_proc"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           [packPTH "default='unknown'"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isComplexity"))
                           (DBName (packPTH "is_complexity"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           [packPTH "default=FALSE"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isPublic"))
                           (DBName (packPTH "is_public"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           [packPTH "default=TRUE"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "startDate"))
                           (DBName (packPTH "start_date"))
                           (FTTypeCon Nothing (packPTH "UTCTime"))
                           SqlDayTime
                           [packPTH "default=now()"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "finishDate"))
                           (DBName (packPTH "finish_date"))
                           (FTTypeCon Nothing (packPTH "UTCTime"))
                           SqlDayTime
                           [packPTH "Maybe"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "lastUpdate"))
                           (DBName (packPTH "last_update"))
                           (FTTypeCon Nothing (packPTH "UTCTime"))
                           SqlDayTime
                           [packPTH "default=now()"]
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueJobInfo"))
                           (DBName (packPTH "unique_job_info"))
                           [(HaskellName (packPTH "starExecId"), 
                             DBName (packPTH "star_exec_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "LriJobInfo"))
                        (DBName (packPTH "lri_job_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "jobId"))
                           (DBName (packPTH "job_id"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "name"))
                           (DBName (packPTH "name"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueLriJobInfo"))
                           (DBName (packPTH "unique_lri_job_info"))
                           [(HaskellName (packPTH "jobId"), DBName (packPTH "job_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "SolverInfo"))
                        (DBName (packPTH "solver_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "starExecId"))
                           (DBName (packPTH "star_exec_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "name"))
                           (DBName (packPTH "name"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "description"))
                           (DBName (packPTH "description"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "lastUpdate"))
                           (DBName (packPTH "last_update"))
                           (FTTypeCon Nothing (packPTH "UTCTime"))
                           SqlDayTime
                           [packPTH "default=now()"]
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueSolverInfo"))
                           (DBName (packPTH "unique_solver_info"))
                           [(HaskellName (packPTH "starExecId"), 
                             DBName (packPTH "star_exec_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "LriSolverInfo"))
                        (DBName (packPTH "lri_solver_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "solverId"))
                           (DBName (packPTH "solver_id"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "name"))
                           (DBName (packPTH "name"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "author"))
                           (DBName (packPTH "author"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "description"))
                           (DBName (packPTH "description"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "url"))
                           (DBName (packPTH "url"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isStandard"))
                           (DBName (packPTH "is_standard"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isRelative"))
                           (DBName (packPTH "is_relative"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isConditional"))
                           (DBName (packPTH "is_conditional"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isContextSensitive"))
                           (DBName (packPTH "is_context_sensitive"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isInnermost"))
                           (DBName (packPTH "is_innermost"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isTheory"))
                           (DBName (packPTH "is_theory"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isCertifying"))
                           (DBName (packPTH "is_certifying"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueLriSolverInfo"))
                           (DBName (packPTH "unique_lri_solver_info"))
                           [(HaskellName (packPTH "solverId"), DBName (packPTH "solver_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "BenchmarkInfo"))
                        (DBName (packPTH "benchmark_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "starExecId"))
                           (DBName (packPTH "star_exec_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "name"))
                           (DBName (packPTH "name"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "type"))
                           (DBName (packPTH "type"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "lastUpdate"))
                           (DBName (packPTH "last_update"))
                           (FTTypeCon Nothing (packPTH "UTCTime"))
                           SqlDayTime
                           [packPTH "default=now()"]
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueBenchmarkInfo"))
                           (DBName (packPTH "unique_benchmark_info"))
                           [(HaskellName (packPTH "starExecId"), 
                             DBName (packPTH "star_exec_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "LriBenchmarkInfo"))
                        (DBName (packPTH "lri_benchmark_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "benchmarkId"))
                           (DBName (packPTH "benchmark_id"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "name"))
                           (DBName (packPTH "name"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "file"))
                           (DBName (packPTH "file"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "rating"))
                           (DBName (packPTH "rating"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "solved"))
                           (DBName (packPTH "solved"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isConditional"))
                           (DBName (packPTH "is_conditional"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isContextSensitive"))
                           (DBName (packPTH "is_context_sensitive"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isInnermost"))
                           (DBName (packPTH "is_innermost"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isOutermost"))
                           (DBName (packPTH "is_outermost"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isRelative"))
                           (DBName (packPTH "is_relative"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "isTheory"))
                           (DBName (packPTH "is_theory"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           []
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueLriBenchmarkInfo"))
                           (DBName (packPTH "unique_lri_benchmark_info"))
                           [(HaskellName (packPTH "benchmarkId"), 
                             DBName (packPTH "benchmark_id"))]
                           []]
                        []
                        [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "QueryInfo"))
                        (DBName (packPTH "query_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "query"))
                           (DBName (packPTH "query"))
                           (FTTypeCon Nothing (packPTH "SEQuery"))
                           SqlString
                           []
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniqueQueryInfo"))
                           (DBName (packPTH "unique_query_info"))
                           [(HaskellName (packPTH "query"), DBName (packPTH "query"))]
                           []]
                        []
                        [packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "CompetitionInfo"))
                        (DBName (packPTH "competition_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "competition"))
                           (DBName (packPTH "competition"))
                           (FTTypeCon Nothing (packPTH "Competition"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "date"))
                           (DBName (packPTH "date"))
                           (FTTypeCon Nothing (packPTH "UTCTime"))
                           SqlDayTime
                           [packPTH "default=now()"]
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "public"))
                           (DBName (packPTH "public"))
                           (FTTypeCon Nothing (packPTH "Bool"))
                           SqlBool
                           [packPTH "default=True"]
                           True
                           Nothing]
                        Nothing
                        []
                        []
                        [packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False,
                      EntityDef
                        (HaskellName (packPTH "PostProcInfo"))
                        (DBName (packPTH "post_proc_info"))
                        (DBName (packPTH "id"))
                        []
                        [FieldDef
                           (HaskellName (packPTH "starExecId"))
                           (DBName (packPTH "star_exec_id"))
                           (FTTypeCon Nothing (packPTH "Int"))
                           SqlInt64
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "name"))
                           (DBName (packPTH "name"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "description"))
                           (DBName (packPTH "description"))
                           (FTTypeCon Nothing (packPTH "Text"))
                           SqlString
                           []
                           True
                           Nothing,
                         FieldDef
                           (HaskellName (packPTH "lastUpdate"))
                           (DBName (packPTH "last_update"))
                           (FTTypeCon Nothing (packPTH "UTCTime"))
                           SqlDayTime
                           [packPTH "default=now()"]
                           True
                           Nothing]
                        Nothing
                        [UniqueDef
                           (HaskellName (packPTH "UniquePostProcInfo"))
                           (DBName (packPTH "unique_post_proc_info"))
                           [(HaskellName (packPTH "starExecId"), 
                             DBName (packPTH "star_exec_id"))]
                           []]
                        []
                        [packPTH "Show"]
                        (containers-0.5.5.1:Data.Map.Base.fromList [])
                        False];
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "User"))
                  (DBName (packPTH "user"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "ident"))
                     (DBName (packPTH "ident"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "password"))
                     (DBName (packPTH "password"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     [packPTH "Maybe"]
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueUser"))
                     (DBName (packPTH "unique_user"))
                     [(HaskellName (packPTH "ident"), DBName (packPTH "ident"))]
                     []]
                  []
                  [packPTH "Typeable"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "StarExecSessionData"))
                  (DBName (packPTH "star_exec_session_data"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "key"))
                     (DBName (packPTH "key"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "cookies"))
                     (DBName (packPTH "cookies"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "date"))
                     (DBName (packPTH "date"))
                     (FTTypeCon Nothing (packPTH "UTCTime"))
                     SqlDayTime
                     []
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueStarExecSessionData"))
                     (DBName (packPTH "unique_star_exec_session_data"))
                     [(HaskellName (packPTH "key"), DBName (packPTH "key"))]
                     []]
                  []
                  []
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "JobResultInfo"))
                  (DBName (packPTH "job_result_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "jobId"))
                     (DBName (packPTH "job_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "score"))
                     (DBName (packPTH "score"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     [packPTH "Maybe"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "pairId"))
                     (DBName (packPTH "pair_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "benchmark"))
                     (DBName (packPTH "benchmark"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "benchmarkId"))
                     (DBName (packPTH "benchmark_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "solver"))
                     (DBName (packPTH "solver"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "solverId"))
                     (DBName (packPTH "solver_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "configuration"))
                     (DBName (packPTH "configuration"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "configurationId"))
                     (DBName (packPTH "configuration_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "status"))
                     (DBName (packPTH "status"))
                     (FTTypeCon Nothing (packPTH "JobResultStatus"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "cpuTime"))
                     (DBName (packPTH "cpu_time"))
                     (FTTypeCon Nothing (packPTH "Double"))
                     SqlReal
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "wallclockTime"))
                     (DBName (packPTH "wallclock_time"))
                     (FTTypeCon Nothing (packPTH "Double"))
                     SqlReal
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "result"))
                     (DBName (packPTH "result"))
                     (FTTypeCon Nothing (packPTH "SolverResult"))
                     SqlString
                     []
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueJobResultInfo"))
                     (DBName (packPTH "unique_job_result_info"))
                     [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "LriResultInfo"))
                  (DBName (packPTH "lri_result_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "jobId"))
                     (DBName (packPTH "job_id"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "score"))
                     (DBName (packPTH "score"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     [packPTH "Maybe"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "pairId"))
                     (DBName (packPTH "pair_id"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "benchmarkId"))
                     (DBName (packPTH "benchmark_id"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "solverId"))
                     (DBName (packPTH "solver_id"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "result"))
                     (DBName (packPTH "result"))
                     (FTTypeCon Nothing (packPTH "SolverResult"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "cpuTime"))
                     (DBName (packPTH "cpu_time"))
                     (FTTypeCon Nothing (packPTH "Double"))
                     SqlReal
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "wallclockTime"))
                     (DBName (packPTH "wallclock_time"))
                     (FTTypeCon Nothing (packPTH "Double"))
                     SqlReal
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "checkResult"))
                     (DBName (packPTH "check_result"))
                     (FTTypeCon Nothing (packPTH "SolverResult"))
                     SqlString
                     [packPTH "Maybe"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "checkCpuTime"))
                     (DBName (packPTH "check_cpu_time"))
                     (FTTypeCon Nothing (packPTH "Double"))
                     SqlReal
                     [packPTH "Maybe"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "checkWallclockTime"))
                     (DBName (packPTH "check_wallclock_time"))
                     (FTTypeCon Nothing (packPTH "Double"))
                     SqlReal
                     [packPTH "Maybe"]
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueLriResultInfo"))
                     (DBName (packPTH "unique_lri_result_info"))
                     [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "JobPairInfo"))
                  (DBName (packPTH "job_pair_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "pairId"))
                     (DBName (packPTH "pair_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "stdout"))
                     (DBName (packPTH "stdout"))
                     (FTTypeCon Nothing (packPTH "ByteString"))
                     SqlBlob
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "log"))
                     (DBName (packPTH "log"))
                     (FTTypeCon Nothing (packPTH "ByteString"))
                     SqlBlob
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "htmlProof"))
                     (DBName (packPTH "html_proof"))
                     (FTTypeCon Nothing (packPTH "ByteString"))
                     SqlBlob
                     [packPTH "Maybe"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "resultStatus"))
                     (DBName (packPTH "result_status"))
                     (FTTypeCon Nothing (packPTH "JobResultStatus"))
                     SqlString
                     [packPTH "default='JobResultUndetermined'"]
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueJobPairInfo"))
                     (DBName (packPTH "unique_job_pair_info"))
                     [(HaskellName (packPTH "pairId"), DBName (packPTH "pair_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "JobInfo"))
                  (DBName (packPTH "job_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "starExecId"))
                     (DBName (packPTH "star_exec_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "name"))
                     (DBName (packPTH "name"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "status"))
                     (DBName (packPTH "status"))
                     (FTTypeCon Nothing (packPTH "JobStatus"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "date"))
                     (DBName (packPTH "date"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "preProc"))
                     (DBName (packPTH "pre_proc"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     [packPTH "default='unknown'"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "postProc"))
                     (DBName (packPTH "post_proc"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     [packPTH "default='unknown'"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isComplexity"))
                     (DBName (packPTH "is_complexity"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     [packPTH "default=FALSE"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isPublic"))
                     (DBName (packPTH "is_public"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     [packPTH "default=TRUE"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "startDate"))
                     (DBName (packPTH "start_date"))
                     (FTTypeCon Nothing (packPTH "UTCTime"))
                     SqlDayTime
                     [packPTH "default=now()"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "finishDate"))
                     (DBName (packPTH "finish_date"))
                     (FTTypeCon Nothing (packPTH "UTCTime"))
                     SqlDayTime
                     [packPTH "Maybe"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "lastUpdate"))
                     (DBName (packPTH "last_update"))
                     (FTTypeCon Nothing (packPTH "UTCTime"))
                     SqlDayTime
                     [packPTH "default=now()"]
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueJobInfo"))
                     (DBName (packPTH "unique_job_info"))
                     [(HaskellName (packPTH "starExecId"), 
                       DBName (packPTH "star_exec_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "LriJobInfo"))
                  (DBName (packPTH "lri_job_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "jobId"))
                     (DBName (packPTH "job_id"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "name"))
                     (DBName (packPTH "name"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueLriJobInfo"))
                     (DBName (packPTH "unique_lri_job_info"))
                     [(HaskellName (packPTH "jobId"), DBName (packPTH "job_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "SolverInfo"))
                  (DBName (packPTH "solver_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "starExecId"))
                     (DBName (packPTH "star_exec_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "name"))
                     (DBName (packPTH "name"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "description"))
                     (DBName (packPTH "description"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "lastUpdate"))
                     (DBName (packPTH "last_update"))
                     (FTTypeCon Nothing (packPTH "UTCTime"))
                     SqlDayTime
                     [packPTH "default=now()"]
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueSolverInfo"))
                     (DBName (packPTH "unique_solver_info"))
                     [(HaskellName (packPTH "starExecId"), 
                       DBName (packPTH "star_exec_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "LriSolverInfo"))
                  (DBName (packPTH "lri_solver_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "solverId"))
                     (DBName (packPTH "solver_id"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "name"))
                     (DBName (packPTH "name"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "author"))
                     (DBName (packPTH "author"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "description"))
                     (DBName (packPTH "description"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "url"))
                     (DBName (packPTH "url"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isStandard"))
                     (DBName (packPTH "is_standard"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isRelative"))
                     (DBName (packPTH "is_relative"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isConditional"))
                     (DBName (packPTH "is_conditional"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isContextSensitive"))
                     (DBName (packPTH "is_context_sensitive"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isInnermost"))
                     (DBName (packPTH "is_innermost"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isTheory"))
                     (DBName (packPTH "is_theory"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isCertifying"))
                     (DBName (packPTH "is_certifying"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueLriSolverInfo"))
                     (DBName (packPTH "unique_lri_solver_info"))
                     [(HaskellName (packPTH "solverId"), DBName (packPTH "solver_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "BenchmarkInfo"))
                  (DBName (packPTH "benchmark_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "starExecId"))
                     (DBName (packPTH "star_exec_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "name"))
                     (DBName (packPTH "name"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "type"))
                     (DBName (packPTH "type"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "lastUpdate"))
                     (DBName (packPTH "last_update"))
                     (FTTypeCon Nothing (packPTH "UTCTime"))
                     SqlDayTime
                     [packPTH "default=now()"]
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueBenchmarkInfo"))
                     (DBName (packPTH "unique_benchmark_info"))
                     [(HaskellName (packPTH "starExecId"), 
                       DBName (packPTH "star_exec_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "LriBenchmarkInfo"))
                  (DBName (packPTH "lri_benchmark_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "benchmarkId"))
                     (DBName (packPTH "benchmark_id"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "name"))
                     (DBName (packPTH "name"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "file"))
                     (DBName (packPTH "file"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "rating"))
                     (DBName (packPTH "rating"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "solved"))
                     (DBName (packPTH "solved"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isConditional"))
                     (DBName (packPTH "is_conditional"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isContextSensitive"))
                     (DBName (packPTH "is_context_sensitive"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isInnermost"))
                     (DBName (packPTH "is_innermost"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isOutermost"))
                     (DBName (packPTH "is_outermost"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isRelative"))
                     (DBName (packPTH "is_relative"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "isTheory"))
                     (DBName (packPTH "is_theory"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     []
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueLriBenchmarkInfo"))
                     (DBName (packPTH "unique_lri_benchmark_info"))
                     [(HaskellName (packPTH "benchmarkId"), 
                       DBName (packPTH "benchmark_id"))]
                     []]
                  []
                  [packPTH "Eq", packPTH "Ord", packPTH "Read", packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "QueryInfo"))
                  (DBName (packPTH "query_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "query"))
                     (DBName (packPTH "query"))
                     (FTTypeCon Nothing (packPTH "SEQuery"))
                     SqlString
                     []
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniqueQueryInfo"))
                     (DBName (packPTH "unique_query_info"))
                     [(HaskellName (packPTH "query"), DBName (packPTH "query"))]
                     []]
                  []
                  [packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "CompetitionInfo"))
                  (DBName (packPTH "competition_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "competition"))
                     (DBName (packPTH "competition"))
                     (FTTypeCon Nothing (packPTH "Competition"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "date"))
                     (DBName (packPTH "date"))
                     (FTTypeCon Nothing (packPTH "UTCTime"))
                     SqlDayTime
                     [packPTH "default=now()"]
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "public"))
                     (DBName (packPTH "public"))
                     (FTTypeCon Nothing (packPTH "Bool"))
                     SqlBool
                     [packPTH "default=True"]
                     True
                     Nothing]
                  Nothing
                  []
                  []
                  [packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False);
             persistent-1.3.3:Database.Persist.Sql.Migration.migrate
               defs_a23Xy
               (EntityDef
                  (HaskellName (packPTH "PostProcInfo"))
                  (DBName (packPTH "post_proc_info"))
                  (DBName (packPTH "id"))
                  []
                  [FieldDef
                     (HaskellName (packPTH "starExecId"))
                     (DBName (packPTH "star_exec_id"))
                     (FTTypeCon Nothing (packPTH "Int"))
                     SqlInt64
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "name"))
                     (DBName (packPTH "name"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "description"))
                     (DBName (packPTH "description"))
                     (FTTypeCon Nothing (packPTH "Text"))
                     SqlString
                     []
                     True
                     Nothing,
                   FieldDef
                     (HaskellName (packPTH "lastUpdate"))
                     (DBName (packPTH "last_update"))
                     (FTTypeCon Nothing (packPTH "UTCTime"))
                     SqlDayTime
                     [packPTH "default=now()"]
                     True
                     Nothing]
                  Nothing
                  [UniqueDef
                     (HaskellName (packPTH "UniquePostProcInfo"))
                     (DBName (packPTH "unique_post_proc_info"))
                     [(HaskellName (packPTH "starExecId"), 
                       DBName (packPTH "star_exec_id"))]
                     []]
                  []
                  [packPTH "Show"]
                  (containers-0.5.5.1:Data.Map.Base.fromList [])
                  False) }
Presenter/Statistics.hs:(31,18)-(38,8): Splicing expression
    "    \n\
    \      <span>\n\
    \        #{pairsCompleted s} \n\
    \        $if not (complete s)\n\
    \           of #{pairs s} #\n\
    \        pairs, \n\
    \        #{toFixed 1 $ cpu s} / #{toFixed 1 $ wallclock s} s\n\
    \      "
  ======>
    do { id
           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "<span>");
         id (Text.Blaze.Html.toHtml (pairsCompleted s));
         id ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) " ");
         condH
           [(not (complete s), 
             do { id
                    ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "of ");
                  id (Text.Blaze.Html.toHtml (pairs s));
                  id ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) " ") })]
           Nothing;
         id
           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "pairs, ");
         id (Text.Blaze.Html.toHtml (toFixed 1 (cpu s)));
         id ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) " / ");
         id (Text.Blaze.Html.toHtml (toFixed 1 (wallclock s)));
         id
           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
              " s</span>") }

Presenter/Model/PersistInstances.hs:12:10: Warning:
    Orphan instance: instance CSV.FromNamedRecord JobResultInfo

Presenter/Model/PersistInstances.hs:27:10: Warning:
    Orphan instance: instance CSV.FromField SolverResult

Presenter/Model/PersistInstances.hs:42:10: Warning:
    Orphan instance: instance CSV.FromField JobResultStatus

Presenter/Model.hs:7:5: Warning:
    The export item `module Presenter.Model.PersistInstances' exports nothing

Presenter/Model.hs:20:1: Warning:
    The import of `Presenter.Model.PersistInstances' is redundant
      except perhaps to import instances from `Presenter.Model.PersistInstances'
    To import instances alone, use: import Presenter.Model.PersistInstances()

Presenter/Registration.hs:244:46: Warning:
    A do-notation statement discarded a result of type `String'
    Suppress this warning by saying `_ <- T.comma (lexer)'
    or by using the flag -fno-warn-unused-do-bind

Presenter/Registration.hs:253:10: Warning:
    Orphan instance: instance IsString Doc
Settings.hs:45:19-46: Splicing expression
    "#{appRoot conf}/static"
  ======>
    (Data.Text.Lazy.toStrict . Data.Text.Internal.Builder.toLazyText)
      (Data.Monoid.mconcat
         [Text.Shakespeare.Text.toText (appRoot conf),
          id
            ((Data.Text.Internal.Builder.fromText . Text.Shakespeare.pack')
               "/static")])
Settings/StaticFiles.hs:1:1: Splicing declarations
    staticFiles staticDir
  ======>
    Settings/StaticFiles.hs:20:3-32
    combined_i_RJCB0__css :: StaticRoute
    combined_i_RJCB0__css
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["combined", "i_RJCB0_.css"])
          [(Data.Text.pack "etag", Data.Text.pack "i_RJCB0_")]
    combined_kPViztcI_js :: StaticRoute
    combined_kPViztcI_js
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["combined", "kPViztcI.js"])
          [(Data.Text.pack "etag", Data.Text.pack "kPViztcI")]
    combined_rMJ_CwK2_css :: StaticRoute
    combined_rMJ_CwK2_css
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["combined", "rMJ_CwK2.css"])
          [(Data.Text.pack "etag", Data.Text.pack "rMJ_CwK2")]
    css_bootstrap_theme_css :: StaticRoute
    css_bootstrap_theme_css
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["css", "bootstrap-theme.css"])
          [(Data.Text.pack "etag", Data.Text.pack "3bylwslS")]
    css_bootstrap_css :: StaticRoute
    css_bootstrap_css
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["css", "bootstrap.css"])
          [(Data.Text.pack "etag", Data.Text.pack "inRCymvt")]
    css_normalize_css :: StaticRoute
    css_normalize_css
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["css", "normalize.css"])
          [(Data.Text.pack "etag", Data.Text.pack "zyXTK_fv")]
    fonts_glyphicons_halflings_regular_eot :: StaticRoute
    fonts_glyphicons_halflings_regular_eot
      = StaticRoute
          (GHC.Base.map
             Data.Text.pack ["fonts", "glyphicons-halflings-regular.eot"])
          [(Data.Text.pack "etag", Data.Text.pack "etF8YIXe")]
    fonts_glyphicons_halflings_regular_svg :: StaticRoute
    fonts_glyphicons_halflings_regular_svg
      = StaticRoute
          (GHC.Base.map
             Data.Text.pack ["fonts", "glyphicons-halflings-regular.svg"])
          [(Data.Text.pack "etag", Data.Text.pack "MpQdYzAE")]
    fonts_glyphicons_halflings_regular_ttf :: StaticRoute
    fonts_glyphicons_halflings_regular_ttf
      = StaticRoute
          (GHC.Base.map
             Data.Text.pack ["fonts", "glyphicons-halflings-regular.ttf"])
          [(Data.Text.pack "etag", Data.Text.pack "5J1S50t2")]
    fonts_glyphicons_halflings_regular_woff :: StaticRoute
    fonts_glyphicons_halflings_regular_woff
      = StaticRoute
          (GHC.Base.map
             Data.Text.pack ["fonts", "glyphicons-halflings-regular.woff"])
          [(Data.Text.pack "etag", Data.Text.pack "aO0drAa_")]
    img_glyphicons_halflings_white_png :: StaticRoute
    img_glyphicons_halflings_white_png
      = StaticRoute
          (GHC.Base.map
             Data.Text.pack ["img", "glyphicons-halflings-white.png"])
          [(Data.Text.pack "etag", Data.Text.pack "m7xulgKZ")]
    img_glyphicons_halflings_png :: StaticRoute
    img_glyphicons_halflings_png
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["img", "glyphicons-halflings.png"])
          [(Data.Text.pack "etag", Data.Text.pack "JRYzmXDX")]
    js_bootstrap_js :: StaticRoute
    js_bootstrap_js
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["js", "bootstrap.js"])
          [(Data.Text.pack "etag", Data.Text.pack "we_3ty6o")]
    js_jquery_js :: StaticRoute
    js_jquery_js
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["js", "jquery.js"])
          [(Data.Text.pack "etag", Data.Text.pack "MXcJH7lw")]
    xsl_cpfHTML_xsl :: StaticRoute
    xsl_cpfHTML_xsl
      = StaticRoute
          (GHC.Base.map Data.Text.pack ["xsl", "cpfHTML.xsl"])
          [(Data.Text.pack "etag", Data.Text.pack "dQCtOFrf")]
Foundation.hs:1:1: Splicing declarations
    mkMessage "App" "messages" "en"
  ======>
    Foundation.hs:56:1-31
    data AppMessage = MsgHello {}
    instance RenderMessage App AppMessage where
      renderMessage _ ((:) lang_abO3z _) (MsgHello {})
        | (lang_abO3z == (Data.Text.pack "en"))
        = Data.Text.pack ("Hello" :: String)
      renderMessage _ [] (MsgHello {})
        = Data.Text.pack ("Hello" :: String)
      renderMessage sub_abO3A ((:) _ langs_abO3B) msg_abO3C
        = renderMessage sub_abO3A langs_abO3B msg_abO3C
Foundation.hs:65:21-51: Splicing expression
    parseRoutesFile "config/routes"
  ======>
    [yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "StaticR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "static")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Subsite
             "Static" "getStatic")
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "AuthR"
          [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "auth")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Subsite
             "Auth" "getAuth")
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "FaviconR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "favicon.ico")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "RobotsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "robots.txt")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "HomeR"
          []
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ListJobPairsR"
          [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "pairs")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ShowJobPairR"
          [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "pairs"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobPairID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyShowJobPairR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "show_job_pair"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobPairID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ListProofsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "proofs")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "DisplayProofR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "proofs"),
           (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Text")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyDisplayProofR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "display_proof"),
           (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Text")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ListJobsR"
          [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "jobs")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ShowJobInfoR"
          [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "jobs"),
           (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyShowJobInfoR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "show_job_info"),
           (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ListBenchmarksR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "benchmarks")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ShowBenchmarkInfoR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "benchmarks"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "BenchmarkID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyShowBenchmarkInfoR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "show_benchmark_info"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "BenchmarkID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ListSolversR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "solvers")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ShowSolverInfoR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "solvers"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "SolverID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyShowSolverInfoR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "show_solver_info"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "SolverID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ListPostProcsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "post_procs")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ShowPostProcInfoR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "post_procs"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "PostProcID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyShowPostProcInfoR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "show_post_proc_info"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "PostProcID")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ShowManyJobResultsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "results"),
           (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Query")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             (Just "JobIds") ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyShowJobResultsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "show_job_results")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             (Just "JobIds") ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyShowManyJobResultsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "show_many_job_results")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             (Just "JobIds") ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "FlexibleTableR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "flexible-table"),
           (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Query")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             (Just "JobIds") ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "CompetitionR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "competitions"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic
              "CompetitionInfoId")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "CompetitionWithConfigR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "competition_with_config"),
           (True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Competition")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ControlR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "control")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET", "POST"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "RegisteredR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "registered")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ListCompetitionsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "competitions")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyListCompetitionsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "test-runs")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ListHiddenCompetitionsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "hidden_competitions")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "LegacyListHiddenCompetitionsR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
              "hidden-test-runs")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET"])
          []),
     yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
       (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
          "ImportR"
          [(True, 
            yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "import")]
          (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
             Nothing ["GET", "POST"])
          [])]
Foundation.hs:1:1: Splicing declarations
    mkYesodData
      "App"
      [yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "StaticR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "static")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Subsite
               "Static" "getStatic")
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "AuthR"
            [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "auth")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Subsite
               "Auth" "getAuth")
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "FaviconR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "favicon.ico")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "RobotsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "robots.txt")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "HomeR"
            []
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ListJobPairsR"
            [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "pairs")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ShowJobPairR"
            [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "pairs"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobPairID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyShowJobPairR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "show_job_pair"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobPairID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ListProofsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "proofs")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "DisplayProofR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "proofs"),
             (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Text")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyDisplayProofR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "display_proof"),
             (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Text")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ListJobsR"
            [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "jobs")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ShowJobInfoR"
            [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "jobs"),
             (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyShowJobInfoR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "show_job_info"),
             (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ListBenchmarksR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "benchmarks")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ShowBenchmarkInfoR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "benchmarks"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "BenchmarkID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyShowBenchmarkInfoR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "show_benchmark_info"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "BenchmarkID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ListSolversR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "solvers")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ShowSolverInfoR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "solvers"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "SolverID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyShowSolverInfoR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "show_solver_info"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "SolverID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ListPostProcsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "post_procs")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ShowPostProcInfoR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "post_procs"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "PostProcID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyShowPostProcInfoR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "show_post_proc_info"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "PostProcID")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ShowManyJobResultsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "results"),
             (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Query")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               (Just "JobIds") ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyShowJobResultsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "show_job_results")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               (Just "JobIds") ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyShowManyJobResultsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "show_many_job_results")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               (Just "JobIds") ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "FlexibleTableR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "flexible-table"),
             (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Query")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               (Just "JobIds") ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "CompetitionR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "competitions"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic
                "CompetitionInfoId")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "CompetitionWithConfigR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "competition_with_config"),
             (True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Competition")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ControlR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "control")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET", "POST"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "RegisteredR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "registered")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ListCompetitionsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "competitions")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyListCompetitionsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "test-runs")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ListHiddenCompetitionsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "hidden_competitions")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "LegacyListHiddenCompetitionsR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                "hidden-test-runs")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET"])
            []),
       yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
         (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
            "ImportR"
            [(True, 
              yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "import")]
            (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
               Nothing ["GET", "POST"])
            [])]
  ======>
    Foundation.hs:65:1-52
    instance ParseRoute App where
      parseRoute (pieces0_abOrK, _query_abOrM)
        = Control.Monad.join (dispatch_abOrL pieces0_abOrK)
        where
            dispatch_abOrL
              = yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.toDispatch
                  [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "static")]
                     True
                     (\ pieces_abOrN
                        -> case pieces_abOrN of {
                             (:) _ xrest_abOrO
                               -> do { Just
                                         ((fmap StaticR)
                                          $ (parseRoute (xrest_abOrO, _query_abOrM))) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "auth")]
                     True
                     (\ pieces_abOrQ
                        -> case pieces_abOrQ of {
                             (:) _ xrest_abOrR
                               -> do { Just
                                         ((fmap AuthR) $ (parseRoute (xrest_abOrR, _query_abOrM))) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "favicon.ico")]
                     False
                     (\ pieces_abOrT
                        -> case pieces_abOrT of {
                             [_] -> do { Just (Just FaviconR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "robots.txt")]
                     False
                     (\ pieces_abOrW
                        -> case pieces_abOrW of {
                             [_] -> do { Just (Just RobotsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     []
                     False
                     (\ pieces_abOrZ
                        -> case pieces_abOrZ of {
                             [] -> do { Just (Just HomeR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "pairs")]
                     False
                     (\ pieces_abOs2
                        -> case pieces_abOs2 of {
                             [_] -> do { Just (Just ListJobPairsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "pairs"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOs5
                        -> case pieces_abOs5 of {
                             [_, x_abOs6]
                               -> do { y1_abOs7 <- fromPathPiece x_abOs6;
                                       Just (Just (ShowJobPairR y1_abOs7)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_job_pair"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOsa
                        -> case pieces_abOsa of {
                             [_, x_abOsb]
                               -> do { y1_abOsc <- fromPathPiece x_abOsb;
                                       Just (Just (LegacyShowJobPairR y1_abOsc)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "proofs")]
                     False
                     (\ pieces_abOsf
                        -> case pieces_abOsf of {
                             [_] -> do { Just (Just ListProofsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "proofs"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOsi
                        -> case pieces_abOsi of {
                             [_, x_abOsj]
                               -> do { y1_abOsk <- fromPathPiece x_abOsj;
                                       Just (Just (DisplayProofR y1_abOsk)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "display_proof"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOsn
                        -> case pieces_abOsn of {
                             [_, x_abOso]
                               -> do { y1_abOsp <- fromPathPiece x_abOso;
                                       Just (Just (LegacyDisplayProofR y1_abOsp)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "jobs")]
                     False
                     (\ pieces_abOss
                        -> case pieces_abOss of {
                             [_] -> do { Just (Just ListJobsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "jobs"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOsv
                        -> case pieces_abOsv of {
                             [_, x_abOsw]
                               -> do { y1_abOsx <- fromPathPiece x_abOsw;
                                       Just (Just (ShowJobInfoR y1_abOsx)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_job_info"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOsA
                        -> case pieces_abOsA of {
                             [_, x_abOsB]
                               -> do { y1_abOsC <- fromPathPiece x_abOsB;
                                       Just (Just (LegacyShowJobInfoR y1_abOsC)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "benchmarks")]
                     False
                     (\ pieces_abOsF
                        -> case pieces_abOsF of {
                             [_] -> do { Just (Just ListBenchmarksR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "benchmarks"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOsI
                        -> case pieces_abOsI of {
                             [_, x_abOsJ]
                               -> do { y1_abOsK <- fromPathPiece x_abOsJ;
                                       Just (Just (ShowBenchmarkInfoR y1_abOsK)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_benchmark_info"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOsN
                        -> case pieces_abOsN of {
                             [_, x_abOsO]
                               -> do { y1_abOsP <- fromPathPiece x_abOsO;
                                       Just (Just (LegacyShowBenchmarkInfoR y1_abOsP)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "solvers")]
                     False
                     (\ pieces_abOsS
                        -> case pieces_abOsS of {
                             [_] -> do { Just (Just ListSolversR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "solvers"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOsV
                        -> case pieces_abOsV of {
                             [_, x_abOsW]
                               -> do { y1_abOsX <- fromPathPiece x_abOsW;
                                       Just (Just (ShowSolverInfoR y1_abOsX)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_solver_info"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOt0
                        -> case pieces_abOt0 of {
                             [_, x_abOt1]
                               -> do { y1_abOt2 <- fromPathPiece x_abOt1;
                                       Just (Just (LegacyShowSolverInfoR y1_abOt2)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "post_procs")]
                     False
                     (\ pieces_abOt5
                        -> case pieces_abOt5 of {
                             [_] -> do { Just (Just ListPostProcsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "post_procs"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOt8
                        -> case pieces_abOt8 of {
                             [_, x_abOt9]
                               -> do { y1_abOta <- fromPathPiece x_abOt9;
                                       Just (Just (ShowPostProcInfoR y1_abOta)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_post_proc_info"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOtd
                        -> case pieces_abOtd of {
                             [_, x_abOte]
                               -> do { y1_abOtf <- fromPathPiece x_abOte;
                                       Just (Just (LegacyShowPostProcInfoR y1_abOtf)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "results"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     True
                     (\ pieces_abOti
                        -> case pieces_abOti of {
                             (:) _ ((:) x_abOtj xrest_abOtl)
                               -> do { y1_abOtk <- fromPathPiece x_abOtj;
                                       yrest_abOtm <- fromPathMultiPiece xrest_abOtl;
                                       Just (Just (ShowManyJobResultsR y1_abOtk yrest_abOtm)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_job_results")]
                     True
                     (\ pieces_abOtn
                        -> case pieces_abOtn of {
                             (:) _ xrest_abOto
                               -> do { yrest_abOtp <- fromPathMultiPiece xrest_abOto;
                                       Just (Just (LegacyShowJobResultsR yrest_abOtp)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_many_job_results")]
                     True
                     (\ pieces_abOtq
                        -> case pieces_abOtq of {
                             (:) _ xrest_abOtr
                               -> do { yrest_abOts <- fromPathMultiPiece xrest_abOtr;
                                       Just (Just (LegacyShowManyJobResultsR yrest_abOts)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "flexible-table"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     True
                     (\ pieces_abOtt
                        -> case pieces_abOtt of {
                             (:) _ ((:) x_abOtu xrest_abOtw)
                               -> do { y1_abOtv <- fromPathPiece x_abOtu;
                                       yrest_abOtx <- fromPathMultiPiece xrest_abOtw;
                                       Just (Just (FlexibleTableR y1_abOtv yrest_abOtx)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "competitions"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOty
                        -> case pieces_abOty of {
                             [_, x_abOtz]
                               -> do { y1_abOtA <- fromPathPiece x_abOtz;
                                       Just (Just (CompetitionR y1_abOtA)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "competition_with_config"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_abOtD
                        -> case pieces_abOtD of {
                             [_, x_abOtE]
                               -> do { y1_abOtF <- fromPathPiece x_abOtE;
                                       Just (Just (CompetitionWithConfigR y1_abOtF)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "control")]
                     False
                     (\ pieces_abOtI
                        -> case pieces_abOtI of {
                             [_] -> do { Just (Just ControlR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "registered")]
                     False
                     (\ pieces_abOtL
                        -> case pieces_abOtL of {
                             [_] -> do { Just (Just RegisteredR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "competitions")]
                     False
                     (\ pieces_abOtO
                        -> case pieces_abOtO of {
                             [_] -> do { Just (Just ListCompetitionsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "test-runs")]
                     False
                     (\ pieces_abOtR
                        -> case pieces_abOtR of {
                             [_] -> do { Just (Just LegacyListCompetitionsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "hidden_competitions")]
                     False
                     (\ pieces_abOtU
                        -> case pieces_abOtU of {
                             [_] -> do { Just (Just ListHiddenCompetitionsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "hidden-test-runs")]
                     False
                     (\ pieces_abOtX
                        -> case pieces_abOtX of {
                             [_] -> do { Just (Just LegacyListHiddenCompetitionsR) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "import")]
                     False
                     (\ pieces_abOu0
                        -> case pieces_abOu0 of {
                             [_] -> do { Just (Just ImportR) }
                             _ -> error "Invariant violated" })]
    instance RenderRoute App where
      data Route App
        = StaticR (Route Static) |
          AuthR (Route Auth) |
          FaviconR |
          RobotsR |
          HomeR |
          ListJobPairsR |
          ShowJobPairR JobPairID |
          LegacyShowJobPairR JobPairID |
          ListProofsR |
          DisplayProofR Text |
          LegacyDisplayProofR Text |
          ListJobsR |
          ShowJobInfoR JobID |
          LegacyShowJobInfoR JobID |
          ListBenchmarksR |
          ShowBenchmarkInfoR BenchmarkID |
          LegacyShowBenchmarkInfoR BenchmarkID |
          ListSolversR |
          ShowSolverInfoR SolverID |
          LegacyShowSolverInfoR SolverID |
          ListPostProcsR |
          ShowPostProcInfoR PostProcID |
          LegacyShowPostProcInfoR PostProcID |
          ShowManyJobResultsR Query JobIds |
          LegacyShowJobResultsR JobIds |
          LegacyShowManyJobResultsR JobIds |
          FlexibleTableR Query JobIds |
          CompetitionR CompetitionInfoId |
          CompetitionWithConfigR Competition |
          ControlR |
          RegisteredR |
          ListCompetitionsR |
          LegacyListCompetitionsR |
          ListHiddenCompetitionsR |
          LegacyListHiddenCompetitionsR |
          ImportR
        deriving (Show, Eq, Read)
      renderRoute (StaticR sub_abOmc)
        = \ (a_abOmd, b_abOme)
            -> (((Data.Text.pack "static") ghc-prim:GHC.Types.: a_abOmd), 
                b_abOme)
            (renderRoute sub_abOmc)
      renderRoute (AuthR sub_abOmf)
        = \ (a_abOmg, b_abOmh)
            -> (((Data.Text.pack "auth") ghc-prim:GHC.Types.: a_abOmg), 
                b_abOmh)
            (renderRoute sub_abOmf)
      renderRoute FaviconR
        = (((Data.Text.pack "favicon.ico") ghc-prim:GHC.Types.: []), [])
      renderRoute RobotsR
        = (((Data.Text.pack "robots.txt") ghc-prim:GHC.Types.: []), [])
      renderRoute HomeR = ([], [])
      renderRoute ListJobPairsR
        = (((Data.Text.pack "pairs") ghc-prim:GHC.Types.: []), [])
      renderRoute (ShowJobPairR dyn_abOmi)
        = (((Data.Text.pack "pairs")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmi) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute (LegacyShowJobPairR dyn_abOmj)
        = (((Data.Text.pack "show_job_pair")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmj) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute ListProofsR
        = (((Data.Text.pack "proofs") ghc-prim:GHC.Types.: []), [])
      renderRoute (DisplayProofR dyn_abOmk)
        = (((Data.Text.pack "proofs")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmk) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute (LegacyDisplayProofR dyn_abOml)
        = (((Data.Text.pack "display_proof")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOml) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute ListJobsR
        = (((Data.Text.pack "jobs") ghc-prim:GHC.Types.: []), [])
      renderRoute (ShowJobInfoR dyn_abOmm)
        = (((Data.Text.pack "jobs")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmm) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute (LegacyShowJobInfoR dyn_abOmn)
        = (((Data.Text.pack "show_job_info")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmn) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute ListBenchmarksR
        = (((Data.Text.pack "benchmarks") ghc-prim:GHC.Types.: []), [])
      renderRoute (ShowBenchmarkInfoR dyn_abOmo)
        = (((Data.Text.pack "benchmarks")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmo) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute (LegacyShowBenchmarkInfoR dyn_abOmp)
        = (((Data.Text.pack "show_benchmark_info")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmp) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute ListSolversR
        = (((Data.Text.pack "solvers") ghc-prim:GHC.Types.: []), [])
      renderRoute (ShowSolverInfoR dyn_abOmq)
        = (((Data.Text.pack "solvers")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmq) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute (LegacyShowSolverInfoR dyn_abOmr)
        = (((Data.Text.pack "show_solver_info")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmr) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute ListPostProcsR
        = (((Data.Text.pack "post_procs") ghc-prim:GHC.Types.: []), [])
      renderRoute (ShowPostProcInfoR dyn_abOms)
        = (((Data.Text.pack "post_procs")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOms) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute (LegacyShowPostProcInfoR dyn_abOmt)
        = (((Data.Text.pack "show_post_proc_info")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmt) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute (ShowManyJobResultsR dyn_abOmu dyn_abOmv)
        = (((Data.Text.pack "results")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmu)
               ghc-prim:GHC.Types.: (toPathMultiPiece dyn_abOmv))), 
           [])
      renderRoute (LegacyShowJobResultsR dyn_abOmw)
        = (((Data.Text.pack "show_job_results")
            ghc-prim:GHC.Types.: (toPathMultiPiece dyn_abOmw)), 
           [])
      renderRoute (LegacyShowManyJobResultsR dyn_abOmx)
        = (((Data.Text.pack "show_many_job_results")
            ghc-prim:GHC.Types.: (toPathMultiPiece dyn_abOmx)), 
           [])
      renderRoute (FlexibleTableR dyn_abOmy dyn_abOmz)
        = (((Data.Text.pack "flexible-table")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmy)
               ghc-prim:GHC.Types.: (toPathMultiPiece dyn_abOmz))), 
           [])
      renderRoute (CompetitionR dyn_abOmA)
        = (((Data.Text.pack "competitions")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmA) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute (CompetitionWithConfigR dyn_abOmB)
        = (((Data.Text.pack "competition_with_config")
            ghc-prim:GHC.Types.:
              ((toPathPiece dyn_abOmB) ghc-prim:GHC.Types.: [])), 
           [])
      renderRoute ControlR
        = (((Data.Text.pack "control") ghc-prim:GHC.Types.: []), [])
      renderRoute RegisteredR
        = (((Data.Text.pack "registered") ghc-prim:GHC.Types.: []), [])
      renderRoute ListCompetitionsR
        = (((Data.Text.pack "competitions") ghc-prim:GHC.Types.: []), [])
      renderRoute LegacyListCompetitionsR
        = (((Data.Text.pack "test-runs") ghc-prim:GHC.Types.: []), [])
      renderRoute ListHiddenCompetitionsR
        = (((Data.Text.pack "hidden_competitions")
            ghc-prim:GHC.Types.: []), 
           [])
      renderRoute LegacyListHiddenCompetitionsR
        = (((Data.Text.pack "hidden-test-runs") ghc-prim:GHC.Types.: []), 
           [])
      renderRoute ImportR
        = (((Data.Text.pack "import") ghc-prim:GHC.Types.: []), [])
    instance RouteAttrs App where
      routeAttrs (StaticR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (AuthR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (FaviconR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (RobotsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (HomeR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ListJobPairsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ShowJobPairR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyShowJobPairR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ListProofsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (DisplayProofR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyDisplayProofR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ListJobsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ShowJobInfoR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyShowJobInfoR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ListBenchmarksR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ShowBenchmarkInfoR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyShowBenchmarkInfoR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ListSolversR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ShowSolverInfoR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyShowSolverInfoR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ListPostProcsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ShowPostProcInfoR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyShowPostProcInfoR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ShowManyJobResultsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyShowJobResultsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyShowManyJobResultsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (FlexibleTableR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (CompetitionR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (CompetitionWithConfigR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ControlR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (RegisteredR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ListCompetitionsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyListCompetitionsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ListHiddenCompetitionsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (LegacyListHiddenCompetitionsR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
      routeAttrs (ImportR {})
        = containers-0.5.5.1:Data.Set.Base.fromList []
    resourcesApp ::
      [yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceTree String]
    resourcesApp
      = [yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "StaticR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "static")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Subsite
                 "Static" "getStatic")
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "AuthR"
              [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "auth")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Subsite
                 "Auth" "getAuth")
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "FaviconR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "favicon.ico")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "RobotsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "robots.txt")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "HomeR"
              []
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ListJobPairsR"
              [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "pairs")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ShowJobPairR"
              [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "pairs"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobPairID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyShowJobPairR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "show_job_pair"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobPairID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ListProofsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "proofs")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "DisplayProofR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "proofs"),
               (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Text")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyDisplayProofR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "display_proof"),
               (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Text")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ListJobsR"
              [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "jobs")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ShowJobInfoR"
              [(True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "jobs"),
               (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyShowJobInfoR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "show_job_info"),
               (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "JobID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ListBenchmarksR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "benchmarks")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ShowBenchmarkInfoR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "benchmarks"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "BenchmarkID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyShowBenchmarkInfoR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "show_benchmark_info"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "BenchmarkID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ListSolversR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "solvers")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ShowSolverInfoR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "solvers"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "SolverID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyShowSolverInfoR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "show_solver_info"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "SolverID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ListPostProcsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "post_procs")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ShowPostProcInfoR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "post_procs"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "PostProcID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyShowPostProcInfoR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "show_post_proc_info"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "PostProcID")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ShowManyJobResultsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "results"),
               (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Query")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 (Just "JobIds") ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyShowJobResultsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "show_job_results")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 (Just "JobIds") ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyShowManyJobResultsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "show_many_job_results")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 (Just "JobIds") ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "FlexibleTableR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "flexible-table"),
               (True, yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Query")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 (Just "JobIds") ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "CompetitionR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "competitions"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic
                  "CompetitionInfoId")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "CompetitionWithConfigR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "competition_with_config"),
               (True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Dynamic "Competition")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ControlR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "control")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET", "POST"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "RegisteredR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "registered")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ListCompetitionsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "competitions")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyListCompetitionsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "test-runs")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ListHiddenCompetitionsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "hidden_competitions")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "LegacyListHiddenCompetitionsR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static
                  "hidden-test-runs")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET"])
              []),
         yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.ResourceLeaf
           (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Resource
              "ImportR"
              [(True, 
                yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Static "import")]
              (yesod-routes-1.2.0.7:Yesod.Routes.TH.Types.Methods
                 Nothing ["GET", "POST"])
              [])]
    type Handler = HandlerT App IO
    type Widget = WidgetT App IO ghc-prim:GHC.Tuple.()
Foundation.hs:(91,15)-(94,17): Splicing expression
    combineStylesheets 'StaticR [css_normalize_css, css_bootstrap_css]
  ======>
    (addStylesheet
     $ (StaticR
          (StaticRoute
             (map Data.Text.pack ["combined", "i_RJCB0_.css"]) [])))
Foundation.hs:(95,15)-(98,17): Splicing expression
    combineScripts 'StaticR [js_jquery_js, js_bootstrap_js]
  ======>
    (addScript
     $ (StaticR
          (StaticRoute (map Data.Text.pack ["combined", "kPViztcI.js"]) [])))
Foundation.hs:99:15-41: Splicing expression
    widgetFile "default-layout"
  ======>
    do { (asWidgetT . toWidget) widget }
Foundation.hs:100:27-78: Splicing expression
    hamletFile "templates/default-layout-wrapper.hamlet"
  ======>
    \ _render_abOyz
      -> do { id
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<!doctype html><!--[if lt IE 7]> <html class=\"no-js ie6 oldie\" lang=\"en\"> <![endif]--><!--[if IE 7]>    <html class=\"no-js ie7 oldie\" lang=\"en\"> <![endif]--><!--[if IE 8]>    <html class=\"no-js ie8 oldie\" lang=\"en\"> <![endif]--><!--[if gt IE 8]><!--><html class=\"no-js\" lang=\"en\"> <!--<![endif]--><head><meta charset=\"UTF-8\"><title>");
              id (toHtml (pageTitle pc));
              id
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</title><meta name=\"description\" content=\"\"><meta name=\"author\" content=\"\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">");
              Text.Hamlet.asHtmlUrl (pageHead pc) _render_abOyz;
              id
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<!--[if lt IE 9]><script src=\"http://html5shiv.googlecode.com/svn/trunk/html5.js\"></script><![endif]--><script>document.documentElement.className = document.documentElement.className.replace(/\\bno-js\\b/,'js');</script></head><body><div class=\"container-fluid\"><header></header><div id=\"main\" role=\"main\">");
              Text.Hamlet.asHtmlUrl (pageBody pc) _render_abOyz;
              id
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</div><footer>copyright: Stefan von der Krone, <a href=\"http://www.imn.htwk-leipzig.de/~waldmann/\">Johannes Waldmann</a> </a>| <a href=\"https://portal.imn.htwk-leipzig.de/\">F-IMN</a> | <a href=\"http://www.htwk-leipzig.de/\">HTWK Leipzig</a></footer></div></body></html>") }

Foundation.hs:7:1: Warning:
    The import of `Yesod.Auth.BrowserId' is redundant
      except perhaps to import instances from `Yesod.Auth.BrowserId'
    To import instances alone, use: import Yesod.Auth.BrowserId()

Foundation.hs:81:9: Warning: Defined but not used: `master'

Foundation.hs:100:9: Warning:
    In the use of `giveUrlRenderer'
    (imported from Yesod, but defined in Yesod.Core.Handler):
    Deprecated: "Use withUrlRenderer instead"

Presenter/Model/Additional/Table.hs:3:1: Warning:
    The import of `Model' is redundant
      except perhaps to import instances from `Model'
    To import instances alone, use: import Model()
Handler/Home.hs:10:11-31: Splicing expression
    widgetFile "homepage"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h1>Termination Competition 2014 </h1>\n\
                   \<p>The <a href=\"http://termination-portal.org/wiki/Termination_Competition_2014\">International Termination Competition 2014 </a>\n\
                   \will be run on \n\
                   \<a href=\"http://www.starexec.org\">Star-Exec.</a>\n\
                   \</p>\n\
                   \<p>We provide here these extra features:<ul><li>computation and display of results per category, and medalists per meta-category</li>\n\
                   \<li>flexible 2-dimensional results tables (x-axis: solver, y-axis: benchmark) (with filters for rows and columns, sorters, etc.)</li>\n\
                   \<li>caching (and permanent storage) of results (we intend to include also results of earlier competitions)</li>\n\
                   \</ul>\n\
                   \</p>\n\
                   \This site:\n\
                   \<ul><li><a href=");
              (getUrlRenderParams
               >>=
                 (\ urender_ace5a
                    -> (asWidgetT . toWidget)
                         (toHtml (\ u_ace5b -> urender_ace5a u_ace5b [] RegisteredR))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   ">registered participants</a></li>\n\
                   \<li><a href=");
              (getUrlRenderParams
               >>=
                 (\ urender_ace5c
                    -> (asWidgetT . toWidget)
                         (toHtml
                            (\ u_ace5d -> urender_ace5c u_ace5d [] ListCompetitionsR))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   ">result data from test runs</a></li>\n\
                   \<li><a href=");
              (getUrlRenderParams
               >>=
                 (\ urender_ace5e
                    -> (asWidgetT . toWidget)
                         (toHtml (\ u_ace5f -> urender_ace5e u_ace5f [] ControlR))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   ">administration</a> (restricted access)</li>\n\
                   \</ul>\n\
                   \Meta-information for this site:\n\
                   \<ul><li>built with <a href=\"http://www.yesodweb.com/\">Yesod</a> (Haskell web framework)</li>\n\
                   \<li><a href=\"https://github.com/stefanvonderkrone/star-exec-presenter\">source code, issue tracker</a></li>\n\
                   \</ul>") } }
Handler/Registered.hs:12:11-33: Splicing expression
    widgetFile "registered"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>Registration for ");
              (asWidgetT . toWidget) (toHtml (competitionName comp));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</h2>\n\
                   \<a href=\"http://www.termination-portal.org/wiki/Termination_Competition_2014_Registration\">explanation</a>\n\
                   \<ul>");
              Data.Foldable.mapM_
                (\ mecat_aceMX
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "<li><h3>");
                           (asWidgetT . toWidget) (toHtml (metaCategoryName mecat_aceMX));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</h3>\n\
                                \will be run in the competition:\n\
                                \<ul>");
                           Data.Foldable.mapM_
                             (\ cat_aceMY
                                -> do { (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "<li>");
                                        (asWidgetT . toWidget) (toHtml (categoryName cat_aceMY));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             ":");
                                        Data.Foldable.mapM_
                                          (\ part_aceMZ
                                             -> do { Text.Hamlet.maybeH
                                                       (solver_config part_aceMZ)
                                                       (\ conf_aceN0
                                                          -> do { (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "<span class=\"conf\"> ");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (participantName
                                                                          part_aceMZ));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "</span>\n\
                                                                       \(<a href=\"https://www.starexec.org/starexec/secure/details/solver.jsp?id=");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (fst conf_aceN0));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "\">");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (show (fst conf_aceN0)));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       " </a>\n\
                                                                       \,<a href=\"https://www.starexec.org/starexec/secure/details/configuration.jsp?id=");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (snd conf_aceN0));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "\">");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (show (snd conf_aceN0)));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "</a>)") })
                                                       (Just
                                                          (do { (asWidgetT . toWidget)
                                                                  ((Text.Blaze.Internal.preEscapedText
                                                                    . Data.Text.pack)
                                                                     "<span class=\"noconf\">");
                                                                (asWidgetT . toWidget)
                                                                  (toHtml
                                                                     (participantName part_aceMZ));
                                                                (asWidgetT . toWidget)
                                                                  ((Text.Blaze.Internal.preEscapedText
                                                                    . Data.Text.pack)
                                                                     "</span>") }));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "| ") })
                                          (participants (contents cat_aceMY));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "</li>") })
                             (full_categories mecat_aceMX);
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</ul>\n\
                                \will be run as demonstation:\n\
                                \<ul>");
                           Data.Foldable.mapM_
                             (\ cat_aceN1
                                -> do { (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "<li>");
                                        (asWidgetT . toWidget) (toHtml (categoryName cat_aceN1));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             ":");
                                        Data.Foldable.mapM_
                                          (\ part_aceN2
                                             -> do { Text.Hamlet.maybeH
                                                       (solver_config part_aceN2)
                                                       (\ conf_aceN3
                                                          -> do { (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "<span class=\"conf\"> ");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (participantName
                                                                          part_aceN2));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "</span>\n\
                                                                       \(<a href=\"https://www.starexec.org/starexec/secure/details/solver.jsp?id=");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (fst conf_aceN3));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "\">");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (show (fst conf_aceN3)));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       " </a>\n\
                                                                       \,<a href=\"https://www.starexec.org/starexec/secure/details/configuration.jsp?id=");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (snd conf_aceN3));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "\">");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (show (snd conf_aceN3)));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . Data.Text.pack)
                                                                       "</a>)") })
                                                       (Just
                                                          (do { (asWidgetT . toWidget)
                                                                  ((Text.Blaze.Internal.preEscapedText
                                                                    . Data.Text.pack)
                                                                     "<span class=\"noconf\">");
                                                                (asWidgetT . toWidget)
                                                                  (toHtml
                                                                     (participantName part_aceN2));
                                                                (asWidgetT . toWidget)
                                                                  ((Text.Blaze.Internal.preEscapedText
                                                                    . Data.Text.pack)
                                                                     "</span>") }));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "| ") })
                                          (participants (contents cat_aceN1));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "</li>") })
                             (demonstration_categories mecat_aceMX);
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</ul>\n\
                                \</li>") })
                (metacategories comp);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "</ul>") };
         toWidget
           (\ _render_aceN4
              -> (shakespeare-2.0.2.1:Text.Css.CssNoWhitespace . (foldr ($) []))
                   [((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "span.conf"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#80FFB0"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             []))),
                    ((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "span.noconf"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFF99"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             [])))]) }
Handler/DisplayProof.hs:(47,21)-(49,22): Splicing expression
    " \n\
    \                      <p>Sorry, there is no job-pair with the id #{show _pairId} or it has no html-proof!\n\
    \                    "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "<p>Sorry, there is no job-pair with the id ");
         (asWidgetT . toWidget) (toHtml (show _pairId));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              " or it has no html-proof!</p>") }
Handler/Import.hs:52:19-37: Splicing expression
    widgetFile "import"
  ======>
    do { do { Text.Hamlet.maybeH
                mUploadContent
                (\ uploadContent_acrtw
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<h3>File-Upload successfull:</h3>");
                           (asWidgetT . toWidget)
                             (toHtml (show (source uploadContent_acrtw)));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "");
                           (asWidgetT . toWidget)
                             (toHtml (show (fileName (file uploadContent_acrtw)))) })
                Nothing;
              Text.Hamlet.maybeH
                mFormError
                (\ formError_acrtx
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<h3>Form-Upload failed:</h3>");
                           (asWidgetT . toWidget) (toHtml formError_acrtx) })
                Nothing;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h1>Import old data from previous competitions</h1>\n\
                   \<form method=\"post\" action=\"");
              (getUrlRenderParams
               >>=
                 (\ urender_acrty
                    -> (asWidgetT . toWidget)
                         (toHtml (\ u_acrtz -> urender_acrty u_acrtz [] ImportR))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "\" enctype=\"");
              (asWidgetT . toWidget) (toHtml enctype);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "\">");
              (asWidgetT . toWidget) widget;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "\n\
                   \<button class=\"btn btn-primary\" type=\"submit\">Upload</button>\n\
                   \</form>") } }
Handler/Import.hs:107:19-37: Splicing expression
    widgetFile "import"
  ======>
    do { do { Text.Hamlet.maybeH
                mUploadContent
                (\ uploadContent_acrtZ
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<h3>File-Upload successfull:</h3>");
                           (asWidgetT . toWidget)
                             (toHtml (show (source uploadContent_acrtZ)));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "");
                           (asWidgetT . toWidget)
                             (toHtml (show (fileName (file uploadContent_acrtZ)))) })
                Nothing;
              Text.Hamlet.maybeH
                mFormError
                (\ formError_acru0
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<h3>Form-Upload failed:</h3>");
                           (asWidgetT . toWidget) (toHtml formError_acru0) })
                Nothing;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h1>Import old data from previous competitions</h1>\n\
                   \<form method=\"post\" action=\"");
              (getUrlRenderParams
               >>=
                 (\ urender_acru1
                    -> (asWidgetT . toWidget)
                         (toHtml (\ u_acru2 -> urender_acru1 u_acru2 [] ImportR))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "\" enctype=\"");
              (asWidgetT . toWidget) (toHtml enctype);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "\">");
              (asWidgetT . toWidget) widget;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "\n\
                   \<button class=\"btn btn-primary\" type=\"submit\">Upload</button>\n\
                   \</form>") } }

Handler/Import.hs:18:1: Warning:
    The qualified import of `Codec.Compression.GZip' is redundant
      except perhaps to import instances from `Codec.Compression.GZip'
    To import instances alone, use: import Codec.Compression.GZip()

Handler/Import.hs:19:1: Warning:
    The qualified import of `Codec.Archive.Tar' is redundant
      except perhaps to import instances from `Codec.Archive.Tar'
    To import instances alone, use: import Codec.Archive.Tar()

Handler/Import.hs:48:3: Warning: Defined but not used: `maid'

Handler/Import.hs:91:3: Warning: Defined but not used: `maid'

Handler/Import.hs:117:7: Warning:
    This binding for `benchmarks' shadows the existing binding
      imported from `Import' at Handler/Import.hs:3:1-13
      (and originally defined in `Presenter.Model.StarExec'
         at Presenter/Model/StarExec.hs:54:5-14)

Handler/Import.hs:149:5: Warning:
    This binding for `insertMany' shadows the existing binding
      imported from `Import' at Handler/Import.hs:3:1-13
      (and originally defined in `persistent-1.3.3:Database.Persist.Class.PersistStore')

Handler/Import.hs:150:5: Warning:
    This binding for `insert' shadows the existing binding
      imported from `Import' at Handler/Import.hs:3:1-13
      (and originally defined in `persistent-1.3.3:Database.Persist.Class.PersistStore')

Handler/Import.hs:172:5: Warning:
    This binding for `insert' shadows the existing binding
      imported from `Import' at Handler/Import.hs:3:1-13
      (and originally defined in `persistent-1.3.3:Database.Persist.Class.PersistStore')

Handler/Import.hs:190:5: Warning:
    This binding for `insert' shadows the existing binding
      imported from `Import' at Handler/Import.hs:3:1-13
      (and originally defined in `persistent-1.3.3:Database.Persist.Class.PersistStore')

Presenter/PersistHelper.hs:15:1: Warning:
    Top-level binding with no type signature:
      getEntityList :: forall site b.
                       (PersistEntity b,
                        PersistQuery (YesodPersistBackend site (HandlerT site IO)),
                        YesodPersist site,
                        PersistEntityBackend b
                        ~ PersistMonadBackend
                            (YesodPersistBackend site (HandlerT site IO))) =>
                       [Filter b] -> [SelectOpt b] -> HandlerT site IO [b]

Presenter/PersistHelper.hs:17:1: Warning:
    Top-level binding with no type signature:
      getEntityList' :: forall (m :: * -> *) b.
                        (PersistEntity b, PersistQuery m,
                         PersistEntityBackend b ~ PersistMonadBackend m) =>
                        [Filter b] -> [SelectOpt b] -> m [b]

Presenter/PersistHelper.hs:21:1: Warning:
    Top-level binding with no type signature:
      getEntity :: forall site b.
                   (PersistEntity b,
                    PersistUnique (YesodPersistBackend site (HandlerT site IO)),
                    YesodPersist site,
                    PersistEntityBackend b
                    ~ PersistMonadBackend
                        (YesodPersistBackend site (HandlerT site IO))) =>
                   Unique b -> HandlerT site IO (Maybe b)

Presenter/PersistHelper.hs:23:1: Warning:
    Top-level binding with no type signature:
      getEntity' :: forall (m :: * -> *) b.
                    (PersistEntity b, PersistUnique m,
                     PersistEntityBackend b ~ PersistMonadBackend m) =>
                    Unique b -> m (Maybe b)

Presenter/PersistHelper.hs:27:1: Warning:
    Top-level binding with no type signature:
      getEntityVal' :: forall (m :: * -> *) a b.
                       (PersistEntity a, PersistUnique m,
                        PersistEntityBackend a ~ PersistMonadBackend m) =>
                       Unique a -> (a -> b) -> m (Maybe b)
Handler/ListHiddenCompetitions.hs:10:7-36: Splicing expression
    widgetFile "list_competitions"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>Test runs for preparing the Termination Competition 2014</h2>");
              Text.Hamlet.condH
                [(null competitionInfos, 
                  (asWidgetT . toWidget)
                    ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                       "<h1>Sorry, currently no test runs to be listed</h1>"))]
                (Just
                   (do { (asWidgetT . toWidget)
                           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "<ul>");
                         Data.Foldable.mapM_
                           (\ ci_acJVb
                              -> do { (asWidgetT . toWidget)
                                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                           "<li><a href=");
                                      (getUrlRenderParams
                                       >>=
                                         (\ urender_acJVc
                                            -> (asWidgetT . toWidget)
                                                 (toHtml
                                                    (\ u_acJVd -> urender_acJVc u_acJVd []
                                                       (CompetitionR (entityKey ci_acJVb))))));
                                      (asWidgetT . toWidget)
                                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) ">");
                                      (asWidgetT . toWidget)
                                        (toHtml
                                           (getCompetitionName
                                              (competitionInfoCompetition (entityVal ci_acJVb))));
                                      (asWidgetT . toWidget)
                                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                           "</a></li>") })
                           competitionInfos;
                         (asWidgetT . toWidget)
                           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                              "</ul>") })) } }
Handler/ListCompetitions.hs:10:7-36: Splicing expression
    widgetFile "list_competitions"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>Test runs for preparing the Termination Competition 2014</h2>");
              Text.Hamlet.condH
                [(null competitionInfos, 
                  (asWidgetT . toWidget)
                    ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                       "<h1>Sorry, currently no test runs to be listed</h1>"))]
                (Just
                   (do { (asWidgetT . toWidget)
                           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "<ul>");
                         Data.Foldable.mapM_
                           (\ ci_acLGS
                              -> do { (asWidgetT . toWidget)
                                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                           "<li><a href=");
                                      (getUrlRenderParams
                                       >>=
                                         (\ urender_acLGT
                                            -> (asWidgetT . toWidget)
                                                 (toHtml
                                                    (\ u_acLGU -> urender_acLGT u_acLGU []
                                                       (CompetitionR (entityKey ci_acLGS))))));
                                      (asWidgetT . toWidget)
                                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) ">");
                                      (asWidgetT . toWidget)
                                        (toHtml
                                           (getCompetitionName
                                              (competitionInfoCompetition (entityVal ci_acLGS))));
                                      (asWidgetT . toWidget)
                                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                           "</a></li>") })
                           competitionInfos;
                         (asWidgetT . toWidget)
                           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                              "</ul>") })) } }
Handler/ListJobPairs.hs:22:7-33: Splicing expression
    widgetFile "list_job_pairs"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>All job-pairs listed in the database</h2>\n\
                   \<div class=\"container-fluid\"><table class=\"table table-condensed\"><thead><tr><th>Name</th>\n\
                   \<th></th>\n\
                   \<th></th>\n\
                   \</tr>\n\
                   \</thead>\n\
                   \<tbody>");
              Data.Foldable.mapM_
                (\ result_acNsz
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<tr><td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acNsA
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acNsB -> urender_acNsA u_acNsB []
                                            (ShowJobPairR (getPairID result_acNsz))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) ">");
                           (asWidgetT . toWidget) (toHtml (show (getPairID result_acNsz)));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</a></td>\n\
                                \<td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acNsC
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acNsD -> urender_acNsC u_acNsD []
                                            (ShowJobInfoR (getJobID result_acNsz))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                ">view related job</a></td>\n\
                                \<td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acNsE
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acNsF -> urender_acNsE u_acNsF []
                                            (ShowManyJobResultsR
                                               NoQuery (JobIds [getJobID result_acNsz]))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                ">view job results</a></td>\n\
                                \</tr>") })
                results;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</tbody>\n\
                   \</table>\n\
                   \</div>") } }
Handler/ListProofs.hs:40:7-30: Splicing expression
    widgetFile "list_proofs"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>All proofs listed in the database</h2>\n\
                   \<div class=\"container-fluid\"><table class=\"table table-condensed\"><thead><tr><th>Job-Name</th>\n\
                   \<th>Job-Pair-Result</th>\n\
                   \<th>Additional</th>\n\
                   \</tr>\n\
                   \</thead>\n\
                   \<tbody>");
              Data.Foldable.mapM_
                (\ (pair_acPFu, mResult_acPFv, mJob_acPFw)
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "<tr><td>");
                           Text.Hamlet.maybeH
                             mJob_acPFw
                             (\ job_acPFx
                                -> do { (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "<a href=\"");
                                        (getUrlRenderParams
                                         >>=
                                           (\ urender_acPFy
                                              -> (asWidgetT . toWidget)
                                                   (toHtml
                                                      (\ u_acPFz -> urender_acPFy u_acPFz []
                                                         (ShowJobInfoR (toJobID job_acPFx))))));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "\">");
                                        (asWidgetT . toWidget) (toHtml (toJobName job_acPFx));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "</a></a>") })
                             (Just
                                ((asWidgetT . toWidget)
                                   ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                      "no job found")));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</td>\n\
                                \<td>");
                           Text.Hamlet.maybeH
                             mResult_acPFv
                             (\ result_acPFA
                                -> (asWidgetT . toWidget)
                                     (toHtml (show (getSolverResult result_acPFA))))
                             (Just
                                ((asWidgetT . toWidget)
                                   ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                      "no result")));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</td>\n\
                                \<td><a href=\"");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acPFB
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acPFC -> urender_acPFB u_acPFC []
                                            (DisplayProofR (id2Text pair_acPFu))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "\">view proof</a> /</a>\n\
                                \<a href=\"");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acPFD
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acPFE -> urender_acPFD u_acPFE []
                                            (ShowJobPairR (getPairID_ pair_acPFu))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "\">view job-pair</a></a>\n\
                                \</td>\n\
                                \</tr>") })
                pairs;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</tbody>\n\
                   \</table>\n\
                   \</div>") } }

Handler/ListProofs.hs:5:1: Warning:
    The import of `Data.Maybe' is redundant
      except perhaps to import instances from `Data.Maybe'
    To import instances alone, use: import Data.Maybe()

Handler/ListProofs.hs:18:12: Warning:
    This binding for `pair' shadows the existing binding
      imported from `Import' at Handler/ListProofs.hs:3:1-13
      (and originally defined in `Presenter.Model.Complexity'
         at Presenter/Model/Complexity.hs:48:1-4)
Handler/ListJobs.hs:20:7-28: Splicing expression
    widgetFile "list_jobs"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>All jobs listed in the database</h2>\n\
                   \<div class=\"container-fluid\"><table class=\"table table-condensed\"><thead><tr><th>Name</th>\n\
                   \<th>Status</th>\n\
                   \<th></th>\n\
                   \</tr>\n\
                   \</thead>\n\
                   \<tbody>");
              Data.Foldable.mapM_
                (\ job_acUNC
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<tr><td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acUND
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acUNE -> urender_acUND u_acUNE []
                                            (ShowJobInfoR (toJobID job_acUNC))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) ">");
                           (asWidgetT . toWidget) (toHtml (toJobName job_acUNC));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</a></td>\n\
                                \<td>");
                           (asWidgetT . toWidget) (toHtml (toJobStatus job_acUNC));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</td>\n\
                                \<td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acUNF
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acUNG -> urender_acUNF u_acUNG []
                                            (ShowManyJobResultsR
                                               NoQuery (JobIds [toJobID job_acUNC]))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                ">view results</a></td>\n\
                                \</tr>") })
                jobs;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</tbody>\n\
                   \</table>\n\
                   \</div>") } }
Handler/ListBenchmarks.hs:22:7-34: Splicing expression
    widgetFile "list_benchmarks"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>All solvers listed in the database</h2>\n\
                   \<div class=\"container-fluid\"><table class=\"table table-condensed\"><thead><tr><th>Name</th>\n\
                   \</tr>\n\
                   \</thead>\n\
                   \<tbody>");
              Data.Foldable.mapM_
                (\ benchmark_acXit
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<tr><td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acXiu
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acXiv -> urender_acXiu u_acXiv []
                                            (ShowBenchmarkInfoR
                                               (toBenchmarkID benchmark_acXit))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) ">");
                           (asWidgetT . toWidget) (toHtml (toBenchmarkName benchmark_acXit));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</a></td>\n\
                                \</tr>") })
                benchmarks;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</tbody>\n\
                   \</table>\n\
                   \</div>") } }

Handler/ListBenchmarks.hs:11:5: Warning:
    This binding for `benchmarks' shadows the existing binding
      imported from `Import' at Handler/ListBenchmarks.hs:3:1-13
      (and originally defined in `Presenter.Model.StarExec'
         at Presenter/Model/StarExec.hs:54:5-14)

Handler/ListBenchmarks.hs:14:5: Warning:
    This binding for `benchmarks' shadows the existing binding
      imported from `Import' at Handler/ListBenchmarks.hs:3:1-13
      (and originally defined in `Presenter.Model.StarExec'
         at Presenter/Model/StarExec.hs:54:5-14)

Handler/ListBenchmarks.hs:20:3: Warning:
    This binding for `benchmarks' shadows the existing binding
      imported from `Import' at Handler/ListBenchmarks.hs:3:1-13
      (and originally defined in `Presenter.Model.StarExec'
         at Presenter/Model/StarExec.hs:54:5-14)
Handler/ListSolvers.hs:20:7-31: Splicing expression
    widgetFile "list_solvers"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>All solvers listed in the database</h2>\n\
                   \<div class=\"container-fluid\"><table class=\"table table-condensed\"><thead><tr><th>Name</th>\n\
                   \</tr>\n\
                   \</thead>\n\
                   \<tbody>");
              Data.Foldable.mapM_
                (\ solver_acZrn
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<tr><td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_acZro
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_acZrp -> urender_acZro u_acZrp []
                                            (ShowSolverInfoR (toSolverID solver_acZrn))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) ">");
                           (asWidgetT . toWidget) (toHtml (toSolverName solver_acZrn));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</a></td>\n\
                                \</tr>") })
                solvers;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</tbody>\n\
                   \</table>\n\
                   \</div>") } }
Handler/ListPostProcs.hs:14:7-34: Splicing expression
    widgetFile "list_post_procs"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "<h2>All Post Processprs listed in the database</h2>\n\
                   \<div class=\"container-fluid\"><table class=\"table table-condensed\"><thead><tr><th>Name</th>\n\
                   \</tr>\n\
                   \</thead>\n\
                   \<tbody>");
              Data.Foldable.mapM_
                (\ proc_ad1A7
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<tr><td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_ad1A8
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_ad1A9 -> urender_ad1A8 u_ad1A9 []
                                            (ShowPostProcInfoR
                                               (StarExecPostProcID
                                                  (postProcInfoStarExecId proc_ad1A7)))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) ">");
                           (asWidgetT . toWidget) (toHtml (postProcInfoName proc_ad1A7));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</a></td>\n\
                                \</tr>") })
                postProcs;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</tbody>\n\
                   \</table>\n\
                   \</div>") } }
Presenter/Utils/WidgetMetaRefresh.hs:(8,12)-(10,4): Splicing expression
    "\n\
    \    <section>Data shown here is incomplete. This page will refresh with updates pulled from star-exec.\n\
    \  "
  ======>
    \ _render_ad3q2
      -> id
           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
              "<section>Data shown here is incomplete. This page will refresh with updates pulled from star-exec.</section>")
Presenter/Utils/WidgetMetaRefresh.hs:(11,16)-(13,4): Splicing expression
    "\n\
    \    <meta http-equiv=\"refresh\" content=\"10\">\n\
    \  "
  ======>
    \ _render_ad3q6
      -> id
           ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
              "<meta http-equiv=\"refresh\" content=\"10\">")
Presenter/Utils/WidgetTable.hs:41:41-62: Splicing expression
    " Benchmark "
  ======>
    (asWidgetT . toWidget)
      ((Text.Blaze.Internal.preEscapedText . T.pack) "Benchmark ")
Presenter/Utils/WidgetTable.hs:59:23-34: Splicing expression
    " " ======> return ghc-prim:GHC.Tuple.()
Presenter/Utils/WidgetTable.hs:(68,16)-(70,2): Splicing expression
    "\n\
    \<a href=@{ShowBenchmarkInfoR bid}>#{bname} "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "<a href=\"");
         (getUrlRenderParams
          >>=
            (\ urender_ad3Gx
               -> (asWidgetT . toWidget)
                    (toHtml
                       (\ u_ad3Gy -> urender_ad3Gx u_ad3Gy []
                          (ShowBenchmarkInfoR bid)))));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "\">");
         (asWidgetT . toWidget) (toHtml bname);
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) " </a>") }
Presenter/Utils/WidgetTable.hs:(79,16)-(82,2): Splicing expression
    "\n\
    \<a href=@{ShowSolverInfoR sid}>#{sname}</a>/#{cname}\n\
    \(<a href=@{ShowJobInfoR j}>#{show j}</a>)"
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "<a href=\"");
         (getUrlRenderParams
          >>=
            (\ urender_ad3GG
               -> (asWidgetT . toWidget)
                    (toHtml
                       (\ u_ad3GH -> urender_ad3GG u_ad3GH [] (ShowSolverInfoR sid)))));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "\">");
         (asWidgetT . toWidget) (toHtml sname);
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "</a>/");
         (asWidgetT . toWidget) (toHtml cname);
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "</a>\n\
              \(<a href=");
         (getUrlRenderParams
          >>=
            (\ urender_ad3GI
               -> (asWidgetT . toWidget)
                    (toHtml
                       (\ u_ad3GJ -> urender_ad3GI u_ad3GJ [] (ShowJobInfoR j)))));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) ">");
         (asWidgetT . toWidget) (toHtml (show j));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "</a>)") }
Presenter/Utils/WidgetTable.hs:(92,23)-(96,15): Splicing expression
    "\n\
    \            <a class=\"pair-link\" href=@{ShowJobPairR (getPairID result)}>\n\
    \                #{toFixed 1 $ toCpuTime result} /\n\
    \                #{toFixed 1 $ toWallclockTime result}\n\
    \             "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "<a class=\"pair-link\" href=\"");
         (getUrlRenderParams
          >>=
            (\ urender_ad3GO
               -> (asWidgetT . toWidget)
                    (toHtml
                       (\ u_ad3GP -> urender_ad3GO u_ad3GP []
                          (ShowJobPairR (getPairID result))))));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "\">");
         (asWidgetT . toWidget) (toHtml (toFixed 1 (toCpuTime result)));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) " /");
         (asWidgetT . toWidget)
           (toHtml (toFixed 1 (toWallclockTime result)));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "</a>") }
Presenter/Utils/WidgetTable.hs:(105,3)-(107,4): Splicing expression
    " \n\
    \      <a href=@{FlexibleTableR (Query []) jids}>remove following #{show (length ts)} transformations\n\
    \  "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "<a href=\"");
         (getUrlRenderParams
          >>=
            (\ urender_ad3GX
               -> (asWidgetT . toWidget)
                    (toHtml
                       (\ u_ad3GY -> urender_ad3GX u_ad3GY []
                          (FlexibleTableR (Query []) jids)))));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "\">remove following ");
         (asWidgetT . toWidget) (toHtml (show (length ts)));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              " transformations</a>") }
Presenter/Utils/WidgetTable.hs:(111,9)-(114,10): Splicing expression
    "\n\
    \            <h3>apply transformation\n\
    \               <pre>#{show t}\n\
    \        "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "<h3>apply transformation<pre>");
         (asWidgetT . toWidget) (toHtml (show t));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "</pre>\n\
              \</h3>") }
Presenter/Utils/WidgetTable.hs:(121,9)-(133,14): Splicing expression
    "\n\
    \             <h3>data\n\
    \             <table class=\"table\">\n\
    \              <thead>\n\
    \                <tr>             \n\
    \                    $forall h <- header tab\n\
    \                        <th> ^{contents h}\n\
    \              <tbody>\n\
    \                    $forall row <- rs\n\
    \                        <tr> \n\
    \                          $forall cell <- row\n\
    \                            <td class=\"#{tdclass cell}\"> ^{contents cell} \n\
    \            "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "<h3>data</h3>\n\
              \<table class=\"table\"><thead><tr>             ");
         Data.Foldable.mapM_
           (\ h_ad3H8
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "<th> ");
                      (asWidgetT . toWidget) (contents h_ad3H8);
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "</th>") })
           (header tab);
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "</tr>\n\
              \</thead>\n\
              \<tbody>");
         Data.Foldable.mapM_
           (\ row_ad3H9
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "<tr> ");
                      Data.Foldable.mapM_
                        (\ cell_ad3Ha
                           -> do { (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . T.pack) "<td class=\"");
                                   (asWidgetT . toWidget) (toHtml (tdclass cell_ad3Ha));
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . T.pack) "\"> ");
                                   (asWidgetT . toWidget) (contents cell_ad3Ha);
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . T.pack) " </td>") })
                        row_ad3H9;
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "</tr>") })
           rs;
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "</tbody>\n\
              \</table>") }
Presenter/Utils/WidgetTable.hs:(161,5)-(197,6): Splicing expression
    "\n\
    \        <h3>summary\n\
    \        total number of rows: #{show total}\n\
    \        <h3>columns, by tags\n\
    \        <table class=\"table\">\n\
    \          <thead>\n\
    \           <tr>             \n\
    \             $forall h <- header tab\n\
    \                <th> ^{contents h}\n\
    \          <tbody>\n\
    \             $forall r <- column_stats_table\n\
    \               <tr>\n\
    \                 $forall (t,i,n, (these, others)) <- r\n\
    \                    $if positive n\n\
    \                        <td class=\"#{t}\"> \n\
    \                          #{t} #{show n}\n\
    \                          <a href=@{FlexibleTableR these jids}>these\n\
    \                          | <a href=@{FlexibleTableR others jids}>others\n\
    \                    $else \n\
    \                        <td>\n\
    \        <h3>row types\n\
    \        <table class=\"table\">\n\
    \          <thead>\n\
    \           <tr>             \n\
    \             $forall h <- header tab\n\
    \                <th> ^{contents h}\n\
    \          <tbody>\n\
    \            $forall (rt, n, these,others) <- row_type_table\n\
    \              <tr>\n\
    \                $forall t <- rt\n\
    \                    <td class=\"#{t}\"> #{t}\n\
    \                <td> #{show n}\n\
    \                <td> \n\
    \                   <a href=@{FlexibleTableR these jids}>these\n\
    \                <td>\n\
    \                   <a href=@{FlexibleTableR others jids}>others\n\
    \    "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "<h3>summary</h3>\n\
              \total number of rows: ");
         (asWidgetT . toWidget) (toHtml (show total));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "\n\
              \<h3>columns, by tags</h3>\n\
              \<table class=\"table\"><thead><tr>             ");
         Data.Foldable.mapM_
           (\ h_ad3HE
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "<th> ");
                      (asWidgetT . toWidget) (contents h_ad3HE);
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "</th>") })
           (header tab);
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "</tr>\n\
              \</thead>\n\
              \<tbody>");
         Data.Foldable.mapM_
           (\ r_ad3HF
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "<tr>");
                      Data.Foldable.mapM_
                        (\ (t_ad3HG, i_ad3HH, n_ad3HI, (these_ad3HJ, others_ad3HK))
                           -> Text.Hamlet.condH
                                [(positive n_ad3HI, 
                                  do { (asWidgetT . toWidget)
                                         ((Text.Blaze.Internal.preEscapedText . T.pack)
                                            "<td class=\"");
                                       (asWidgetT . toWidget) (toHtml t_ad3HG);
                                       (asWidgetT . toWidget)
                                         ((Text.Blaze.Internal.preEscapedText . T.pack) "\"> ");
                                       (asWidgetT . toWidget) (toHtml t_ad3HG);
                                       (asWidgetT . toWidget)
                                         ((Text.Blaze.Internal.preEscapedText . T.pack) " ");
                                       (asWidgetT . toWidget) (toHtml (show n_ad3HI));
                                       (asWidgetT . toWidget)
                                         ((Text.Blaze.Internal.preEscapedText . T.pack)
                                            "\n\
                                            \<a href=\"");
                                       (getUrlRenderParams
                                        >>=
                                          (\ urender_ad3HL
                                             -> (asWidgetT . toWidget)
                                                  (toHtml
                                                     (\ u_ad3HM -> urender_ad3HL u_ad3HM []
                                                        (FlexibleTableR these_ad3HJ jids)))));
                                       (asWidgetT . toWidget)
                                         ((Text.Blaze.Internal.preEscapedText . T.pack)
                                            "\">these</a>\n\
                                            \| <a href=");
                                       (getUrlRenderParams
                                        >>=
                                          (\ urender_ad3HN
                                             -> (asWidgetT . toWidget)
                                                  (toHtml
                                                     (\ u_ad3HO -> urender_ad3HN u_ad3HO []
                                                        (FlexibleTableR others_ad3HK jids)))));
                                       (asWidgetT . toWidget)
                                         ((Text.Blaze.Internal.preEscapedText . T.pack)
                                            ">others</td>") })]
                                (Just
                                   ((asWidgetT . toWidget)
                                      ((Text.Blaze.Internal.preEscapedText . T.pack) "<td></td>"))))
                        r_ad3HF;
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "</tr>") })
           column_stats_table;
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "</tbody>\n\
              \</table>\n\
              \<h3>row types</h3>\n\
              \<table class=\"table\"><thead><tr>             ");
         Data.Foldable.mapM_
           (\ h_ad3HP
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "<th> ");
                      (asWidgetT . toWidget) (contents h_ad3HP);
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "</th>") })
           (header tab);
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "</tr>\n\
              \</thead>\n\
              \<tbody>");
         Data.Foldable.mapM_
           (\ (rt_ad3HQ, n_ad3HR, these_ad3HS, others_ad3HT)
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "<tr>");
                      Data.Foldable.mapM_
                        (\ t_ad3HU
                           -> do { (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . T.pack) "<td class=\"");
                                   (asWidgetT . toWidget) (toHtml t_ad3HU);
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . T.pack) "\"> ");
                                   (asWidgetT . toWidget) (toHtml t_ad3HU);
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . T.pack) "</td>") })
                        rt_ad3HQ;
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) "<td> ");
                      (asWidgetT . toWidget) (toHtml (show n_ad3HR));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack)
                           "</td>\n\
                           \<td> <a href=\"");
                      (getUrlRenderParams
                       >>=
                         (\ urender_ad3HV
                            -> (asWidgetT . toWidget)
                                 (toHtml
                                    (\ u_ad3HW -> urender_ad3HV u_ad3HW []
                                       (FlexibleTableR these_ad3HS jids)))));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack)
                           "\">these</a>\n\
                           \</td>\n\
                           \<td><a href=\"");
                      (getUrlRenderParams
                       >>=
                         (\ urender_ad3HX
                            -> (asWidgetT . toWidget)
                                 (toHtml
                                    (\ u_ad3HY -> urender_ad3HX u_ad3HY []
                                       (FlexibleTableR others_ad3HT jids)))));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack)
                           "\">others</a>\n\
                           \</td>\n\
                           \</tr>") })
           row_type_table;
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "</tbody>\n\
              \</table>") }

Presenter/Utils/WidgetTable.hs:10:1: Warning:
    The qualified import of `Data.Text' is redundant
      except perhaps to import instances from `Data.Text'
    To import instances alone, use: import Data.Text()

Presenter/Utils/WidgetTable.hs:161:14: Warning:
    Defined but not used: `i_ad3HH'

Presenter/Utils/WidgetTable.hs:161:14: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Show a0)
        arising from a use of `show'
        at Presenter/Utils/WidgetTable.hs:(161,14)-(197,6)
      (Ord a0)
        arising from a use of `positive'
        at Presenter/Utils/WidgetTable.hs:(161,14)-(197,6)
      (Num a0)
        arising from a use of `+'
        at Presenter/Utils/WidgetTable.hs:138:39-41
    In the first argument of `toHtml', namely `show n_ad3HI'
    In the first argument of `asWidgetT . toWidget', namely
      `toHtml (show n_ad3HI)'
    In a stmt of a 'do' block:
      (asWidgetT . toWidget) (toHtml (show n_ad3HI))

Presenter/Utils/WidgetTable.hs:161:14: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Show a0)
        arising from a use of `show'
        at Presenter/Utils/WidgetTable.hs:(161,14)-(197,6)
      (Ord a0)
        arising from a use of `compare'
        at Presenter/Utils/WidgetTable.hs:156:40-46
      (Num a0)
        arising from a use of `+'
        at Presenter/Utils/WidgetTable.hs:153:41-43
    In the first argument of `toHtml', namely `show n_ad3HR'
    In the first argument of `asWidgetT . toWidget', namely
      `toHtml (show n_ad3HR)'
    In a stmt of a 'do' block:
      (asWidgetT . toWidget) (toHtml (show n_ad3HR))

Presenter/Utils/WidgetTable.hs:200:15: Warning:
    Pattern match(es) are non-exhaustive
    In a case alternative: Patterns not matched: Choose_Columns _
Presenter/StarExec/Commands.hs:(191,106)-(205,8): Splicing expression
    "\n\
    \       $forall j <- js\n\
    \          <Job name=\"#{job_name j}\">\n\
    \            <JobAttributes>\n\
    \              <description value=\"#{description j}\"/>\n\
    \              <queue-id value=\"#{t $ queue_id j}\"/>\n\
    \              <start-paused value=\"#{b $ start_paused j}\"/>\n\
    \              <postproc-id value=\"#{t $ postproc_id j}\"/>\n\
    \              <cpu-timeout value=\"#{t $ cpu_timeout j}\"/>\n\
    \              <wallclock-timeout value=\"#{t $ wallclock_timeout j}\"/>\n\
    \              <mem-limit value=\"#{t $ mem_limit j}\"/>\n\
    \            </JobAttributes>\n\
    \            $forall p <- jobpairs j\n\
    \                <JobPair job-space-path=\"#{path_sanitize $ jobPairSpace p}\" bench-id=\"#{t $ jobPairBench p}\" config-id=\"#{t $ jobPairConfig p}\">\n\
    \      "
  ======>
    concat
      [Data.Foldable.concatMap
         (\ j_adBja
            -> concat
                 [[NodeElement
                     (Element
                        (Name (T.pack "Job") Nothing Nothing)
                        (M.insert
                           (Name (T.pack "name") Nothing Nothing)
                           (T.concat [job_name j_adBja])
                           M.empty)
                        (concat
                           [[NodeElement
                               (Element
                                  (Name (T.pack "JobAttributes") Nothing Nothing)
                                  M.empty
                                  (concat
                                     [[NodeElement
                                         (Element
                                            (Name (T.pack "description") Nothing Nothing)
                                            (M.insert
                                               (Name (T.pack "value") Nothing Nothing)
                                               (T.concat [description j_adBja])
                                               (M.insert
                                                  (Name (T.pack "/") Nothing Nothing)
                                                  (T.concat [])
                                                  M.empty))
                                            (concat []))],
                                      [NodeElement
                                         (Element
                                            (Name (T.pack "queue-id") Nothing Nothing)
                                            (M.insert
                                               (Name (T.pack "value") Nothing Nothing)
                                               (T.concat [t (queue_id j_adBja)])
                                               (M.insert
                                                  (Name (T.pack "/") Nothing Nothing)
                                                  (T.concat [])
                                                  M.empty))
                                            (concat []))],
                                      [NodeElement
                                         (Element
                                            (Name (T.pack "start-paused") Nothing Nothing)
                                            (M.insert
                                               (Name (T.pack "value") Nothing Nothing)
                                               (T.concat [b (start_paused j_adBja)])
                                               (M.insert
                                                  (Name (T.pack "/") Nothing Nothing)
                                                  (T.concat [])
                                                  M.empty))
                                            (concat []))],
                                      [NodeElement
                                         (Element
                                            (Name (T.pack "postproc-id") Nothing Nothing)
                                            (M.insert
                                               (Name (T.pack "value") Nothing Nothing)
                                               (T.concat [t (postproc_id j_adBja)])
                                               (M.insert
                                                  (Name (T.pack "/") Nothing Nothing)
                                                  (T.concat [])
                                                  M.empty))
                                            (concat []))],
                                      [NodeElement
                                         (Element
                                            (Name (T.pack "cpu-timeout") Nothing Nothing)
                                            (M.insert
                                               (Name (T.pack "value") Nothing Nothing)
                                               (T.concat [t (cpu_timeout j_adBja)])
                                               (M.insert
                                                  (Name (T.pack "/") Nothing Nothing)
                                                  (T.concat [])
                                                  M.empty))
                                            (concat []))],
                                      [NodeElement
                                         (Element
                                            (Name (T.pack "wallclock-timeout") Nothing Nothing)
                                            (M.insert
                                               (Name (T.pack "value") Nothing Nothing)
                                               (T.concat [t (wallclock_timeout j_adBja)])
                                               (M.insert
                                                  (Name (T.pack "/") Nothing Nothing)
                                                  (T.concat [])
                                                  M.empty))
                                            (concat []))],
                                      [NodeElement
                                         (Element
                                            (Name (T.pack "mem-limit") Nothing Nothing)
                                            (M.insert
                                               (Name (T.pack "value") Nothing Nothing)
                                               (T.concat [t (mem_limit j_adBja)])
                                               (M.insert
                                                  (Name (T.pack "/") Nothing Nothing)
                                                  (T.concat [])
                                                  M.empty))
                                            (concat []))]]))],
                            [NodeElement
                               (Element
                                  (Name (T.pack "/JobAttributes") Nothing Nothing)
                                  M.empty
                                  (concat []))],
                            Data.Foldable.concatMap
                              (\ p_adBjb
                                 -> concat
                                      [[NodeElement
                                          (Element
                                             (Name (T.pack "JobPair") Nothing Nothing)
                                             (M.insert
                                                (Name (T.pack "job-space-path") Nothing Nothing)
                                                (T.concat [path_sanitize (jobPairSpace p_adBjb)])
                                                (M.insert
                                                   (Name (T.pack "bench-id") Nothing Nothing)
                                                   (T.concat [t (jobPairBench p_adBjb)])
                                                   (M.insert
                                                      (Name (T.pack "config-id") Nothing Nothing)
                                                      (T.concat [t (jobPairConfig p_adBjb)])
                                                      M.empty)))
                                             (concat []))]])
                              (jobpairs j_adBja)]))]])
         js]

Presenter/StarExec/Commands.hs:69:1: Warning:
    Defined but not used: `decodeUtf8Body'

Presenter/StarExec/Commands.hs:444:14: Warning:
    Pattern match(es) are non-exhaustive
    In a case alternative: Patterns not matched: _ : (_ : _)

Presenter/StarExec/Concurrent.hs:24:1: Warning:
    Defined but not used: `debugTrace'

Presenter/StarExec/Concurrent.hs:38:1: Warning:
    Defined but not used: `runBaseConcurrent'

Presenter/StarExec/Concurrent.hs:66:1: Warning:
    Top-level binding with no type signature:
      runQueryInfo :: forall t t1 b.
                      (PersistEntity b,
                       PersistEntityBackend b
                       ~ persistent-1.3.3:Database.Persist.Sql.Types.SqlBackend) =>
                      (t1 -> SEQuery)
                      -> (t1 -> Unique b)
                      -> (t1 -> HandlerT App IO t)
                      -> t1
                      -> HandlerT App IO (QueryResult QueryInfo (Maybe b))

Presenter/StarExec/Concurrent.hs:137:1: Warning:
    Defined but not used: `resultIsCompleted'
Handler/ShowJobPair.hs:39:7-35: Splicing expression
    widgetFile "se_show_job_pair"
  ======>
    do { Text.Hamlet.maybeH
           mPair
           (\ pair_afeal
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h1>Overview of the job-pair ");
                      (asWidgetT . toWidget) (toHtml _id);
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</h1>\n\
                           \view original pair-info on star-exec: <a href=\"https://www.starexec.org/starexec/secure/details/pair.jsp?id=");
                      (asWidgetT . toWidget) (toHtml (show _id));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "\">");
                      (asWidgetT . toWidget) (toHtml (show _id));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "</a>");
                      Text.Hamlet.maybeH
                        mJobInfo
                        (\ jobInfo_afeam
                           -> do { (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                        "<p>This job-pair is a result of the job \"<a href=");
                                   (getUrlRenderParams
                                    >>=
                                      (\ urender_afean
                                         -> (asWidgetT . toWidget)
                                              (toHtml
                                                 (\ u_afeao -> urender_afean u_afeao []
                                                    (ShowJobInfoR (toJobID jobInfo_afeam))))));
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) ">");
                                   (asWidgetT . toWidget) (toHtml (toJobName jobInfo_afeam));
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                        "</a>\"<br/><a href=\"");
                                   (getUrlRenderParams
                                    >>=
                                      (\ urender_afeap
                                         -> (asWidgetT . toWidget)
                                              (toHtml
                                                 (\ u_afeaq -> urender_afeap u_afeaq []
                                                    (ShowManyJobResultsR
                                                       NoQuery
                                                       (JobIds [toJobID jobInfo_afeam]))))));
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                        "\">View Job-Results</a></a>\n\
                                        \</p>");
                                   Text.Hamlet.maybeH
                                     mSolverInfo
                                     (\ solverInfo_afear
                                        -> do { (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText
                                                    . Data.Text.pack)
                                                     "<p>The Solver was \"<a href=");
                                                (getUrlRenderParams
                                                 >>=
                                                   (\ urender_afeas
                                                      -> (asWidgetT . toWidget)
                                                           (toHtml
                                                              (\ u_afeat -> urender_afeas u_afeat []
                                                                 (ShowSolverInfoR
                                                                    (toSolverID
                                                                       solverInfo_afear))))));
                                                (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText
                                                    . Data.Text.pack)
                                                     ">");
                                                (asWidgetT . toWidget)
                                                  (toHtml (toSolverName solverInfo_afear));
                                                (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText
                                                    . Data.Text.pack)
                                                     "</a>\"</p>") })
                                     Nothing;
                                   Text.Hamlet.maybeH
                                     mBenchmarkInfo
                                     (\ benchInfo_afeau
                                        -> do { (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText
                                                    . Data.Text.pack)
                                                     "<p>The Benchmark was \"<a href=");
                                                (getUrlRenderParams
                                                 >>=
                                                   (\ urender_afeav
                                                      -> (asWidgetT . toWidget)
                                                           (toHtml
                                                              (\ u_afeaw -> urender_afeav u_afeaw []
                                                                 (ShowBenchmarkInfoR
                                                                    (toBenchmarkID
                                                                       benchInfo_afeau))))));
                                                (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText
                                                    . Data.Text.pack)
                                                     ">");
                                                (asWidgetT . toWidget)
                                                  (toHtml (toBenchmarkName benchInfo_afeau));
                                                (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText
                                                    . Data.Text.pack)
                                                     "</a>\"</p>") })
                                     Nothing;
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                        "<p>view original job pair data on star-exec: <a href=\"https://www.starexec.org/starexec/secure/details/pair.jsp?id=");
                                   (asWidgetT . toWidget) (toHtml _id);
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "\">");
                                   (asWidgetT . toWidget) (toHtml _id);
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                        "</a></p>") })
                        Nothing;
                      Text.Hamlet.condH
                        [(hasHtmlProof, 
                          do { (asWidgetT . toWidget)
                                 ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                    "<a href=\"");
                               (getUrlRenderParams
                                >>=
                                  (\ urender_afeax
                                     -> (asWidgetT . toWidget)
                                          (toHtml
                                             (\ u_afeay -> urender_afeax u_afeay []
                                                (DisplayProofR (int2Text _id))))));
                               (asWidgetT . toWidget)
                                 ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                    "\">Show Html-Proof</a></a>") })]
                        Nothing;
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h2>The data of the job-pair</h2>\n\
                           \<h3>Stdout:</h3>\n\
                           \<pre>");
                      (asWidgetT . toWidget) (toHtml (getStdout pair_afeal));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</pre>\n\
                           \<h3>Log:</h3>\n\
                           \<pre>");
                      (asWidgetT . toWidget) (toHtml (getLog pair_afeal));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "</pre>") })
           (Just
              (do { (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         "<h1>Sorry, no pair with the id ");
                    (asWidgetT . toWidget) (toHtml (int2Text _id));
                    (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         " found!</h1>\n\
                         \(try re-loading this page after a while)") })) }
Handler/ShowJobInfo.hs:43:7-35: Splicing expression
    widgetFile "se_show_job_info"
  ======>
    do { Text.Hamlet.maybeH
           mJobInfo
           (\ jobInfo_afonV
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h1>Job-Infos of \"");
                      (asWidgetT . toWidget) (toHtml (toJobName jobInfo_afonV));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\"</h1>\n\
                           \view original job-info on star-exec: <a href=\"https://www.starexec.org/starexec/secure/details/job.jsp?id=");
                      (asWidgetT . toWidget) (toHtml (show _id));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "\">");
                      (asWidgetT . toWidget) (toHtml (show _id));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</a>\n\
                           \<div class=\"container\"><table class=\"table\" style=\"width: auto;\"><tbody><tr><td>Name:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (toJobName jobInfo_afonV));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Status:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (show (toJobStatus jobInfo_afonV)));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Date (Star-Exec):</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getStarExecDate jobInfo_afonV));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Pre-Processor:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getPreProc jobInfo_afonV));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Post-Processor:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getPostProc jobInfo_afonV));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>IsComplexity:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isComplexity_ jobInfo_afonV));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Start-Date:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getStartDate jobInfo_afonV));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Finish-Date:</td>\n\
                           \<td>");
                      Text.Hamlet.maybeH
                        (getFinishDate jobInfo_afonV)
                        (\ date_afonW -> (asWidgetT . toWidget) (toHtml date_afonW))
                        (Just
                           ((asWidgetT . toWidget)
                              ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                 "The Job is not yet finished")));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Last Update from Star-Exec:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getLastUpdate jobInfo_afonV));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \</tbody>\n\
                           \</table>\n\
                           \<a href=\"");
                      (getUrlRenderParams
                       >>=
                         (\ urender_afonX
                            -> (asWidgetT . toWidget)
                                 (toHtml
                                    (\ u_afonY -> urender_afonX u_afonY []
                                       (ShowManyJobResultsR NoQuery (JobIds [jid]))))));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\">Show Job-Results</a></a>\n\
                           \</div>") })
           (Just
              (do { (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         "<h1>Sorry, no job with the id ");
                    (asWidgetT . toWidget) (toHtml (show _id));
                    (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         " found!</h1>\n\
                         \(try re-loading this page after a while)") })) }
Handler/ShowJobInfo.hs:47:7-36: Splicing expression
    widgetFile "lri_show_job_info"
  ======>
    do { Text.Hamlet.maybeH
           mJobInfo
           (\ jobInfo_afoo6
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h1>Job-Infos of \"");
                      (asWidgetT . toWidget) (toHtml (toJobName jobInfo_afoo6));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\"</h1>\n\
                           \<div class=\"container\"><table class=\"table\" style=\"width: auto;\"><tbody><tr><td>Name:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (toJobName jobInfo_afoo6));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Status:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (show (toJobStatus jobInfo_afoo6)));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \</tbody>\n\
                           \</table>\n\
                           \<a href=\"");
                      (getUrlRenderParams
                       >>=
                         (\ urender_afoo7
                            -> (asWidgetT . toWidget)
                                 (toHtml
                                    (\ u_afoo8 -> urender_afoo7 u_afoo8 []
                                       (ShowManyJobResultsR NoQuery (JobIds [jid]))))));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\">Show Job-Results</a></a>\n\
                           \</div>") })
           (Just
              (do { (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         "<h1>Sorry, no job with the id ");
                    (asWidgetT . toWidget) (toHtml (show _id));
                    (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         " found!</h1>") })) }
Handler/ShowBenchmarkInfo.hs:60:7-41: Splicing expression
    widgetFile "se_show_benchmark_info"
  ======>
    do { Text.Hamlet.maybeH
           mBenchmarkInfo
           (\ benchInfo_afvxl
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h1>Benchmark-Infos of \"");
                      (asWidgetT . toWidget) (toHtml (toBenchmarkName benchInfo_afvxl));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\"</h1>\n\
                           \view original benchmark-info on star-exec: <a href=\"https://www.starexec.org/starexec/secure/details/benchmark.jsp?id=");
                      (asWidgetT . toWidget) (toHtml (show _id));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "\">");
                      (asWidgetT . toWidget) (toHtml (show _id));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</a>\n\
                           \<div class=\"container\"><table class=\"table\" style=\"width: auto;\"><tbody><tr><td>Name:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (toBenchmarkName benchInfo_afvxl));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Type:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getBenchmarkType benchInfo_afvxl));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Last Update from Star-Exec:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getLastUpdate benchInfo_afvxl));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \</tbody>\n\
                           \</table>\n\
                           \</div>") })
           (Just
              (do { (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         "<h1>Sorry, no benchmark with the id ");
                    (asWidgetT . toWidget) (toHtml (show _id));
                    (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         " found!</h1>\n\
                         \(try re-loading this page after a while)") })) }
Handler/ShowBenchmarkInfo.hs:64:7-42: Splicing expression
    widgetFile "lri_show_benchmark_info"
  ======>
    do { Text.Hamlet.maybeH
           mBenchmarkInfo
           (\ benchInfo_afvxt
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h1>Benchmark-Infos of \"");
                      (asWidgetT . toWidget) (toHtml (toBenchmarkName benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\"</h1>\n\
                           \<div class=\"container\"><table class=\"table\" style=\"width: auto;\"><tbody><tr><td>Name:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (toBenchmarkName benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>File:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getFile benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Rating:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getRating benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Solved:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getSolved benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isConditional:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isConditional benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isContextSensitive:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget)
                        (toHtml (isContextSensitive benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isInnermost:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isInnermost benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isOutermost:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isOutermost benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isRelative:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isRelative benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isTheory:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isTheory benchInfo_afvxt));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \</tbody>\n\
                           \</table>\n\
                           \</div>") })
           (Just
              (do { (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         "<h1>Sorry, no benchmark with the id ");
                    (asWidgetT . toWidget) (toHtml (show _id));
                    (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         " found!</h1>") })) }
Handler/ShowSolverInfo.hs:57:7-38: Splicing expression
    widgetFile "se_show_solver_info"
  ======>
    do { Text.Hamlet.maybeH
           mSolverInfo
           (\ solverInfo_afBI8
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h1>Solver-Info of \"");
                      (asWidgetT . toWidget) (toHtml (toSolverName solverInfo_afBI8));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\"</h1>\n\
                           \view original solver-info on star-exec: <a href=\"https://www.starexec.org/starexec/secure/details/solver.jsp?id=");
                      (asWidgetT . toWidget) (toHtml (show _id));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "\">");
                      (asWidgetT . toWidget) (toHtml (show _id));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</a>\n\
                           \<div class=\"container\"><table class=\"table\" style=\"width: auto;\"><tbody><tr><td>Name:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (toSolverName solverInfo_afBI8));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Description:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getDescription solverInfo_afBI8));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Last Update from Star-Exec:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getLastUpdate solverInfo_afBI8));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \</tbody>\n\
                           \</table>\n\
                           \</div>") })
           (Just
              (do { (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         "<h1>Sorry, no solver with the id ");
                    (asWidgetT . toWidget) (toHtml (show _id));
                    (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         " found!</h1>\n\
                         \(try re-loading this page after a while)") })) }
Handler/ShowSolverInfo.hs:61:7-39: Splicing expression
    widgetFile "lri_show_solver_info"
  ======>
    do { Text.Hamlet.maybeH
           mSolverInfo
           (\ solverInfo_afBIg
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h1>Solver-Info of \"");
                      (asWidgetT . toWidget) (toHtml (toSolverName solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\"</h1>\n\
                           \<div class=\"container\"><table class=\"table\" style=\"width: auto;\"><tbody><tr><td>Name:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (toSolverName solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Author:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getAuthor solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Description:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (getDescription solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Url:</td>\n\
                           \<td><a href=\"");
                      (asWidgetT . toWidget) (toHtml (getUrl solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "\">");
                      (asWidgetT . toWidget) (toHtml (getUrl solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</a></td>\n\
                           \</tr>\n\
                           \<tr><td>isStandard:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isStandard solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isConditional:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isConditional solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isContextSensitive:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget)
                        (toHtml (isContextSensitive solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isInnermost:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isInnermost solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isTheory:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isTheory solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>isCertifying:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (isCertifying solverInfo_afBIg));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \</tbody>\n\
                           \</table>\n\
                           \</div>") })
           (Just
              (do { (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         "<h1>Sorry, no solver with the id ");
                    (asWidgetT . toWidget) (toHtml (show _id));
                    (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         " found!</h1>") })) }

Handler/ShowSolverInfo.hs:10:1: Warning:
    Pattern match(es) are overlapped
    In an equation for `getDescription': getDescription _ = ...
Handler/ShowPostProcInfo.hs:14:7-38: Splicing expression
    widgetFile "show_post_proc_info"
  ======>
    do { Text.Hamlet.maybeH
           mPostProcInfo
           (\ procInfo_afG9W
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "<h1>Post-Processor-Infos of \"");
                      (asWidgetT . toWidget) (toHtml (postProcInfoName procInfo_afG9W));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "\"</h1>\n\
                           \<div class=\"container\"><table class=\"table\" style=\"width: auto;\"><tbody><tr><td>Name:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget) (toHtml (postProcInfoName procInfo_afG9W));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Description:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget)
                        (toHtml (postProcInfoDescription procInfo_afG9W));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \<tr><td>Last Update from Star-Exec:</td>\n\
                           \<td>");
                      (asWidgetT . toWidget)
                        (toHtml (show (postProcInfoLastUpdate procInfo_afG9W)));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                           "</td>\n\
                           \</tr>\n\
                           \</tbody>\n\
                           \</table>\n\
                           \</div>") })
           (Just
              (do { (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         "<h1>Sorry, no post-processor with the id ");
                    (asWidgetT . toWidget) (toHtml (show _procId));
                    (asWidgetT . toWidget)
                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                         " found!</h1>") })) }
Handler/ShowManyJobResults.hs:51:16-58: Splicing expression
    luciusFile "templates/solver_result.lucius"
  ======>
    \ _render_afHdY
      -> (shakespeare-2.0.2.1:Text.Css.CssNoWhitespace . (foldr ($) []))
           [((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > thead > tr",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > tbody > tr",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > tfoot > tr"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr
                          (.)
                          id
                          [((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-yes"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#80FFB0"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-no"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#228B22",
                                                                                     (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "\n\
                                                                                       \    "])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-maybe"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFF99"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-certified"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#5CB85C"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-error"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFCC66"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-nothing"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFFFF"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > thead",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > tbody",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > tfoot"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr
                          (.)
                          id
                          [((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#80FFB0"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#228B22"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFF99"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#5CB85C"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFCC66"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFFFF"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".legend"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "width"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "auto"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".pair-link"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "display"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "block"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "text-align"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "center"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "width"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "100%"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "height"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "100%"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "color"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "#000"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".container"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr
                          (.)
                          id
                          [((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "input"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "display"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "none"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "label"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "cursor"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "pointer"]),
                                                                               shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "margin-top"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "1em"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".checked-container"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "display"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "none"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr
                                  (.)
                                  id
                                  [((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".checked-container",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".table"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "width"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "auto"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++)))])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "input:checked + .container .checked-container"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "display"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "block"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "label:before"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "content"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "\"Show \""])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "input:checked + .container label:before"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "content"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "\"Hide \""])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".a"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "color"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "#428bca"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "text-decoration"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "none"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".a:hover",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".a:focus"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "color"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "#2a6496"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "text-decoration"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "underline"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".a:focus"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "outline"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "thin dotted"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "outline"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "5px auto -webkit-focus-ring-color"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "outline-offset"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "-2px"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     [])))]
Handler/ShowManyJobResults.hs:55:7-40: Splicing expression
    widgetFile "show_many_job_results"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "<h1>Overview of job-results</h1>\n\
                   \<a href=\"");
              (getUrlRenderParams
               >>=
                 (\ urender_afHe4
                    -> (asWidgetT . toWidget)
                         (toHtml
                            (\ u_afHe5 -> urender_afHe4 u_afHe5 []
                               (FlexibleTableR (Query []) jids)))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "\">flexible query (experimental) </a>\n\
                   \| view original jobs on star-exec:");
              Data.Foldable.mapM_
                (\ jid_afHe6
                   -> Text.Hamlet.condH
                        [(isStarExecID jid_afHe6, 
                          do { (asWidgetT . toWidget)
                                 ((Text.Blaze.Internal.preEscapedText . T.pack)
                                    "<a href=\"https://www.starexec.org/starexec/secure/details/job.jsp?id=");
                               (asWidgetT . toWidget) (toHtml (getStarExecId jid_afHe6));
                               (asWidgetT . toWidget)
                                 ((Text.Blaze.Internal.preEscapedText . T.pack) "\">");
                               (asWidgetT . toWidget) (toHtml (getStarExecId jid_afHe6));
                               (asWidgetT . toWidget)
                                 ((Text.Blaze.Internal.preEscapedText . T.pack) "</a>,</a>") })]
                        Nothing)
                (getIds jids);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "<h2>Statistics</h2>");
              (asWidgetT . toWidget) (toHtml stat);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "\n\
                   \<h2>Results</h2>\n\
                   \<div class=\"container\"><input type=\"checkbox\" id=\"legend\">\n\
                   \<div class=\"container\"><label class=\"a\" for=\"legend\">Legend</label>\n\
                   \<div class=\"checked-container\"><h3>Legend</h3>\n\
                   \<div><table class=\"table legend\"><tbody><tr><td class=\"solver-yes\">YES</td>\n\
                   \<td class=\"solver-no\">NO</td>\n\
                   \<td class=\"solver-maybe\">MAYBE</td>\n\
                   \<td class=\"solver-certified\">CERTIFIED</td>\n\
                   \<td class=\"solver-error\">ERROR</td>\n\
                   \<td class=\"solver-nothing\">OTHER / Nothing</td>\n\
                   \</tr>\n\
                   \</tbody>\n\
                   \</table>\n\
                   \The results are displayed in the following pattern:\n\
                   \<code> cpu-time / wallclock-time (complexity-score)</code>\n\
                   \</div>\n\
                   \</div>\n\
                   \</div>\n\
                   \</div>\n\
                   \<table class=\"table\"><thead><tr><th>Jobs</th>");
              Data.Foldable.mapM_
                (\ (jobInfo_afHe7, i_afHe8)
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) "<th colspan=\"");
                           (asWidgetT . toWidget) (toHtml i_afHe8);
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) "\"><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_afHe9
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_afHea -> urender_afHe9 u_afHea []
                                            (ShowJobInfoR (toJobID jobInfo_afHe7))))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) ">");
                           (asWidgetT . toWidget) (toHtml (toJobName jobInfo_afHe7));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) "</a></th>") })
                (zip jobInfos (map length groupedSolvers));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "</tr>\n\
                   \<tr><th>Solver</th>");
              Data.Foldable.mapM_
                (\ (__afHeb, (sId_afHec, sName_afHed))
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) "<th><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_afHee
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_afHef -> urender_afHee u_afHef []
                                            (ShowSolverInfoR sId_afHec)))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) ">");
                           (asWidgetT . toWidget) (toHtml sName_afHed);
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) "</a></th>") })
                jobSolvers;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "</tr>\n\
                   \<tr><th>Scores</th>");
              Data.Foldable.mapM_
                (\ (solvers_afHeg, scores_afHeh)
                   -> Data.Foldable.mapM_
                        (\ (sId_afHei, __afHej)
                           -> do { (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . T.pack) "<th>");
                                   Text.Hamlet.maybeH
                                     (M.lookup sId_afHei scores_afHeh)
                                     (\ score_afHek -> (asWidgetT . toWidget) (toHtml score_afHek))
                                     (Just
                                        ((asWidgetT . toWidget)
                                           ((Text.Blaze.Internal.preEscapedText . T.pack) "0")));
                                   (asWidgetT . toWidget)
                                     ((Text.Blaze.Internal.preEscapedText . T.pack) "</th>") })
                        solvers_afHeg)
                (zip groupedSolvers scores);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "</tr>\n\
                   \</thead>\n\
                   \<tbody>");
              Data.Foldable.mapM_
                (\ ((bId_afHel, bName_afHem), results_afHen)
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) "<tr><td><a href=");
                           (getUrlRenderParams
                            >>=
                              (\ urender_afHeo
                                 -> (asWidgetT . toWidget)
                                      (toHtml
                                         (\ u_afHep -> urender_afHeo u_afHep []
                                            (ShowBenchmarkInfoR bId_afHel)))));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) ">");
                           (asWidgetT . toWidget) (toHtml (shorten bName_afHem));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) "</a></td>");
                           Data.Foldable.mapM_
                             (\ mResult_afHeq
                                -> Text.Hamlet.maybeH
                                     mResult_afHeq
                                     (\ result_afHer
                                        -> do { (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText . T.pack)
                                                     "<td class=\"");
                                                (asWidgetT . toWidget)
                                                  (toHtml (getClass result_afHer));
                                                (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText . T.pack)
                                                     "\">");
                                                Text.Hamlet.condH
                                                  [(isResultComplete result_afHer, 
                                                    do { (asWidgetT . toWidget)
                                                           ((Text.Blaze.Internal.preEscapedText
                                                             . T.pack)
                                                              "<a class=\"pair-link\" href=\"");
                                                         (getUrlRenderParams
                                                          >>=
                                                            (\ urender_afHes
                                                               -> (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (\ u_afHet
                                                                          -> urender_afHes
                                                                               u_afHet []
                                                                          (ShowJobPairR
                                                                             (getPairID
                                                                                result_afHer))))));
                                                         (asWidgetT . toWidget)
                                                           ((Text.Blaze.Internal.preEscapedText
                                                             . T.pack)
                                                              "\">");
                                                         (asWidgetT . toWidget)
                                                           (toHtml
                                                              (toFixed 1 (toCpuTime result_afHer)));
                                                         (asWidgetT . toWidget)
                                                           ((Text.Blaze.Internal.preEscapedText
                                                             . T.pack)
                                                              " /");
                                                         (asWidgetT . toWidget)
                                                           (toHtml
                                                              (toFixed
                                                                 1 (toWallclockTime result_afHer)));
                                                         (asWidgetT . toWidget)
                                                           ((Text.Blaze.Internal.preEscapedText
                                                             . T.pack)
                                                              " s");
                                                         Text.Hamlet.condH
                                                           [(complexity, 
                                                             Text.Hamlet.maybeH
                                                               (toScore result_afHer)
                                                               (\ score_afHeu
                                                                  -> do { (asWidgetT . toWidget)
                                                                            ((Text.Blaze.Internal.preEscapedText
                                                                              . T.pack)
                                                                               "&nbsp;(");
                                                                          (asWidgetT . toWidget)
                                                                            (toHtml
                                                                               (getScore
                                                                                  result_afHer));
                                                                          (asWidgetT . toWidget)
                                                                            ((Text.Blaze.Internal.preEscapedText
                                                                              . T.pack)
                                                                               ")") })
                                                               (Just
                                                                  ((asWidgetT . toWidget)
                                                                     ((Text.Blaze.Internal.preEscapedText
                                                                       . T.pack)
                                                                        "&nbsp;(-)"))))]
                                                           Nothing;
                                                         (asWidgetT . toWidget)
                                                           ((Text.Blaze.Internal.preEscapedText
                                                             . T.pack)
                                                              "</a>") })]
                                                  (Just
                                                     ((asWidgetT . toWidget)
                                                        ((Text.Blaze.Internal.preEscapedText
                                                          . T.pack)
                                                           "not finished")));
                                                (asWidgetT . toWidget)
                                                  ((Text.Blaze.Internal.preEscapedText . T.pack)
                                                     "</td>") })
                                     (Just
                                        ((asWidgetT . toWidget)
                                           ((Text.Blaze.Internal.preEscapedText . T.pack)
                                              "<td></td>"))))
                             results_afHen;
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack) "</tr>") })
                benchmarkResults;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "</tbody>\n\
                   \</table>") } }
Handler/ShowManyJobResults.hs:62:16-58: Splicing expression
    luciusFile "templates/solver_result.lucius"
  ======>
    \ _render_afHeF
      -> (shakespeare-2.0.2.1:Text.Css.CssNoWhitespace . (foldr ($) []))
           [((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > thead > tr",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > tbody > tr",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > tfoot > tr"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr
                          (.)
                          id
                          [((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-yes",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-yes"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#80FFB0"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-no",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-no"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#228B22",
                                                                                     (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "\n\
                                                                                       \    "])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-maybe",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-maybe"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFF99"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-certified",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-certified"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#5CB85C"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-error",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-error"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFCC66"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> td.solver-nothing",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot > tr",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> th.solver-nothing"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFFFF"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > thead",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > tbody",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".table > tfoot"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr
                          (.)
                          id
                          [((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-yes > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#80FFB0"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-no > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#228B22"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-maybe > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFF99"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-certified > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#5CB85C"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-error > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFCC66"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > thead",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tbody",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".table > tfoot",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "> tr.solver-nothing > th"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFFFFF"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".legend"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "width"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "auto"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".pair-link"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "display"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "block"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "text-align"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "center"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "width"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "100%"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "height"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "100%"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "color"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "#000"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".container"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr
                          (.)
                          id
                          [((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "input"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "display"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "none"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "label"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "cursor"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "pointer"]),
                                                                               shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "margin-top"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "1em"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".checked-container"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "display"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "none"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr
                                  (.)
                                  id
                                  [((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".checked-container",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".table"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "width"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "auto"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++)))])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "input:checked + .container .checked-container"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "display"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "block"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "label:before"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "content"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "\"Show \""])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++))),
                           ((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  " ",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  "input:checked + .container label:before"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "content"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "\"Hide \""])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".a"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "color"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "#428bca"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "text-decoration"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "none"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".a:hover",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ",",
                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".a:focus"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "color"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "#2a6496"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "text-decoration"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "underline"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     []))),
            ((++)
             $ (map
                  shakespeare-2.0.2.1:Text.Css.TopBlock
                  (((shakespeare-2.0.2.1:Text.Css.Block
                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                          ".a:focus"],
                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "outline"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "thin dotted"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "outline"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "5px auto -webkit-focus-ring-color"]),
                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "outline-offset"])
                                                                         (mconcat
                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                               "-2px"])]
                                                                      ghc-prim:GHC.Types.:
                                                                        (map
                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                           []))),
                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                   ghc-prim:GHC.Types.:)
                    . ((foldr (.) id [])
                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                     [])))]
Handler/ShowManyJobResults.hs:(66,5)-(68,10): Splicing expression
    "\n\
    \            <pre>#{show q}\n\
    \        "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "<pre>");
         (asWidgetT . toWidget) (toHtml (show q));
         (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack) "</pre>") }

Handler/ShowManyJobResults.hs:55:7: Warning:
    Defined but not used: `score_afHeu'

Presenter/CompetitionResults.hs:38:1: Warning:
    Defined but not used: `isYes'

Presenter/CompetitionResults.hs:43:11: Warning:
    This binding for `solver' shadows the existing binding
      imported from `Import' at Presenter/CompetitionResults.hs:16:1-13
      (and originally defined in `Presenter.Model.CompetitionResults'
         at Presenter/Model/CompetitionResults.hs:17:5-10)

Presenter/CompetitionResults.hs:65:14: Warning:
    This binding for `score' shadows the existing binding
      imported from `Import' at Presenter/CompetitionResults.hs:16:1-13
      (and originally defined in `Presenter.Model.CompetitionResults'
         at Presenter/Model/CompetitionResults.hs:18:5-9)

Presenter/CompetitionResults.hs:67:20: Warning:
    This binding for `solver' shadows the existing binding
      imported from `Import' at Presenter/CompetitionResults.hs:16:1-13
      (and originally defined in `Presenter.Model.CompetitionResults'
         at Presenter/Model/CompetitionResults.hs:17:5-10)

Presenter/CompetitionResults.hs:67:28: Warning:
    This binding for `score' shadows the existing binding
      imported from `Import' at Presenter/CompetitionResults.hs:16:1-13
      (and originally defined in `Presenter.Model.CompetitionResults'
         at Presenter/Model/CompetitionResults.hs:18:5-9)

Presenter/CompetitionResults.hs:70:15: Warning:
    This binding for `rank' shadows the existing binding
      imported from `Import' at Presenter/CompetitionResults.hs:16:1-13
      (and originally defined in `Presenter.Model.CompetitionResults'
         at Presenter/Model/CompetitionResults.hs:16:5-8)

Presenter/CompetitionResults.hs:105:1: Warning:
    Defined but not used: `getCategoriesResult'

Presenter/CompetitionResults.hs:113:7: Warning:
    This binding for `solver' shadows the existing binding
      imported from `Import' at Presenter/CompetitionResults.hs:16:1-13
      (and originally defined in `Presenter.Model.CompetitionResults'
         at Presenter/Model/CompetitionResults.hs:17:5-10)

Presenter/CompetitionResults.hs:117:7: Warning:
    This binding for `complete' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:13:7-14)

Presenter/CompetitionResults.hs:118:7: Warning:
    This binding for `startTime' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:14:7-15)

Presenter/CompetitionResults.hs:151:7: Warning:
    This binding for `solver' shadows the existing binding
      imported from `Import' at Presenter/CompetitionResults.hs:16:1-13
      (and originally defined in `Presenter.Model.CompetitionResults'
         at Presenter/Model/CompetitionResults.hs:17:5-10)

Presenter/CompetitionResults.hs:155:7: Warning:
    This binding for `complete' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:13:7-14)

Presenter/CompetitionResults.hs:156:7: Warning:
    This binding for `startTime' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:14:7-15)

Presenter/CompetitionResults.hs:184:1: Warning:
    Defined but not used: `getMetaResults'

Presenter/CompetitionResults.hs:190:7: Warning:
    This binding for `complete' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:13:7-14)

Presenter/CompetitionResults.hs:191:7: Warning:
    This binding for `startTime' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:14:7-15)

Presenter/CompetitionResults.hs:214:7: Warning:
    This binding for `complete' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:13:7-14)

Presenter/CompetitionResults.hs:215:7: Warning:
    This binding for `startTime' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:14:7-15)

Presenter/CompetitionResults.hs:311:7: Warning:
    Defined but not used: `compName'

Presenter/CompetitionResults.hs:352:7: Warning:
    This binding for `complete' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:13:7-14)

Presenter/CompetitionResults.hs:353:7: Warning:
    This binding for `startTime' shadows the existing binding
      imported from `Presenter.Statistics' at Presenter/CompetitionResults.hs:19:1-27
      (and originally defined at Presenter/Statistics.hs:14:7-15)

Presenter/CompetitionResults.hs:235:1: Warning:
    Pattern match(es) are non-exhaustive
    In an equation for `fromMaybeTuple':
        Patterns not matched: (_, Nothing)

Presenter/CompetitionResults.hs:280:5: Warning:
    Pattern match(es) are non-exhaustive
    In an equation for updateJob':
        Patterns not matched:
            (Just (LriJob _), Just _)
            (Just (StarExecJob _), Just (LriJob _))

Presenter/STM.hs:18:30: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Num b0) arising from the literal `6' at Presenter/STM.hs:18:30
      (Integral b0) arising from a use of `^' at Presenter/STM.hs:18:29
    In the second argument of `(^)', namely `6'
    In the second argument of `(*)', namely `10 ^ 6'
    In the expression: 10 * 10 ^ 6
Handler/Control.hs:46:19-38: Splicing expression
    widgetFile "control"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "<h1>Create Jobs on Star-Exec</h1>\n\
                   \beware: depending on parameter settings below, you can burn a lot of cpu cycles on star-exec.\n\
                   \<form method=\"post\" action=\"");
              (getUrlRenderParams
               >>=
                 (\ urender_akOtG
                    -> (asWidgetT . toWidget)
                         (toHtml (\ u_akOtH -> urender_akOtG u_akOtH [] ControlR))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack) "\" enctype=\"");
              (asWidgetT . toWidget) (toHtml enctype);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack) "\"><p><a href=");
              (getUrlRenderParams
               >>=
                 (\ urender_akOtI
                    -> (asWidgetT . toWidget)
                         (toHtml (\ u_akOtJ -> urender_akOtI u_akOtJ [] (AuthR LogoutR)))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   ">Logout</a></p>\n\
                   \<h2>Job Parameters</h2>\n\
                   \<table>");
              (asWidgetT . toWidget) widget;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   " </table>\n\
                   \<h2>Select Benchmarks</h2>\n\
                   \<h3><input type=submit name=control value=\"comp:");
              (asWidgetT . toWidget) (toHtml (R.competitionName comp));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "\"></h3>\n\
                   \<ul>");
              Data.Foldable.mapM_
                (\ mecat_akOtK
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack)
                                "<li><h3><input type=submit name=control value=\"mc:");
                           (asWidgetT . toWidget) (toHtml (R.metaCategoryName mecat_akOtK));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack)
                                "\"></h3>\n\
                                \<ul>");
                           Data.Foldable.mapM_
                             (\ cat_akOtL
                                -> do { (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . T.pack)
                                             "<li><input type=\"submit\" name=\"control\" value=\"cat:");
                                        (asWidgetT . toWidget) (toHtml (R.categoryName cat_akOtL));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . T.pack)
                                             "\">\n\
                                             \<ul><li>Benchmarks:");
                                        Data.Foldable.mapM_
                                          (\ b_akOtM
                                             -> do { (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "Bench <a href=\"https://www.starexec.org/starexec/secure/details/benchmark.jsp?id=");
                                                     (asWidgetT . toWidget) (toHtml b_akOtM);
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "\">");
                                                     (asWidgetT . toWidget) (toHtml b_akOtM);
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "</a>,") })
                                          (benches (R.benchmarks (R.contents cat_akOtL)));
                                        Data.Foldable.mapM_
                                          (\ s_akOtN
                                             -> do { (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "All ");
                                                     (asWidgetT . toWidget) (toHtml s_akOtN);
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          ",") })
                                          (alls (R.benchmarks (R.contents cat_akOtL)));
                                        Data.Foldable.mapM_
                                          (\ s_akOtO
                                             -> do { (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "Hier ");
                                                     (asWidgetT . toWidget) (toHtml s_akOtO);
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          ",") })
                                          (hierarchies (R.benchmarks (R.contents cat_akOtL)));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . T.pack)
                                             "</li>\n\
                                             \<li>Solvers:");
                                        Data.Foldable.mapM_
                                          (\ part_akOtP
                                             -> do { Text.Hamlet.maybeH
                                                       (R.solver_config part_akOtP)
                                                       (\ conf_akOtQ
                                                          -> do { (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "<span class=\"conf\"><a href=\"https://www.starexec.org/starexec/secure/details/solver.jsp?id=");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (fst conf_akOtQ));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "\">");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (R.participantName
                                                                          part_akOtP));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "</a></a>\n\
                                                                       \(<a href=\"https://www.starexec.org/starexec/secure/details/configuration.jsp?id=");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (snd conf_akOtQ));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "\">");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (snd conf_akOtQ));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "</a>)</span>") })
                                                       (Just
                                                          (do { (asWidgetT . toWidget)
                                                                  ((Text.Blaze.Internal.preEscapedText
                                                                    . T.pack)
                                                                     "<span class=\"noconf\">");
                                                                (asWidgetT . toWidget)
                                                                  (toHtml
                                                                     (R.participantName
                                                                        part_akOtP));
                                                                (asWidgetT . toWidget)
                                                                  ((Text.Blaze.Internal.preEscapedText
                                                                    . T.pack)
                                                                     "</span>") }));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "| ") })
                                          (R.participants (R.contents cat_akOtL));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . T.pack)
                                             "</li>\n\
                                             \</ul>\n\
                                             \</li>") })
                             (R.categories mecat_akOtK);
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack)
                                "</ul>\n\
                                \</li>") })
                (R.metacategories comp);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "</ul>\n\
                   \</form>") } }
Handler/Control.hs:(71,5)-(77,6): Splicing expression
    "\n\
    \      <h2>Result of previous command\n\
    \      $maybe key <- mKey\n\
    \        jobs started, <a href=@{CompetitionR key}>output</a>\n\
    \      $nothing\n\
    \        could not start jobs\n\
    \    "
  ======>
    do { (asWidgetT . toWidget)
           ((Text.Blaze.Internal.preEscapedText . T.pack)
              "<h2>Result of previous command</h2>");
         Text.Hamlet.maybeH
           mKey
           (\ key_akOu9
              -> do { (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack)
                           "jobs started, <a href=");
                      (getUrlRenderParams
                       >>=
                         (\ urender_akOua
                            -> (asWidgetT . toWidget)
                                 (toHtml
                                    (\ u_akOub -> urender_akOua u_akOub []
                                       (CompetitionR key_akOu9)))));
                      (asWidgetT . toWidget)
                        ((Text.Blaze.Internal.preEscapedText . T.pack) ">output</a>") })
           (Just
              ((asWidgetT . toWidget)
                 ((Text.Blaze.Internal.preEscapedText . T.pack)
                    "could not start jobs"))) }
Handler/Control.hs:78:7-26: Splicing expression
    widgetFile "control"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "<h1>Create Jobs on Star-Exec</h1>\n\
                   \beware: depending on parameter settings below, you can burn a lot of cpu cycles on star-exec.\n\
                   \<form method=\"post\" action=\"");
              (getUrlRenderParams
               >>=
                 (\ urender_akOug
                    -> (asWidgetT . toWidget)
                         (toHtml (\ u_akOuh -> urender_akOug u_akOuh [] ControlR))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack) "\" enctype=\"");
              (asWidgetT . toWidget) (toHtml enctype);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack) "\"><p><a href=");
              (getUrlRenderParams
               >>=
                 (\ urender_akOui
                    -> (asWidgetT . toWidget)
                         (toHtml (\ u_akOuj -> urender_akOui u_akOuj [] (AuthR LogoutR)))));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   ">Logout</a></p>\n\
                   \<h2>Job Parameters</h2>\n\
                   \<table>");
              (asWidgetT . toWidget) widget;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   " </table>\n\
                   \<h2>Select Benchmarks</h2>\n\
                   \<h3><input type=submit name=control value=\"comp:");
              (asWidgetT . toWidget) (toHtml (R.competitionName comp));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "\"></h3>\n\
                   \<ul>");
              Data.Foldable.mapM_
                (\ mecat_akOuk
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack)
                                "<li><h3><input type=submit name=control value=\"mc:");
                           (asWidgetT . toWidget) (toHtml (R.metaCategoryName mecat_akOuk));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack)
                                "\"></h3>\n\
                                \<ul>");
                           Data.Foldable.mapM_
                             (\ cat_akOul
                                -> do { (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . T.pack)
                                             "<li><input type=\"submit\" name=\"control\" value=\"cat:");
                                        (asWidgetT . toWidget) (toHtml (R.categoryName cat_akOul));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . T.pack)
                                             "\">\n\
                                             \<ul><li>Benchmarks:");
                                        Data.Foldable.mapM_
                                          (\ b_akOum
                                             -> do { (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "Bench <a href=\"https://www.starexec.org/starexec/secure/details/benchmark.jsp?id=");
                                                     (asWidgetT . toWidget) (toHtml b_akOum);
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "\">");
                                                     (asWidgetT . toWidget) (toHtml b_akOum);
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "</a>,") })
                                          (benches (R.benchmarks (R.contents cat_akOul)));
                                        Data.Foldable.mapM_
                                          (\ s_akOun
                                             -> do { (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "All ");
                                                     (asWidgetT . toWidget) (toHtml s_akOun);
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          ",") })
                                          (alls (R.benchmarks (R.contents cat_akOul)));
                                        Data.Foldable.mapM_
                                          (\ s_akOuo
                                             -> do { (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "Hier ");
                                                     (asWidgetT . toWidget) (toHtml s_akOuo);
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          ",") })
                                          (hierarchies (R.benchmarks (R.contents cat_akOul)));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . T.pack)
                                             "</li>\n\
                                             \<li>Solvers:");
                                        Data.Foldable.mapM_
                                          (\ part_akOup
                                             -> do { Text.Hamlet.maybeH
                                                       (R.solver_config part_akOup)
                                                       (\ conf_akOuq
                                                          -> do { (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "<span class=\"conf\"><a href=\"https://www.starexec.org/starexec/secure/details/solver.jsp?id=");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (fst conf_akOuq));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "\">");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml
                                                                       (R.participantName
                                                                          part_akOup));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "</a></a>\n\
                                                                       \(<a href=\"https://www.starexec.org/starexec/secure/details/configuration.jsp?id=");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (snd conf_akOuq));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "\">");
                                                                  (asWidgetT . toWidget)
                                                                    (toHtml (snd conf_akOuq));
                                                                  (asWidgetT . toWidget)
                                                                    ((Text.Blaze.Internal.preEscapedText
                                                                      . T.pack)
                                                                       "</a>)</span>") })
                                                       (Just
                                                          (do { (asWidgetT . toWidget)
                                                                  ((Text.Blaze.Internal.preEscapedText
                                                                    . T.pack)
                                                                     "<span class=\"noconf\">");
                                                                (asWidgetT . toWidget)
                                                                  (toHtml
                                                                     (R.participantName
                                                                        part_akOup));
                                                                (asWidgetT . toWidget)
                                                                  ((Text.Blaze.Internal.preEscapedText
                                                                    . T.pack)
                                                                     "</span>") }));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . T.pack)
                                                          "| ") })
                                          (R.participants (R.contents cat_akOul));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . T.pack)
                                             "</li>\n\
                                             \</ul>\n\
                                             \</li>") })
                             (R.categories mecat_akOuk);
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . T.pack)
                                "</ul>\n\
                                \</li>") })
                (R.metacategories comp);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . T.pack)
                   "</ul>\n\
                   \</form>") } }

Handler/Control.hs:16:1: Warning:
    Top-level binding with no type signature:
      inputForm :: forall site.
                   RenderMessage site FormMessage =>
                   Text.Blaze.Internal.Markup
                   -> Control.Monad.Trans.RWS.Lazy.RWST
                        (Maybe (Env, FileEnv), site, [Lang])
                        Enctype
                        Ints
                        (HandlerT site IO)
                        (FormResult JobControl, WidgetT site IO ())

Handler/Control.hs:43:3: Warning: Defined but not used: `maid'

Handler/Control.hs:50:3: Warning: Defined but not used: `maid'

Handler/Control.hs:133:21: Warning: Defined but not used: `name'
Handler/CompetitionWithConfig.hs:48:20-72: Splicing expression
    "competition currently not in results cache"
  ======>
    (asWidgetT . toWidget)
      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
         "competition currently not in results cache")
Handler/CompetitionWithConfig.hs:49:31-60: Splicing expression
    widgetFile "competition_slim2"
  ======>
    do { do { (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) "<h1>");
              (asWidgetT . toWidget) (toHtml (competitionName compResults));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</h1>\n\
                   \<p><a href=\"http://www.termination-portal.org/wiki/Termination_Competition_2014\">General Information</a></a>");
              (asWidgetT . toWidget)
                (toHtml (competitionDescription compResults));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) " ");
              (asWidgetT . toWidget)
                (toHtml (competitionStatistics compResults));
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack) " ");
              Text.Hamlet.condH
                [(competitionComplete compResults, 
                  do { (asWidgetT . toWidget)
                         ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                            "finished in ");
                       (asWidgetT . toWidget)
                         (toHtml
                            (getDuration
                               (competitionStartTime compResults)
                               (competitionFinishTime compResults))) })]
                Nothing;
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</p>\n\
                   \<div class=\"container-fluid\">");
              Data.Foldable.mapM_
                (\ compMetaResults_alqVt
                   -> do { (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "<div class=\"container-fluid\"><h3>");
                           (asWidgetT . toWidget)
                             (toHtml (metaCategoryName compMetaResults_alqVt));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</h3>\n\
                                \<p>");
                           Text.Hamlet.condH
                             [(metaCategoryComplete compMetaResults_alqVt, 
                               do { (asWidgetT . toWidget)
                                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                         "finished in ");
                                    (asWidgetT . toWidget)
                                      (toHtml
                                         (getDuration
                                            (metaCategoryStarTime compMetaResults_alqVt)
                                            (metaCategoryFinishTime compMetaResults_alqVt)));
                                    (asWidgetT . toWidget)
                                      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                         ",&nbsp;") })]
                             Nothing;
                           (asWidgetT . toWidget)
                             (toHtml (metaCategoryStatistics compMetaResults_alqVt));
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</p>\n\
                                \<div class=\"container-fluid\">\n\
                                \Combined Ranking (<a href=\"http://www.termination-portal.org/wiki/Termination_Competition_2014#Competition_Categories_and_Awards\">Rules</a>):\n\
                                \<ul class=\"list-inline\">");
                           Data.Foldable.mapM_
                             (\ entry_alqVu
                                -> do { (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "<li>");
                                        Text.Hamlet.maybeH
                                          (rank entry_alqVu)
                                          (\ rank_alqVv
                                             -> do { (asWidgetT . toWidget)
                                                       (toHtml (show rank_alqVv));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          ". ") })
                                          Nothing;
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "<a href=\"");
                                        (getUrlRenderParams
                                         >>=
                                           (\ urender_alqVw
                                              -> (asWidgetT . toWidget)
                                                   (toHtml
                                                      (\ u_alqVx -> urender_alqVw u_alqVx []
                                                         (ShowSolverInfoR
                                                            (fst (solver entry_alqVu)))))));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "\">");
                                        (asWidgetT . toWidget) (toHtml (snd (solver entry_alqVu)));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "</a> (");
                                        (asWidgetT . toWidget) (toHtml (show (score entry_alqVu)));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             ")</a>\n\
                                             \</li>") })
                             (metaCategoryRanking compMetaResults_alqVt);
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</ul>\n\
                                \\n\
                                \<table class=\"table table-condensed categories\"><thead><tr><th>category</th>\n\
                                \<th>post-proc</th>\n\
                                \<th>rankings</th>\n\
                                \<th>statistics</th>\n\
                                \</tr>\n\
                                \</thead>\n\
                                \<tbody>");
                           Data.Foldable.mapM_
                             (\ compCatResult_alqVy
                                -> do { (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "<tr class=\"");
                                        (asWidgetT . toWidget)
                                          (toHtml
                                             (getCompletionClass
                                                (categoryComplete compCatResult_alqVy)));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "\"><td><a href=");
                                        (getUrlRenderParams
                                         >>=
                                           (\ urender_alqVz
                                              -> (asWidgetT . toWidget)
                                                   (toHtml
                                                      (\ u_alqVA -> urender_alqVz u_alqVA []
                                                         (ShowManyJobResultsR
                                                            NoQuery
                                                            (JobIds
                                                               (map
                                                                  toJobID
                                                                  (categoryJobs
                                                                     compCatResult_alqVy))))))));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             ">");
                                        (asWidgetT . toWidget)
                                          (toHtml (categoryName compCatResult_alqVy));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "</a></td>\n\
                                             \<td>");
                                        Text.Hamlet.maybeH
                                          (categoryPostProc compCatResult_alqVy)
                                          (\ postProc_alqVB
                                             -> do { (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "<a href=\"");
                                                     (getUrlRenderParams
                                                      >>=
                                                        (\ urender_alqVC
                                                           -> (asWidgetT . toWidget)
                                                                (toHtml
                                                                   (\ u_alqVD
                                                                      -> urender_alqVC u_alqVD []
                                                                      (ShowPostProcInfoR
                                                                         (StarExecPostProcID
                                                                            (postProcInfoStarExecId
                                                                               postProc_alqVB)))))));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "\">");
                                                     (asWidgetT . toWidget)
                                                       (toHtml (postProcInfoName postProc_alqVB));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "</a>") })
                                          (Just
                                             ((asWidgetT . toWidget)
                                                ((Text.Blaze.Internal.preEscapedText
                                                  . Data.Text.pack)
                                                   "/")));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "</td>\n\
                                             \<td>");
                                        Data.Foldable.mapM_
                                          (\ entry_alqVE
                                             -> do { (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "<a href=\"");
                                                     (getUrlRenderParams
                                                      >>=
                                                        (\ urender_alqVF
                                                           -> (asWidgetT . toWidget)
                                                                (toHtml
                                                                   (\ u_alqVG
                                                                      -> urender_alqVF u_alqVG []
                                                                      (ShowSolverInfoR
                                                                         (fst
                                                                            (solver
                                                                               entry_alqVE)))))));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "\">");
                                                     (asWidgetT . toWidget)
                                                       (toHtml (snd (solver entry_alqVE)));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "</a>\n\
                                                          \(");
                                                     (asWidgetT . toWidget)
                                                       (toHtml (show (score entry_alqVE)));
                                                     (asWidgetT . toWidget)
                                                       ((Text.Blaze.Internal.preEscapedText
                                                         . Data.Text.pack)
                                                          "), ") })
                                          (categoryRanking compCatResult_alqVy);
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "</td>\n\
                                             \<td>");
                                        (asWidgetT . toWidget)
                                          (toHtml (categoryStatistics compCatResult_alqVy));
                                        (asWidgetT . toWidget)
                                          ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                             "</td>\n\
                                             \</tr>") })
                             (categoryResults compMetaResults_alqVt);
                           (asWidgetT . toWidget)
                             ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                                "</tbody>\n\
                                \</table>\n\
                                \</div>\n\
                                \</div>") })
                (metaCategoryResults compResults);
              (asWidgetT . toWidget)
                ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
                   "</div>\n\
                   \<p><a href=\"http://www.termination-portal.org/wiki/Termination_Competition_2014\">General Information</a></p>") };
         toWidget
           (\ _render_alqVH
              -> (shakespeare-2.0.2.1:Text.Css.CssNoWhitespace . (foldr ($) []))
                   [((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container-fluid"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr
                                  (.)
                                  id
                                  [((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          "input"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "display"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "none"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++))),
                                   ((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          "label"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "cursor"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "pointer"]),
                                                                                       shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "margin-top"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "1em"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++))),
                                   ((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".checked-container"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "display"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "none"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++))),
                                   ((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          "input:checked + div .checked-container"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "display"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "block"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++))),
                                   ((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          "label:before"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "content"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "\"show \""])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++))),
                                   ((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          "input:checked + div label:before"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "content"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "\"hide \""])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++)))])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             []))),
                    ((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".a"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#428bca"]),
                                                                               shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "text-decoration"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "none"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             []))),
                    ((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".a:hover",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".a:focus"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#2a6496"]),
                                                                               shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "text-decoration"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "underline"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             []))),
                    ((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".a:focus"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "outline"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "thin dotted"]),
                                                                               shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "outline"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "5px auto -webkit-focus-ring-color"]),
                                                                               shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "outline-offset"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "-2px"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             []))),
                    ((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".completed",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".completed td"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#DDFFCC",
                                                                                     (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       ""])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             []))),
                    ((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".running",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".running td"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "background-color"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "#FFDDCC",
                                                                                     (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       ""])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             []))),
                    ((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".container-fluid"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr
                                  (.)
                                  id
                                  [((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          "h3"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "display"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "inline"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++))),
                                   ((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          "h3 + p"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "display"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "inline"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++))),
                                   ((shakespeare-2.0.2.1:Text.Css.Block
                                       {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                                       [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          ".container-fluid",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          " ",
                                                                                        (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                         . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                          "ul"],
                                        shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                                   $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "display"])
                                                                                         (mconcat
                                                                                            [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                              . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                               "inline"])]
                                                                                      ghc-prim:GHC.Types.:
                                                                                        (map
                                                                                           shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                           []))),
                                        shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                        shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                                       shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                                   ghc-prim:GHC.Types.:)
                                    . ((foldr (.) id [])
                                       . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks []
                                          ++)))])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             []))),
                    ((++)
                     $ (map
                          shakespeare-2.0.2.1:Text.Css.TopBlock
                          (((shakespeare-2.0.2.1:Text.Css.Block
                               {shakespeare-2.0.2.1:Text.Css.blockSelector = mconcat
                                                                               [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".categories.table>thead>tr>th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".categories.table>tbody>tr>th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".categories.table>tfoot>tr>th",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".categories.table>thead>tr>td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".categories.table>tbody>tr>td",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ",",
                                                                                (shakespeare-2.0.2.1:Text.Css.fromText
                                                                                 . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                  ".categories.table>tfoot>tr>td"],
                                shakespeare-2.0.2.1:Text.Css.blockAttrs = (concat
                                                                           $ ([shakespeare-2.0.2.1:Text.Css.Attr
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "padding"])
                                                                                 (mconcat
                                                                                    [(shakespeare-2.0.2.1:Text.Css.fromText
                                                                                      . shakespeare-2.0.2.1:Text.Css.pack)
                                                                                       "0"])]
                                                                              ghc-prim:GHC.Types.:
                                                                                (map
                                                                                   shakespeare-2.0.2.1:Text.Css.mixinAttrs
                                                                                   []))),
                                shakespeare-2.0.2.1:Text.Css.blockBlocks = ghc-prim:GHC.Tuple.(),
                                shakespeare-2.0.2.1:Text.Css.blockMixins = ghc-prim:GHC.Tuple.()} ::
                               shakespeare-2.0.2.1:Text.Css.Block shakespeare-2.0.2.1:Text.Css.Resolved
                           ghc-prim:GHC.Types.:)
                            . ((foldr (.) id [])
                               . (concatMap shakespeare-2.0.2.1:Text.Css.mixinBlocks [] ++)))
                             [])))]) }

Handler/CompetitionWithConfig.hs:24:18: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Show a0)
        arising from a use of `show'
        at Handler/CompetitionWithConfig.hs:24:18-21
      (Integral a0)
        arising from a use of `floor'
        at Handler/CompetitionWithConfig.hs:23:26-30
    In the first argument of `(++)', namely `(show hours)'
    In the expression:
      (show hours)
      ++ "h " ++ renderTime (d - (fromIntegral hours) * hour)
    In the expression:
      let hours = floor $ d / hour
      in
        (show hours)
        ++ "h " ++ renderTime (d - (fromIntegral hours) * hour)

Handler/CompetitionWithConfig.hs:27:20: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Show a0)
        arising from a use of `show'
        at Handler/CompetitionWithConfig.hs:27:20-23
      (Integral a0)
        arising from a use of `floor'
        at Handler/CompetitionWithConfig.hs:26:30-34
    In the first argument of `(++)', namely `(show minutes)'
    In the expression:
      (show minutes)
      ++ "m " ++ renderTime (d - (fromIntegral minutes) * minute)
    In the expression:
      let minutes = floor $ d / minute
      in
        (show minutes)
        ++ "m " ++ renderTime (d - (fromIntegral minutes) * minute)

Handler/CompetitionWithConfig.hs:28:17: Warning:
    Defaulting the following constraint(s) to type `Integer'
      (Show s0)
        arising from a use of `show'
        at Handler/CompetitionWithConfig.hs:28:17-20
      (Integral s0)
        arising from a use of `floor'
        at Handler/CompetitionWithConfig.hs:28:24-28
    In the expression: show
    In the first argument of `(++)', namely `(show $ floor d)'
    In the expression: (show $ floor d) ++ "s"
Handler/Competition.hs:16:31-110: Splicing expression
    "this competition is not public, and you are not authorized to view it"
  ======>
    (asWidgetT . toWidget)
      ((Text.Blaze.Internal.preEscapedText . Data.Text.pack)
         "this competition is not public, and you are not authorized to view it")
Application.hs:1:1: Splicing declarations
    mkYesodDispatch "App" resourcesApp
  ======>
    Application.hs:69:1-34
    instance YesodDispatch App where
      yesodDispatch yesod_dispatch_env0_alYFH req0_alYFI
        = case
              dispatch_alYFJ (wai-3.0.2:Network.Wai.Internal.pathInfo req0_alYFI)
          of {
            Just f_alYKO -> f_alYKO yesod_dispatch_env0_alYFH req0_alYFI
            Nothing
              -> yesodRunner
                   (notFound >> (return ghc-prim:GHC.Tuple.()))
                   yesod_dispatch_env0_alYFH
                   Nothing
                   req0_alYFI }
        where
            dispatch_alYFJ
              = yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.toDispatch
                  [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "static")]
                     True
                     (\ pieces_alYFK
                        -> case pieces_alYFK of {
                             (:) _ xrest_alYFL
                               -> do { Just
                                         (\ yesod_dispatch_env_alYFN req_alYFO
                                            -> \ parentRunner_alYFQ
                                                 getSub_alYFR
                                                 toParent_alYFS
                                                 env_alYFT
                                                 -> yesodSubDispatch
                                                      (Yesod.Core.Types.YesodSubRunnerEnv
                                                         {Yesod.Core.Types.ysreParentRunner = parentRunner_alYFQ,
                                                          Yesod.Core.Types.ysreGetSub = getSub_alYFR,
                                                          Yesod.Core.Types.ysreToParentRoute = toParent_alYFS,
                                                          Yesod.Core.Types.ysreParentEnv = env_alYFT})
                                                 yesodRunner
                                                 (\ sub_alYFP -> getStatic sub_alYFP)
                                                 StaticR
                                                 yesod_dispatch_env_alYFN
                                                 (\ p_alYFU r_alYFV
                                                    -> r_alYFV
                                                         {wai-3.0.2:Network.Wai.Internal.pathInfo = p_alYFU}
                                                    xrest_alYFL req_alYFO)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "auth")]
                     True
                     (\ pieces_alYFW
                        -> case pieces_alYFW of {
                             (:) _ xrest_alYFX
                               -> do { Just
                                         (\ yesod_dispatch_env_alYFZ req_alYG0
                                            -> \ parentRunner_alYG2
                                                 getSub_alYG3
                                                 toParent_alYG4
                                                 env_alYG5
                                                 -> yesodSubDispatch
                                                      (Yesod.Core.Types.YesodSubRunnerEnv
                                                         {Yesod.Core.Types.ysreParentRunner = parentRunner_alYG2,
                                                          Yesod.Core.Types.ysreGetSub = getSub_alYG3,
                                                          Yesod.Core.Types.ysreToParentRoute = toParent_alYG4,
                                                          Yesod.Core.Types.ysreParentEnv = env_alYG5})
                                                 yesodRunner
                                                 (\ sub_alYG1 -> getAuth sub_alYG1)
                                                 AuthR
                                                 yesod_dispatch_env_alYFZ
                                                 (\ p_alYG6 r_alYG7
                                                    -> r_alYG7
                                                         {wai-3.0.2:Network.Wai.Internal.pathInfo = p_alYG6}
                                                    xrest_alYFX req_alYG0)) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "favicon.ico")]
                     False
                     (\ pieces_alYG8
                        -> case pieces_alYG8 of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYGb req_alYGc
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYGc)
                                                     methodsFaviconR
                                               of {
                                                 Just f_alYGe
                                                   -> let handler_alYGd = f_alYGe
                                                      in
                                                        handler_alYGd
                                                          yesod_dispatch_env_alYGb
                                                          (Just FaviconR)
                                                          req_alYGc
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYGb
                                                        (Just FaviconR)
                                                        req_alYGc }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "robots.txt")]
                     False
                     (\ pieces_alYGf
                        -> case pieces_alYGf of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYGi req_alYGj
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYGj)
                                                     methodsRobotsR
                                               of {
                                                 Just f_alYGl
                                                   -> let handler_alYGk = f_alYGl
                                                      in
                                                        handler_alYGk
                                                          yesod_dispatch_env_alYGi
                                                          (Just RobotsR)
                                                          req_alYGj
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYGi
                                                        (Just RobotsR)
                                                        req_alYGj }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     []
                     False
                     (\ pieces_alYGm
                        -> case pieces_alYGm of {
                             []
                               -> do { Just
                                         (\ yesod_dispatch_env_alYGp req_alYGq
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYGq)
                                                     methodsHomeR
                                               of {
                                                 Just f_alYGs
                                                   -> let handler_alYGr = f_alYGs
                                                      in
                                                        handler_alYGr
                                                          yesod_dispatch_env_alYGp
                                                          (Just HomeR)
                                                          req_alYGq
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYGp
                                                        (Just HomeR)
                                                        req_alYGq }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "pairs")]
                     False
                     (\ pieces_alYGt
                        -> case pieces_alYGt of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYGw req_alYGx
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYGx)
                                                     methodsListJobPairsR
                                               of {
                                                 Just f_alYGz
                                                   -> let handler_alYGy = f_alYGz
                                                      in
                                                        handler_alYGy
                                                          yesod_dispatch_env_alYGw
                                                          (Just ListJobPairsR)
                                                          req_alYGx
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYGw
                                                        (Just ListJobPairsR)
                                                        req_alYGx }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "pairs"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYGA
                        -> case pieces_alYGA of {
                             [_, x_alYGB]
                               -> do { y1_alYGC <- fromPathPiece x_alYGB;
                                       Just
                                         (\ yesod_dispatch_env_alYGF req_alYGG
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYGG)
                                                     methodsShowJobPairR
                                               of {
                                                 Just f_alYGI
                                                   -> let handler_alYGH = f_alYGI y1_alYGC
                                                      in
                                                        handler_alYGH
                                                          yesod_dispatch_env_alYGF
                                                          (Just (ShowJobPairR y1_alYGC))
                                                          req_alYGG
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYGF
                                                        (Just (ShowJobPairR y1_alYGC))
                                                        req_alYGG }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_job_pair"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYGJ
                        -> case pieces_alYGJ of {
                             [_, x_alYGK]
                               -> do { y1_alYGL <- fromPathPiece x_alYGK;
                                       Just
                                         (\ yesod_dispatch_env_alYGO req_alYGP
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYGP)
                                                     methodsLegacyShowJobPairR
                                               of {
                                                 Just f_alYGR
                                                   -> let handler_alYGQ = f_alYGR y1_alYGL
                                                      in
                                                        handler_alYGQ
                                                          yesod_dispatch_env_alYGO
                                                          (Just (LegacyShowJobPairR y1_alYGL))
                                                          req_alYGP
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYGO
                                                        (Just (LegacyShowJobPairR y1_alYGL))
                                                        req_alYGP }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "proofs")]
                     False
                     (\ pieces_alYGS
                        -> case pieces_alYGS of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYGV req_alYGW
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYGW)
                                                     methodsListProofsR
                                               of {
                                                 Just f_alYGY
                                                   -> let handler_alYGX = f_alYGY
                                                      in
                                                        handler_alYGX
                                                          yesod_dispatch_env_alYGV
                                                          (Just ListProofsR)
                                                          req_alYGW
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYGV
                                                        (Just ListProofsR)
                                                        req_alYGW }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "proofs"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYGZ
                        -> case pieces_alYGZ of {
                             [_, x_alYH0]
                               -> do { y1_alYH1 <- fromPathPiece x_alYH0;
                                       Just
                                         (\ yesod_dispatch_env_alYH4 req_alYH5
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYH5)
                                                     methodsDisplayProofR
                                               of {
                                                 Just f_alYH7
                                                   -> let handler_alYH6 = f_alYH7 y1_alYH1
                                                      in
                                                        handler_alYH6
                                                          yesod_dispatch_env_alYH4
                                                          (Just (DisplayProofR y1_alYH1))
                                                          req_alYH5
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYH4
                                                        (Just (DisplayProofR y1_alYH1))
                                                        req_alYH5 }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "display_proof"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYH8
                        -> case pieces_alYH8 of {
                             [_, x_alYH9]
                               -> do { y1_alYHa <- fromPathPiece x_alYH9;
                                       Just
                                         (\ yesod_dispatch_env_alYHd req_alYHe
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYHe)
                                                     methodsLegacyDisplayProofR
                                               of {
                                                 Just f_alYHg
                                                   -> let handler_alYHf = f_alYHg y1_alYHa
                                                      in
                                                        handler_alYHf
                                                          yesod_dispatch_env_alYHd
                                                          (Just (LegacyDisplayProofR y1_alYHa))
                                                          req_alYHe
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYHd
                                                        (Just (LegacyDisplayProofR y1_alYHa))
                                                        req_alYHe }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "jobs")]
                     False
                     (\ pieces_alYHh
                        -> case pieces_alYHh of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYHk req_alYHl
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYHl)
                                                     methodsListJobsR
                                               of {
                                                 Just f_alYHn
                                                   -> let handler_alYHm = f_alYHn
                                                      in
                                                        handler_alYHm
                                                          yesod_dispatch_env_alYHk
                                                          (Just ListJobsR)
                                                          req_alYHl
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYHk
                                                        (Just ListJobsR)
                                                        req_alYHl }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "jobs"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYHo
                        -> case pieces_alYHo of {
                             [_, x_alYHp]
                               -> do { y1_alYHq <- fromPathPiece x_alYHp;
                                       Just
                                         (\ yesod_dispatch_env_alYHt req_alYHu
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYHu)
                                                     methodsShowJobInfoR
                                               of {
                                                 Just f_alYHw
                                                   -> let handler_alYHv = f_alYHw y1_alYHq
                                                      in
                                                        handler_alYHv
                                                          yesod_dispatch_env_alYHt
                                                          (Just (ShowJobInfoR y1_alYHq))
                                                          req_alYHu
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYHt
                                                        (Just (ShowJobInfoR y1_alYHq))
                                                        req_alYHu }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_job_info"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYHx
                        -> case pieces_alYHx of {
                             [_, x_alYHy]
                               -> do { y1_alYHz <- fromPathPiece x_alYHy;
                                       Just
                                         (\ yesod_dispatch_env_alYHC req_alYHD
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYHD)
                                                     methodsLegacyShowJobInfoR
                                               of {
                                                 Just f_alYHF
                                                   -> let handler_alYHE = f_alYHF y1_alYHz
                                                      in
                                                        handler_alYHE
                                                          yesod_dispatch_env_alYHC
                                                          (Just (LegacyShowJobInfoR y1_alYHz))
                                                          req_alYHD
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYHC
                                                        (Just (LegacyShowJobInfoR y1_alYHz))
                                                        req_alYHD }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "benchmarks")]
                     False
                     (\ pieces_alYHG
                        -> case pieces_alYHG of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYHJ req_alYHK
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYHK)
                                                     methodsListBenchmarksR
                                               of {
                                                 Just f_alYHM
                                                   -> let handler_alYHL = f_alYHM
                                                      in
                                                        handler_alYHL
                                                          yesod_dispatch_env_alYHJ
                                                          (Just ListBenchmarksR)
                                                          req_alYHK
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYHJ
                                                        (Just ListBenchmarksR)
                                                        req_alYHK }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "benchmarks"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYHN
                        -> case pieces_alYHN of {
                             [_, x_alYHO]
                               -> do { y1_alYHP <- fromPathPiece x_alYHO;
                                       Just
                                         (\ yesod_dispatch_env_alYHS req_alYHT
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYHT)
                                                     methodsShowBenchmarkInfoR
                                               of {
                                                 Just f_alYHV
                                                   -> let handler_alYHU = f_alYHV y1_alYHP
                                                      in
                                                        handler_alYHU
                                                          yesod_dispatch_env_alYHS
                                                          (Just (ShowBenchmarkInfoR y1_alYHP))
                                                          req_alYHT
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYHS
                                                        (Just (ShowBenchmarkInfoR y1_alYHP))
                                                        req_alYHT }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_benchmark_info"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYHW
                        -> case pieces_alYHW of {
                             [_, x_alYHX]
                               -> do { y1_alYHY <- fromPathPiece x_alYHX;
                                       Just
                                         (\ yesod_dispatch_env_alYI1 req_alYI2
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYI2)
                                                     methodsLegacyShowBenchmarkInfoR
                                               of {
                                                 Just f_alYI4
                                                   -> let handler_alYI3 = f_alYI4 y1_alYHY
                                                      in
                                                        handler_alYI3
                                                          yesod_dispatch_env_alYI1
                                                          (Just (LegacyShowBenchmarkInfoR y1_alYHY))
                                                          req_alYI2
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYI1
                                                        (Just (LegacyShowBenchmarkInfoR y1_alYHY))
                                                        req_alYI2 }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "solvers")]
                     False
                     (\ pieces_alYI5
                        -> case pieces_alYI5 of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYI8 req_alYI9
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYI9)
                                                     methodsListSolversR
                                               of {
                                                 Just f_alYIb
                                                   -> let handler_alYIa = f_alYIb
                                                      in
                                                        handler_alYIa
                                                          yesod_dispatch_env_alYI8
                                                          (Just ListSolversR)
                                                          req_alYI9
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYI8
                                                        (Just ListSolversR)
                                                        req_alYI9 }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "solvers"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYIc
                        -> case pieces_alYIc of {
                             [_, x_alYId]
                               -> do { y1_alYIe <- fromPathPiece x_alYId;
                                       Just
                                         (\ yesod_dispatch_env_alYIh req_alYIi
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYIi)
                                                     methodsShowSolverInfoR
                                               of {
                                                 Just f_alYIk
                                                   -> let handler_alYIj = f_alYIk y1_alYIe
                                                      in
                                                        handler_alYIj
                                                          yesod_dispatch_env_alYIh
                                                          (Just (ShowSolverInfoR y1_alYIe))
                                                          req_alYIi
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYIh
                                                        (Just (ShowSolverInfoR y1_alYIe))
                                                        req_alYIi }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_solver_info"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYIl
                        -> case pieces_alYIl of {
                             [_, x_alYIm]
                               -> do { y1_alYIn <- fromPathPiece x_alYIm;
                                       Just
                                         (\ yesod_dispatch_env_alYIq req_alYIr
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYIr)
                                                     methodsLegacyShowSolverInfoR
                                               of {
                                                 Just f_alYIt
                                                   -> let handler_alYIs = f_alYIt y1_alYIn
                                                      in
                                                        handler_alYIs
                                                          yesod_dispatch_env_alYIq
                                                          (Just (LegacyShowSolverInfoR y1_alYIn))
                                                          req_alYIr
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYIq
                                                        (Just (LegacyShowSolverInfoR y1_alYIn))
                                                        req_alYIr }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "post_procs")]
                     False
                     (\ pieces_alYIu
                        -> case pieces_alYIu of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYIx req_alYIy
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYIy)
                                                     methodsListPostProcsR
                                               of {
                                                 Just f_alYIA
                                                   -> let handler_alYIz = f_alYIA
                                                      in
                                                        handler_alYIz
                                                          yesod_dispatch_env_alYIx
                                                          (Just ListPostProcsR)
                                                          req_alYIy
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYIx
                                                        (Just ListPostProcsR)
                                                        req_alYIy }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "post_procs"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYIB
                        -> case pieces_alYIB of {
                             [_, x_alYIC]
                               -> do { y1_alYID <- fromPathPiece x_alYIC;
                                       Just
                                         (\ yesod_dispatch_env_alYIG req_alYIH
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYIH)
                                                     methodsShowPostProcInfoR
                                               of {
                                                 Just f_alYIJ
                                                   -> let handler_alYII = f_alYIJ y1_alYID
                                                      in
                                                        handler_alYII
                                                          yesod_dispatch_env_alYIG
                                                          (Just (ShowPostProcInfoR y1_alYID))
                                                          req_alYIH
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYIG
                                                        (Just (ShowPostProcInfoR y1_alYID))
                                                        req_alYIH }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_post_proc_info"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYIK
                        -> case pieces_alYIK of {
                             [_, x_alYIL]
                               -> do { y1_alYIM <- fromPathPiece x_alYIL;
                                       Just
                                         (\ yesod_dispatch_env_alYIP req_alYIQ
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYIQ)
                                                     methodsLegacyShowPostProcInfoR
                                               of {
                                                 Just f_alYIS
                                                   -> let handler_alYIR = f_alYIS y1_alYIM
                                                      in
                                                        handler_alYIR
                                                          yesod_dispatch_env_alYIP
                                                          (Just (LegacyShowPostProcInfoR y1_alYIM))
                                                          req_alYIQ
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYIP
                                                        (Just (LegacyShowPostProcInfoR y1_alYIM))
                                                        req_alYIQ }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "results"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     True
                     (\ pieces_alYIT
                        -> case pieces_alYIT of {
                             (:) _ ((:) x_alYIU xrest_alYIW)
                               -> do { y1_alYIV <- fromPathPiece x_alYIU;
                                       yrest_alYIX <- fromPathMultiPiece xrest_alYIW;
                                       Just
                                         (\ yesod_dispatch_env_alYIY req_alYIZ
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYIZ)
                                                     methodsShowManyJobResultsR
                                               of {
                                                 Just f_alYJ1
                                                   -> let
                                                        handler_alYJ0 = f_alYJ1 y1_alYIV yrest_alYIX
                                                      in
                                                        handler_alYJ0
                                                          yesod_dispatch_env_alYIY
                                                          (Just
                                                             (ShowManyJobResultsR
                                                                y1_alYIV yrest_alYIX))
                                                          req_alYIZ
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYIY
                                                        (Just
                                                           (ShowManyJobResultsR
                                                              y1_alYIV yrest_alYIX))
                                                        req_alYIZ }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_job_results")]
                     True
                     (\ pieces_alYJ2
                        -> case pieces_alYJ2 of {
                             (:) _ xrest_alYJ3
                               -> do { yrest_alYJ4 <- fromPathMultiPiece xrest_alYJ3;
                                       Just
                                         (\ yesod_dispatch_env_alYJ5 req_alYJ6
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYJ6)
                                                     methodsLegacyShowJobResultsR
                                               of {
                                                 Just f_alYJ8
                                                   -> let handler_alYJ7 = f_alYJ8 yrest_alYJ4
                                                      in
                                                        handler_alYJ7
                                                          yesod_dispatch_env_alYJ5
                                                          (Just (LegacyShowJobResultsR yrest_alYJ4))
                                                          req_alYJ6
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYJ5
                                                        (Just (LegacyShowJobResultsR yrest_alYJ4))
                                                        req_alYJ6 }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "show_many_job_results")]
                     True
                     (\ pieces_alYJ9
                        -> case pieces_alYJ9 of {
                             (:) _ xrest_alYJa
                               -> do { yrest_alYJb <- fromPathMultiPiece xrest_alYJa;
                                       Just
                                         (\ yesod_dispatch_env_alYJc req_alYJd
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYJd)
                                                     methodsLegacyShowManyJobResultsR
                                               of {
                                                 Just f_alYJf
                                                   -> let handler_alYJe = f_alYJf yrest_alYJb
                                                      in
                                                        handler_alYJe
                                                          yesod_dispatch_env_alYJc
                                                          (Just
                                                             (LegacyShowManyJobResultsR
                                                                yrest_alYJb))
                                                          req_alYJd
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYJc
                                                        (Just
                                                           (LegacyShowManyJobResultsR yrest_alYJb))
                                                        req_alYJd }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "flexible-table"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     True
                     (\ pieces_alYJg
                        -> case pieces_alYJg of {
                             (:) _ ((:) x_alYJh xrest_alYJj)
                               -> do { y1_alYJi <- fromPathPiece x_alYJh;
                                       yrest_alYJk <- fromPathMultiPiece xrest_alYJj;
                                       Just
                                         (\ yesod_dispatch_env_alYJl req_alYJm
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYJm)
                                                     methodsFlexibleTableR
                                               of {
                                                 Just f_alYJo
                                                   -> let
                                                        handler_alYJn = f_alYJo y1_alYJi yrest_alYJk
                                                      in
                                                        handler_alYJn
                                                          yesod_dispatch_env_alYJl
                                                          (Just
                                                             (FlexibleTableR y1_alYJi yrest_alYJk))
                                                          req_alYJm
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYJl
                                                        (Just (FlexibleTableR y1_alYJi yrest_alYJk))
                                                        req_alYJm }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "competitions"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYJp
                        -> case pieces_alYJp of {
                             [_, x_alYJq]
                               -> do { y1_alYJr <- fromPathPiece x_alYJq;
                                       Just
                                         (\ yesod_dispatch_env_alYJu req_alYJv
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYJv)
                                                     methodsCompetitionR
                                               of {
                                                 Just f_alYJx
                                                   -> let handler_alYJw = f_alYJx y1_alYJr
                                                      in
                                                        handler_alYJw
                                                          yesod_dispatch_env_alYJu
                                                          (Just (CompetitionR y1_alYJr))
                                                          req_alYJv
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYJu
                                                        (Just (CompetitionR y1_alYJr))
                                                        req_alYJv }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "competition_with_config"),
                      yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Dynamic]
                     False
                     (\ pieces_alYJy
                        -> case pieces_alYJy of {
                             [_, x_alYJz]
                               -> do { y1_alYJA <- fromPathPiece x_alYJz;
                                       Just
                                         (\ yesod_dispatch_env_alYJD req_alYJE
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYJE)
                                                     methodsCompetitionWithConfigR
                                               of {
                                                 Just f_alYJG
                                                   -> let handler_alYJF = f_alYJG y1_alYJA
                                                      in
                                                        handler_alYJF
                                                          yesod_dispatch_env_alYJD
                                                          (Just (CompetitionWithConfigR y1_alYJA))
                                                          req_alYJE
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYJD
                                                        (Just (CompetitionWithConfigR y1_alYJA))
                                                        req_alYJE }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "control")]
                     False
                     (\ pieces_alYJH
                        -> case pieces_alYJH of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYJK req_alYJL
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYJL)
                                                     methodsControlR
                                               of {
                                                 Just f_alYJN
                                                   -> let handler_alYJM = f_alYJN
                                                      in
                                                        handler_alYJM
                                                          yesod_dispatch_env_alYJK
                                                          (Just ControlR)
                                                          req_alYJL
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYJK
                                                        (Just ControlR)
                                                        req_alYJL }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "registered")]
                     False
                     (\ pieces_alYJO
                        -> case pieces_alYJO of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYJR req_alYJS
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYJS)
                                                     methodsRegisteredR
                                               of {
                                                 Just f_alYJU
                                                   -> let handler_alYJT = f_alYJU
                                                      in
                                                        handler_alYJT
                                                          yesod_dispatch_env_alYJR
                                                          (Just RegisteredR)
                                                          req_alYJS
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYJR
                                                        (Just RegisteredR)
                                                        req_alYJS }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "competitions")]
                     False
                     (\ pieces_alYJV
                        -> case pieces_alYJV of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYJY req_alYJZ
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYJZ)
                                                     methodsListCompetitionsR
                                               of {
                                                 Just f_alYK1
                                                   -> let handler_alYK0 = f_alYK1
                                                      in
                                                        handler_alYK0
                                                          yesod_dispatch_env_alYJY
                                                          (Just ListCompetitionsR)
                                                          req_alYJZ
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYJY
                                                        (Just ListCompetitionsR)
                                                        req_alYJZ }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "test-runs")]
                     False
                     (\ pieces_alYK2
                        -> case pieces_alYK2 of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYK5 req_alYK6
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYK6)
                                                     methodsLegacyListCompetitionsR
                                               of {
                                                 Just f_alYK8
                                                   -> let handler_alYK7 = f_alYK8
                                                      in
                                                        handler_alYK7
                                                          yesod_dispatch_env_alYK5
                                                          (Just LegacyListCompetitionsR)
                                                          req_alYK6
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYK5
                                                        (Just LegacyListCompetitionsR)
                                                        req_alYK6 }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "hidden_competitions")]
                     False
                     (\ pieces_alYK9
                        -> case pieces_alYK9 of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYKc req_alYKd
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYKd)
                                                     methodsListHiddenCompetitionsR
                                               of {
                                                 Just f_alYKf
                                                   -> let handler_alYKe = f_alYKf
                                                      in
                                                        handler_alYKe
                                                          yesod_dispatch_env_alYKc
                                                          (Just ListHiddenCompetitionsR)
                                                          req_alYKd
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYKc
                                                        (Just ListHiddenCompetitionsR)
                                                        req_alYKd }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "hidden-test-runs")]
                     False
                     (\ pieces_alYKg
                        -> case pieces_alYKg of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYKj req_alYKk
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYKk)
                                                     methodsLegacyListHiddenCompetitionsR
                                               of {
                                                 Just f_alYKm
                                                   -> let handler_alYKl = f_alYKm
                                                      in
                                                        handler_alYKl
                                                          yesod_dispatch_env_alYKj
                                                          (Just LegacyListHiddenCompetitionsR)
                                                          req_alYKk
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYKj
                                                        (Just LegacyListHiddenCompetitionsR)
                                                        req_alYKk }) }
                             _ -> error "Invariant violated" }),
                   yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Route
                     [yesod-routes-1.2.0.7:Yesod.Routes.Dispatch.Static
                        (Data.Text.pack "import")]
                     False
                     (\ pieces_alYKn
                        -> case pieces_alYKn of {
                             [_]
                               -> do { Just
                                         (\ yesod_dispatch_env_alYKq req_alYKr
                                            -> case
                                                   M.lookup
                                                     (wai-3.0.2:Network.Wai.Internal.requestMethod
                                                        req_alYKr)
                                                     methodsImportR
                                               of {
                                                 Just f_alYKt
                                                   -> let handler_alYKs = f_alYKt
                                                      in
                                                        handler_alYKs
                                                          yesod_dispatch_env_alYKq
                                                          (Just ImportR)
                                                          req_alYKr
                                                 Nothing
                                                   -> yesodRunner
                                                        (badMethod
                                                         >> (return ghc-prim:GHC.Tuple.()))
                                                        yesod_dispatch_env_alYKq
                                                        (Just ImportR)
                                                        req_alYKr }) }
                             _ -> error "Invariant violated" })]
            methodsFaviconR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getFaviconR)]
            methodsRobotsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getRobotsR)]
            methodsHomeR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getHomeR)]
            methodsListJobPairsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getListJobPairsR)]
            methodsShowJobPairR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKu -> yesodRunner (getShowJobPairR arg_alYKu))]
            methodsLegacyShowJobPairR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKv -> yesodRunner (getLegacyShowJobPairR arg_alYKv))]
            methodsListProofsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getListProofsR)]
            methodsDisplayProofR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKw -> yesodRunner (getDisplayProofR arg_alYKw))]
            methodsLegacyDisplayProofR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKx -> yesodRunner (getLegacyDisplayProofR arg_alYKx))]
            methodsListJobsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getListJobsR)]
            methodsShowJobInfoR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKy -> yesodRunner (getShowJobInfoR arg_alYKy))]
            methodsLegacyShowJobInfoR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKz -> yesodRunner (getLegacyShowJobInfoR arg_alYKz))]
            methodsListBenchmarksR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getListBenchmarksR)]
            methodsShowBenchmarkInfoR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKA -> yesodRunner (getShowBenchmarkInfoR arg_alYKA))]
            methodsLegacyShowBenchmarkInfoR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKB
                      -> yesodRunner (getLegacyShowBenchmarkInfoR arg_alYKB))]
            methodsListSolversR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getListSolversR)]
            methodsShowSolverInfoR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKC -> yesodRunner (getShowSolverInfoR arg_alYKC))]
            methodsLegacyShowSolverInfoR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKD -> yesodRunner (getLegacyShowSolverInfoR arg_alYKD))]
            methodsListPostProcsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getListPostProcsR)]
            methodsShowPostProcInfoR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKE -> yesodRunner (getShowPostProcInfoR arg_alYKE))]
            methodsLegacyShowPostProcInfoR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKF -> yesodRunner (getLegacyShowPostProcInfoR arg_alYKF))]
            methodsShowManyJobResultsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKG arg_alYKH
                      -> yesodRunner (getShowManyJobResultsR arg_alYKG arg_alYKH))]
            methodsLegacyShowJobResultsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKI -> yesodRunner (getLegacyShowJobResultsR arg_alYKI))]
            methodsLegacyShowManyJobResultsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKJ
                      -> yesodRunner (getLegacyShowManyJobResultsR arg_alYKJ))]
            methodsFlexibleTableR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKK arg_alYKL
                      -> yesodRunner (getFlexibleTableR arg_alYKK arg_alYKL))]
            methodsCompetitionR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKM -> yesodRunner (getCompetitionR arg_alYKM))]
            methodsCompetitionWithConfigR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    \ arg_alYKN -> yesodRunner (getCompetitionWithConfigR arg_alYKN))]
            methodsControlR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getControlR),
                   ((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "POST", 
                    yesodRunner postControlR)]
            methodsRegisteredR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getRegisteredR)]
            methodsListCompetitionsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getListCompetitionsR)]
            methodsLegacyListCompetitionsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getLegacyListCompetitionsR)]
            methodsListHiddenCompetitionsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getListHiddenCompetitionsR)]
            methodsLegacyListHiddenCompetitionsR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getLegacyListHiddenCompetitionsR)]
            methodsImportR
              = containers-0.5.5.1:Data.Map.Base.fromList
                  [((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "GET", 
                    yesodRunner getImportR),
                   ((Data.Text.Encoding.encodeUtf8 . Data.Text.pack) "POST", 
                    yesodRunner postImportR)]
